
Proj_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000308  00800060  00003fc0  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800368  00800368  0000435c  2**0
                  ALLOC
  3 .stab         00003cc0  00000000  00000000  0000435c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019e3  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000099ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00009b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00009d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000bd60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000cec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000dec4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000e064  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000e322  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ec30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 07 18 	call	0x300e	; 0x300e <main>
      8a:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e4       	ldi	r26, 0x40	; 64
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e4       	ldi	r24, 0x40	; 64
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6a 1c 	jmp	0x38d4	; 0x38d4 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 86 1c 	jmp	0x390c	; 0x390c <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 8d 1c 	jmp	0x391a	; 0x391a <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 5b       	subi	r30, 0xB8	; 184
     93c:	fd 4f       	sbci	r31, 0xFD	; 253
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <USART_voidINIT>:
#include"../../Library/STD.h"

#include"../../Library/BIT_MATH.h"
#include "USART_privet.h"
#include "../REG.h"
void USART_voidINIT(void){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	/**/
	UCSRA=0b00100000;
     ca8:	eb e2       	ldi	r30, 0x2B	; 43
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 e2       	ldi	r24, 0x20	; 32
     cae:	80 83       	st	Z, r24
	 *bit4---->enable tx
	 *bit3---->enable rx
	 *bit2---->0--->8bit size
	 *bit0---->init 0
	 *bit1---->init 0   */
	UCSRB=0b00111000;
     cb0:	ea e2       	ldi	r30, 0x2A	; 42
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	88 e3       	ldi	r24, 0x38	; 56
     cb6:	80 83       	st	Z, r24
	 * bit4------->0 disable parity
	 * bit3-------->1 bit stop
	 * bit2-------->
	 * bit1--------->8 bit size
	 * */
	UCSRC=0b10000110;
     cb8:	e0 e4       	ldi	r30, 0x40	; 64
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	86 e8       	ldi	r24, 0x86	; 134
     cbe:	80 83       	st	Z, r24
	/*buad rate=51-------->9600*/
	UBRRL=51;
     cc0:	e9 e2       	ldi	r30, 0x29	; 41
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	83 e3       	ldi	r24, 0x33	; 51
     cc6:	80 83       	st	Z, r24
	UBRRH=0;
     cc8:	e0 e4       	ldi	r30, 0x40	; 64
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	10 82       	st	Z, r1
}
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <USART_voidTRANSMITR>:
void USART_voidTRANSMITR(u8 DATA){
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	0f 92       	push	r0
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	89 83       	std	Y+1, r24	; 0x01
	UDR=DATA;
     ce0:	ec e2       	ldi	r30, 0x2C	; 44
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	80 83       	st	Z, r24
	while(GET_BIT(UCSRA,5)==0){};
     ce8:	eb e2       	ldi	r30, 0x2B	; 43
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	82 95       	swap	r24
     cf0:	86 95       	lsr	r24
     cf2:	87 70       	andi	r24, 0x07	; 7
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	81 70       	andi	r24, 0x01	; 1
     cfa:	90 70       	andi	r25, 0x00	; 0
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	a1 f3       	breq	.-24     	; 0xce8 <USART_voidTRANSMITR+0x14>

}
     d00:	0f 90       	pop	r0
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <USART_u8RECIVER>:

u8   USART_u8RECIVER(void){
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
	//u8 DATA=UDR;
	while(GET_BIT(UCSRA,7)==0){};
     d10:	eb e2       	ldi	r30, 0x2B	; 43
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	88 23       	and	r24, r24
     d18:	dc f7       	brge	.-10     	; 0xd10 <USART_u8RECIVER+0x8>
	return UDR;
     d1a:	ec e2       	ldi	r30, 0x2C	; 44
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
}
     d20:	cf 91       	pop	r28
     d22:	df 91       	pop	r29
     d24:	08 95       	ret

00000d26 <USART_VoidSendString>:

void USART_VoidSendString(u8 *COPYu8StringPtr){
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <USART_VoidSendString+0x6>
     d2c:	0f 92       	push	r0
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	9b 83       	std	Y+3, r25	; 0x03
     d34:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8Itterator=0;
     d36:	19 82       	std	Y+1, r1	; 0x01
     d38:	0e c0       	rjmp	.+28     	; 0xd56 <USART_VoidSendString+0x30>
	while(COPYu8StringPtr[LOC_u8Itterator]!='\0'){

		USART_voidTRANSMITR(COPYu8StringPtr[LOC_u8Itterator]);
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	9b 81       	ldd	r25, Y+3	; 0x03
     d44:	fc 01       	movw	r30, r24
     d46:	e2 0f       	add	r30, r18
     d48:	f3 1f       	adc	r31, r19
     d4a:	80 81       	ld	r24, Z
     d4c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <USART_voidTRANSMITR>
		LOC_u8Itterator=LOC_u8Itterator+1;
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	8f 5f       	subi	r24, 0xFF	; 255
     d54:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void USART_VoidSendString(u8 *COPYu8StringPtr){
	u8 LOC_u8Itterator=0;
	while(COPYu8StringPtr[LOC_u8Itterator]!='\0'){
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	9b 81       	ldd	r25, Y+3	; 0x03
     d60:	fc 01       	movw	r30, r24
     d62:	e2 0f       	add	r30, r18
     d64:	f3 1f       	adc	r31, r19
     d66:	80 81       	ld	r24, Z
     d68:	88 23       	and	r24, r24
     d6a:	39 f7       	brne	.-50     	; 0xd3a <USART_VoidSendString+0x14>

		USART_voidTRANSMITR(COPYu8StringPtr[LOC_u8Itterator]);
		LOC_u8Itterator=LOC_u8Itterator+1;
	}

}
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	08 95       	ret

00000d78 <USART_PtrRecieveString>:

u8 STRING[20];
u8 *USART_PtrRecieveString(void){
     d78:	df 93       	push	r29
     d7a:	cf 93       	push	r28
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <USART_PtrRecieveString+0x6>
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
	u8 i=0;
     d82:	1a 82       	std	Y+2, r1	; 0x02
     d84:	0b c0       	rjmp	.+22     	; 0xd9c <USART_PtrRecieveString+0x24>
	u8 x;
	while((x=USART_u8RECIVER())!=13){
		STRING[i++]=x;
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	88 2f       	mov	r24, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	fc 01       	movw	r30, r24
     d8e:	e7 59       	subi	r30, 0x97	; 151
     d90:	fc 4f       	sbci	r31, 0xFC	; 252
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	80 83       	st	Z, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	8f 5f       	subi	r24, 0xFF	; 255
     d9a:	8a 83       	std	Y+2, r24	; 0x02

u8 STRING[20];
u8 *USART_PtrRecieveString(void){
	u8 i=0;
	u8 x;
	while((x=USART_u8RECIVER())!=13){
     d9c:	0e 94 84 06 	call	0xd08	; 0xd08 <USART_u8RECIVER>
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	8d 30       	cpi	r24, 0x0D	; 13
     da6:	79 f7       	brne	.-34     	; 0xd86 <USART_PtrRecieveString+0xe>
		STRING[i++]=x;

	}
	STRING[i]='\0';
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	88 2f       	mov	r24, r24
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	fc 01       	movw	r30, r24
     db0:	e7 59       	subi	r30, 0x97	; 151
     db2:	fc 4f       	sbci	r31, 0xFC	; 252
     db4:	10 82       	st	Z, r1

	return STRING;
     db6:	89 e6       	ldi	r24, 0x69	; 105
     db8:	93 e0       	ldi	r25, 0x03	; 3
}
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <DIO_init>:

#include "DIO.h"


void DIO_init (u8 portNumber, u8 pinNumber, u8 pinDirection)
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	00 d0       	rcall	.+0      	; 0xdca <DIO_init+0x6>
     dca:	00 d0       	rcall	.+0      	; 0xdcc <DIO_init+0x8>
     dcc:	0f 92       	push	r0
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	6a 83       	std	Y+2, r22	; 0x02
     dd6:	4b 83       	std	Y+3, r20	; 0x03
	switch (portNumber)
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	3d 83       	std	Y+5, r19	; 0x05
     de0:	2c 83       	std	Y+4, r18	; 0x04
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	9d 81       	ldd	r25, Y+5	; 0x05
     de6:	82 34       	cpi	r24, 0x42	; 66
     de8:	91 05       	cpc	r25, r1
     dea:	09 f4       	brne	.+2      	; 0xdee <DIO_init+0x2a>
     dec:	48 c0       	rjmp	.+144    	; 0xe7e <DIO_init+0xba>
     dee:	2c 81       	ldd	r18, Y+4	; 0x04
     df0:	3d 81       	ldd	r19, Y+5	; 0x05
     df2:	23 34       	cpi	r18, 0x43	; 67
     df4:	31 05       	cpc	r19, r1
     df6:	34 f4       	brge	.+12     	; 0xe04 <DIO_init+0x40>
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	9d 81       	ldd	r25, Y+5	; 0x05
     dfc:	81 34       	cpi	r24, 0x41	; 65
     dfe:	91 05       	cpc	r25, r1
     e00:	71 f0       	breq	.+28     	; 0xe1e <DIO_init+0x5a>
     e02:	cb c0       	rjmp	.+406    	; 0xf9a <DIO_init+0x1d6>
     e04:	2c 81       	ldd	r18, Y+4	; 0x04
     e06:	3d 81       	ldd	r19, Y+5	; 0x05
     e08:	23 34       	cpi	r18, 0x43	; 67
     e0a:	31 05       	cpc	r19, r1
     e0c:	09 f4       	brne	.+2      	; 0xe10 <DIO_init+0x4c>
     e0e:	67 c0       	rjmp	.+206    	; 0xede <DIO_init+0x11a>
     e10:	8c 81       	ldd	r24, Y+4	; 0x04
     e12:	9d 81       	ldd	r25, Y+5	; 0x05
     e14:	84 34       	cpi	r24, 0x44	; 68
     e16:	91 05       	cpc	r25, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <DIO_init+0x58>
     e1a:	91 c0       	rjmp	.+290    	; 0xf3e <DIO_init+0x17a>
     e1c:	be c0       	rjmp	.+380    	; 0xf9a <DIO_init+0x1d6>
	{
		case PORT_A:
			if (pinDirection == OUT)
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	a1 f4       	brne	.+40     	; 0xe4c <DIO_init+0x88>
			{
				SET_BIT(DDRA, pinNumber);
     e24:	aa e3       	ldi	r26, 0x3A	; 58
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	ea e3       	ldi	r30, 0x3A	; 58
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	48 2f       	mov	r20, r24
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <DIO_init+0x7e>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <DIO_init+0x7a>
     e46:	84 2b       	or	r24, r20
     e48:	8c 93       	st	X, r24
     e4a:	a7 c0       	rjmp	.+334    	; 0xf9a <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	88 23       	and	r24, r24
     e50:	09 f0       	breq	.+2      	; 0xe54 <DIO_init+0x90>
     e52:	a3 c0       	rjmp	.+326    	; 0xf9a <DIO_init+0x1d6>
			{
				CLR_BIT(DDRA, pinNumber);
     e54:	aa e3       	ldi	r26, 0x3A	; 58
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	ea e3       	ldi	r30, 0x3A	; 58
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_init+0xae>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_init+0xaa>
     e76:	80 95       	com	r24
     e78:	84 23       	and	r24, r20
     e7a:	8c 93       	st	X, r24
     e7c:	8e c0       	rjmp	.+284    	; 0xf9a <DIO_init+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_B:
			if (pinDirection == OUT)
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	a1 f4       	brne	.+40     	; 0xeac <DIO_init+0xe8>
			{
				SET_BIT(DDRB, pinNumber);
     e84:	a7 e3       	ldi	r26, 0x37	; 55
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e7 e3       	ldi	r30, 0x37	; 55
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <DIO_init+0xde>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <DIO_init+0xda>
     ea6:	84 2b       	or	r24, r20
     ea8:	8c 93       	st	X, r24
     eaa:	77 c0       	rjmp	.+238    	; 0xf9a <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	88 23       	and	r24, r24
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <DIO_init+0xf0>
     eb2:	73 c0       	rjmp	.+230    	; 0xf9a <DIO_init+0x1d6>
			{
				CLR_BIT(DDRB, pinNumber);
     eb4:	a7 e3       	ldi	r26, 0x37	; 55
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e7 e3       	ldi	r30, 0x37	; 55
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_init+0x10e>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_init+0x10a>
     ed6:	80 95       	com	r24
     ed8:	84 23       	and	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	5e c0       	rjmp	.+188    	; 0xf9a <DIO_init+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_C:
			if (pinDirection == OUT)
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	a1 f4       	brne	.+40     	; 0xf0c <DIO_init+0x148>
			{
				SET_BIT(DDRC, pinNumber);
     ee4:	a4 e3       	ldi	r26, 0x34	; 52
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e4 e3       	ldi	r30, 0x34	; 52
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_init+0x13e>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_init+0x13a>
     f06:	84 2b       	or	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	47 c0       	rjmp	.+142    	; 0xf9a <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	88 23       	and	r24, r24
     f10:	09 f0       	breq	.+2      	; 0xf14 <DIO_init+0x150>
     f12:	43 c0       	rjmp	.+134    	; 0xf9a <DIO_init+0x1d6>
			{
				CLR_BIT(DDRC, pinNumber);
     f14:	a4 e3       	ldi	r26, 0x34	; 52
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e4 e3       	ldi	r30, 0x34	; 52
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_init+0x16e>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_init+0x16a>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	2e c0       	rjmp	.+92     	; 0xf9a <DIO_init+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_D:
			if (pinDirection == OUT)
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	a1 f4       	brne	.+40     	; 0xf6c <DIO_init+0x1a8>
			{
				SET_BIT(DDRD, pinNumber);
     f44:	a1 e3       	ldi	r26, 0x31	; 49
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e1 e3       	ldi	r30, 0x31	; 49
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_init+0x19e>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_init+0x19a>
     f66:	84 2b       	or	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	17 c0       	rjmp	.+46     	; 0xf9a <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	88 23       	and	r24, r24
     f70:	a1 f4       	brne	.+40     	; 0xf9a <DIO_init+0x1d6>
			{
				CLR_BIT(DDRD, pinNumber);
     f72:	a1 e3       	ldi	r26, 0x31	; 49
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e1 e3       	ldi	r30, 0x31	; 49
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	02 2e       	mov	r0, r18
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_init+0x1cc>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_init+0x1c8>
     f94:	80 95       	com	r24
     f96:	84 23       	and	r24, r20
     f98:	8c 93       	st	X, r24
			{
				// ERR
			}
			break;
	}
}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <DIO_write>:

void DIO_write (u8 portNumber, u8 pinNumber, u8 pinValue)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <DIO_write+0x6>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <DIO_write+0x8>
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	6a 83       	std	Y+2, r22	; 0x02
     fbc:	4b 83       	std	Y+3, r20	; 0x03
	switch (portNumber)
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3d 83       	std	Y+5, r19	; 0x05
     fc6:	2c 83       	std	Y+4, r18	; 0x04
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	9d 81       	ldd	r25, Y+5	; 0x05
     fcc:	82 34       	cpi	r24, 0x42	; 66
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <DIO_write+0x2a>
     fd2:	48 c0       	rjmp	.+144    	; 0x1064 <DIO_write+0xba>
     fd4:	2c 81       	ldd	r18, Y+4	; 0x04
     fd6:	3d 81       	ldd	r19, Y+5	; 0x05
     fd8:	23 34       	cpi	r18, 0x43	; 67
     fda:	31 05       	cpc	r19, r1
     fdc:	34 f4       	brge	.+12     	; 0xfea <DIO_write+0x40>
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	81 34       	cpi	r24, 0x41	; 65
     fe4:	91 05       	cpc	r25, r1
     fe6:	71 f0       	breq	.+28     	; 0x1004 <DIO_write+0x5a>
     fe8:	cb c0       	rjmp	.+406    	; 0x1180 <DIO_write+0x1d6>
     fea:	2c 81       	ldd	r18, Y+4	; 0x04
     fec:	3d 81       	ldd	r19, Y+5	; 0x05
     fee:	23 34       	cpi	r18, 0x43	; 67
     ff0:	31 05       	cpc	r19, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <DIO_write+0x4c>
     ff4:	67 c0       	rjmp	.+206    	; 0x10c4 <DIO_write+0x11a>
     ff6:	8c 81       	ldd	r24, Y+4	; 0x04
     ff8:	9d 81       	ldd	r25, Y+5	; 0x05
     ffa:	84 34       	cpi	r24, 0x44	; 68
     ffc:	91 05       	cpc	r25, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <DIO_write+0x58>
    1000:	91 c0       	rjmp	.+290    	; 0x1124 <DIO_write+0x17a>
    1002:	be c0       	rjmp	.+380    	; 0x1180 <DIO_write+0x1d6>
	{
		case PORT_A:
			if (pinValue == HIGH)
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	a1 f4       	brne	.+40     	; 0x1032 <DIO_write+0x88>
			{
				SET_BIT(PORTA, pinNumber);
    100a:	ab e3       	ldi	r26, 0x3B	; 59
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	eb e3       	ldi	r30, 0x3B	; 59
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	8a 81       	ldd	r24, Y+2	; 0x02
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 2e       	mov	r0, r18
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <DIO_write+0x7e>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	0a 94       	dec	r0
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <DIO_write+0x7a>
    102c:	84 2b       	or	r24, r20
    102e:	8c 93       	st	X, r24
    1030:	a7 c0       	rjmp	.+334    	; 0x1180 <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	88 23       	and	r24, r24
    1036:	09 f0       	breq	.+2      	; 0x103a <DIO_write+0x90>
    1038:	a3 c0       	rjmp	.+326    	; 0x1180 <DIO_write+0x1d6>
			{
				CLR_BIT(PORTA, pinNumber);
    103a:	ab e3       	ldi	r26, 0x3B	; 59
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	eb e3       	ldi	r30, 0x3B	; 59
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_write+0xae>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_write+0xaa>
    105c:	80 95       	com	r24
    105e:	84 23       	and	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	8e c0       	rjmp	.+284    	; 0x1180 <DIO_write+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_B:
			if (pinValue == HIGH)
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	a1 f4       	brne	.+40     	; 0x1092 <DIO_write+0xe8>
			{
				SET_BIT(PORTB, pinNumber);
    106a:	a8 e3       	ldi	r26, 0x38	; 56
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e8 e3       	ldi	r30, 0x38	; 56
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <DIO_write+0xde>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <DIO_write+0xda>
    108c:	84 2b       	or	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	77 c0       	rjmp	.+238    	; 0x1180 <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	88 23       	and	r24, r24
    1096:	09 f0       	breq	.+2      	; 0x109a <DIO_write+0xf0>
    1098:	73 c0       	rjmp	.+230    	; 0x1180 <DIO_write+0x1d6>
			{
				CLR_BIT(PORTB, pinNumber);
    109a:	a8 e3       	ldi	r26, 0x38	; 56
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e8 e3       	ldi	r30, 0x38	; 56
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_write+0x10e>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_write+0x10a>
    10bc:	80 95       	com	r24
    10be:	84 23       	and	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	5e c0       	rjmp	.+188    	; 0x1180 <DIO_write+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_C:
			if (pinValue == HIGH)
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	a1 f4       	brne	.+40     	; 0x10f2 <DIO_write+0x148>
			{
				SET_BIT(PORTC, pinNumber);
    10ca:	a5 e3       	ldi	r26, 0x35	; 53
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e5 e3       	ldi	r30, 0x35	; 53
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_write+0x13e>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_write+0x13a>
    10ec:	84 2b       	or	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	47 c0       	rjmp	.+142    	; 0x1180 <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	88 23       	and	r24, r24
    10f6:	09 f0       	breq	.+2      	; 0x10fa <DIO_write+0x150>
    10f8:	43 c0       	rjmp	.+134    	; 0x1180 <DIO_write+0x1d6>
			{
				CLR_BIT(PORTC, pinNumber);
    10fa:	a5 e3       	ldi	r26, 0x35	; 53
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e5 e3       	ldi	r30, 0x35	; 53
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	48 2f       	mov	r20, r24
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	02 2e       	mov	r0, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_write+0x16e>
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	0a 94       	dec	r0
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <DIO_write+0x16a>
    111c:	80 95       	com	r24
    111e:	84 23       	and	r24, r20
    1120:	8c 93       	st	X, r24
    1122:	2e c0       	rjmp	.+92     	; 0x1180 <DIO_write+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_D:
			if (pinValue == HIGH)
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	a1 f4       	brne	.+40     	; 0x1152 <DIO_write+0x1a8>
			{
				SET_BIT(PORTD, pinNumber);
    112a:	a2 e3       	ldi	r26, 0x32	; 50
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e2 e3       	ldi	r30, 0x32	; 50
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_write+0x19e>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_write+0x19a>
    114c:	84 2b       	or	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	17 c0       	rjmp	.+46     	; 0x1180 <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	88 23       	and	r24, r24
    1156:	a1 f4       	brne	.+40     	; 0x1180 <DIO_write+0x1d6>
			{
				CLR_BIT(PORTD, pinNumber);
    1158:	a2 e3       	ldi	r26, 0x32	; 50
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e2 e3       	ldi	r30, 0x32	; 50
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_write+0x1cc>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_write+0x1c8>
    117a:	80 95       	com	r24
    117c:	84 23       	and	r24, r20
    117e:	8c 93       	st	X, r24
			{
				// ERR
			}
			break;
	}
}
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <DIO_toggle>:

void DIO_toggle (u8 portNumber, u8 pinNumber)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	00 d0       	rcall	.+0      	; 0x1196 <DIO_toggle+0x6>
    1196:	00 d0       	rcall	.+0      	; 0x1198 <DIO_toggle+0x8>
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	6a 83       	std	Y+2, r22	; 0x02
	switch (portNumber)
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	3c 83       	std	Y+4, r19	; 0x04
    11a8:	2b 83       	std	Y+3, r18	; 0x03
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	82 34       	cpi	r24, 0x42	; 66
    11b0:	91 05       	cpc	r25, r1
    11b2:	51 f1       	breq	.+84     	; 0x1208 <DIO_toggle+0x78>
    11b4:	2b 81       	ldd	r18, Y+3	; 0x03
    11b6:	3c 81       	ldd	r19, Y+4	; 0x04
    11b8:	23 34       	cpi	r18, 0x43	; 67
    11ba:	31 05       	cpc	r19, r1
    11bc:	34 f4       	brge	.+12     	; 0x11ca <DIO_toggle+0x3a>
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	81 34       	cpi	r24, 0x41	; 65
    11c4:	91 05       	cpc	r25, r1
    11c6:	61 f0       	breq	.+24     	; 0x11e0 <DIO_toggle+0x50>
    11c8:	5a c0       	rjmp	.+180    	; 0x127e <DIO_toggle+0xee>
    11ca:	2b 81       	ldd	r18, Y+3	; 0x03
    11cc:	3c 81       	ldd	r19, Y+4	; 0x04
    11ce:	23 34       	cpi	r18, 0x43	; 67
    11d0:	31 05       	cpc	r19, r1
    11d2:	71 f1       	breq	.+92     	; 0x1230 <DIO_toggle+0xa0>
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	84 34       	cpi	r24, 0x44	; 68
    11da:	91 05       	cpc	r25, r1
    11dc:	e9 f1       	breq	.+122    	; 0x1258 <DIO_toggle+0xc8>
    11de:	4f c0       	rjmp	.+158    	; 0x127e <DIO_toggle+0xee>
	{
		case PORT_A:
			TOG_BIT(PORTA, pinNumber);
    11e0:	ab e3       	ldi	r26, 0x3B	; 59
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	eb e3       	ldi	r30, 0x3B	; 59
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_toggle+0x6e>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_toggle+0x6a>
    1202:	84 27       	eor	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	3b c0       	rjmp	.+118    	; 0x127e <DIO_toggle+0xee>
			break;
		case PORT_B:
			TOG_BIT(PORTB, pinNumber);
    1208:	a8 e3       	ldi	r26, 0x38	; 56
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e8 e3       	ldi	r30, 0x38	; 56
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 2e       	mov	r0, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <DIO_toggle+0x96>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	0a 94       	dec	r0
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <DIO_toggle+0x92>
    122a:	84 27       	eor	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	27 c0       	rjmp	.+78     	; 0x127e <DIO_toggle+0xee>
			break;
		case PORT_C:
			TOG_BIT(PORTC, pinNumber);
    1230:	a5 e3       	ldi	r26, 0x35	; 53
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e5 e3       	ldi	r30, 0x35	; 53
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_toggle+0xbe>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_toggle+0xba>
    1252:	84 27       	eor	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	13 c0       	rjmp	.+38     	; 0x127e <DIO_toggle+0xee>
			break;
		case PORT_D:
			TOG_BIT(PORTD, pinNumber);
    1258:	a2 e3       	ldi	r26, 0x32	; 50
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e2 e3       	ldi	r30, 0x32	; 50
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_toggle+0xe6>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO_toggle+0xe2>
    127a:	84 27       	eor	r24, r20
    127c:	8c 93       	st	X, r24
			break;
		default:
			// ERR
			break;
	}
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <DIO_read>:

u8   DIO_read (u8 portNumber, u8 pinNumber)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <DIO_read+0x6>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <DIO_read+0x8>
    1294:	0f 92       	push	r0
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	8a 83       	std	Y+2, r24	; 0x02
    129c:	6b 83       	std	Y+3, r22	; 0x03
	u8 pinValue = 0;
    129e:	19 82       	std	Y+1, r1	; 0x01
	switch (portNumber)
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	3d 83       	std	Y+5, r19	; 0x05
    12a8:	2c 83       	std	Y+4, r18	; 0x04
    12aa:	4c 81       	ldd	r20, Y+4	; 0x04
    12ac:	5d 81       	ldd	r21, Y+5	; 0x05
    12ae:	42 34       	cpi	r20, 0x42	; 66
    12b0:	51 05       	cpc	r21, r1
    12b2:	41 f1       	breq	.+80     	; 0x1304 <DIO_read+0x78>
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	83 34       	cpi	r24, 0x43	; 67
    12ba:	91 05       	cpc	r25, r1
    12bc:	34 f4       	brge	.+12     	; 0x12ca <DIO_read+0x3e>
    12be:	2c 81       	ldd	r18, Y+4	; 0x04
    12c0:	3d 81       	ldd	r19, Y+5	; 0x05
    12c2:	21 34       	cpi	r18, 0x41	; 65
    12c4:	31 05       	cpc	r19, r1
    12c6:	61 f0       	breq	.+24     	; 0x12e0 <DIO_read+0x54>
    12c8:	52 c0       	rjmp	.+164    	; 0x136e <DIO_read+0xe2>
    12ca:	4c 81       	ldd	r20, Y+4	; 0x04
    12cc:	5d 81       	ldd	r21, Y+5	; 0x05
    12ce:	43 34       	cpi	r20, 0x43	; 67
    12d0:	51 05       	cpc	r21, r1
    12d2:	51 f1       	breq	.+84     	; 0x1328 <DIO_read+0x9c>
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	9d 81       	ldd	r25, Y+5	; 0x05
    12d8:	84 34       	cpi	r24, 0x44	; 68
    12da:	91 05       	cpc	r25, r1
    12dc:	b9 f1       	breq	.+110    	; 0x134c <DIO_read+0xc0>
    12de:	47 c0       	rjmp	.+142    	; 0x136e <DIO_read+0xe2>
	{
		case PORT_A:
			pinValue = GET_BIT(PINA, pinNumber);
    12e0:	e9 e3       	ldi	r30, 0x39	; 57
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	88 2f       	mov	r24, r24
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a9 01       	movw	r20, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <DIO_read+0x6c>
    12f4:	55 95       	asr	r21
    12f6:	47 95       	ror	r20
    12f8:	8a 95       	dec	r24
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <DIO_read+0x68>
    12fc:	ca 01       	movw	r24, r20
    12fe:	81 70       	andi	r24, 0x01	; 1
    1300:	89 83       	std	Y+1, r24	; 0x01
    1302:	35 c0       	rjmp	.+106    	; 0x136e <DIO_read+0xe2>
			break;
		case PORT_B:
			pinValue = GET_BIT(PINB, pinNumber);
    1304:	e6 e3       	ldi	r30, 0x36	; 54
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a9 01       	movw	r20, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_read+0x90>
    1318:	55 95       	asr	r21
    131a:	47 95       	ror	r20
    131c:	8a 95       	dec	r24
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_read+0x8c>
    1320:	ca 01       	movw	r24, r20
    1322:	81 70       	andi	r24, 0x01	; 1
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	23 c0       	rjmp	.+70     	; 0x136e <DIO_read+0xe2>
			break;
		case PORT_C:
			pinValue = GET_BIT(PINC, pinNumber);
    1328:	e3 e3       	ldi	r30, 0x33	; 51
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	a9 01       	movw	r20, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_read+0xb4>
    133c:	55 95       	asr	r21
    133e:	47 95       	ror	r20
    1340:	8a 95       	dec	r24
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_read+0xb0>
    1344:	ca 01       	movw	r24, r20
    1346:	81 70       	andi	r24, 0x01	; 1
    1348:	89 83       	std	Y+1, r24	; 0x01
    134a:	11 c0       	rjmp	.+34     	; 0x136e <DIO_read+0xe2>
			break;
		case PORT_D:
			pinValue = GET_BIT(PIND, pinNumber);
    134c:	e0 e3       	ldi	r30, 0x30	; 48
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a9 01       	movw	r20, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_read+0xd8>
    1360:	55 95       	asr	r21
    1362:	47 95       	ror	r20
    1364:	8a 95       	dec	r24
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <DIO_read+0xd4>
    1368:	ca 01       	movw	r24, r20
    136a:	81 70       	andi	r24, 0x01	; 1
    136c:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			// ERR
			break;
	}
	return pinValue;
    136e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    1388:	ea e3       	ldi	r30, 0x3A	; 58
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8f e7       	ldi	r24, 0x7F	; 127
    138e:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    1390:	e7 e3       	ldi	r30, 0x37	; 55
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	8d ef       	ldi	r24, 0xFD	; 253
    1396:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    1398:	e4 e3       	ldi	r30, 0x34	; 52
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	83 e1       	ldi	r24, 0x13	; 19
    139e:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    13a0:	e1 e3       	ldi	r30, 0x31	; 49
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    13a6:	eb e3       	ldi	r30, 0x3B	; 59
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    13ac:	e8 e3       	ldi	r30, 0x38	; 56
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	84 ef       	ldi	r24, 0xF4	; 244
    13b2:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    13b4:	e5 e3       	ldi	r30, 0x35	; 53
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    13ba:	e2 e3       	ldi	r30, 0x32	; 50
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8c e3       	ldi	r24, 0x3C	; 60
    13c0:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	2e 97       	sbiw	r28, 0x0e	; 14
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	8a 83       	std	Y+2, r24	; 0x02
    13e0:	6b 83       	std	Y+3, r22	; 0x03
    13e2:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	84 30       	cpi	r24, 0x04	; 4
    13ec:	08 f0       	brcs	.+2      	; 0x13f0 <DIO_enu_SetPinDirection+0x26>
    13ee:	0c c1       	rjmp	.+536    	; 0x1608 <DIO_enu_SetPinDirection+0x23e>
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	88 30       	cpi	r24, 0x08	; 8
    13f4:	08 f0       	brcs	.+2      	; 0x13f8 <DIO_enu_SetPinDirection+0x2e>
    13f6:	08 c1       	rjmp	.+528    	; 0x1608 <DIO_enu_SetPinDirection+0x23e>
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	21 f0       	breq	.+8      	; 0x1406 <DIO_enu_SetPinDirection+0x3c>
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	88 23       	and	r24, r24
    1402:	09 f0       	breq	.+2      	; 0x1406 <DIO_enu_SetPinDirection+0x3c>
    1404:	01 c1       	rjmp	.+514    	; 0x1608 <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	3e 87       	std	Y+14, r19	; 0x0e
    140e:	2d 87       	std	Y+13, r18	; 0x0d
    1410:	8d 85       	ldd	r24, Y+13	; 0x0d
    1412:	9e 85       	ldd	r25, Y+14	; 0x0e
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	91 05       	cpc	r25, r1
    1418:	09 f4       	brne	.+2      	; 0x141c <DIO_enu_SetPinDirection+0x52>
    141a:	4f c0       	rjmp	.+158    	; 0x14ba <DIO_enu_SetPinDirection+0xf0>
    141c:	2d 85       	ldd	r18, Y+13	; 0x0d
    141e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1420:	22 30       	cpi	r18, 0x02	; 2
    1422:	31 05       	cpc	r19, r1
    1424:	2c f4       	brge	.+10     	; 0x1430 <DIO_enu_SetPinDirection+0x66>
    1426:	8d 85       	ldd	r24, Y+13	; 0x0d
    1428:	9e 85       	ldd	r25, Y+14	; 0x0e
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	71 f0       	breq	.+28     	; 0x144a <DIO_enu_SetPinDirection+0x80>
    142e:	ed c0       	rjmp	.+474    	; 0x160a <DIO_enu_SetPinDirection+0x240>
    1430:	2d 85       	ldd	r18, Y+13	; 0x0d
    1432:	3e 85       	ldd	r19, Y+14	; 0x0e
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	09 f4       	brne	.+2      	; 0x143c <DIO_enu_SetPinDirection+0x72>
    143a:	77 c0       	rjmp	.+238    	; 0x152a <DIO_enu_SetPinDirection+0x160>
    143c:	8d 85       	ldd	r24, Y+13	; 0x0d
    143e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1440:	83 30       	cpi	r24, 0x03	; 3
    1442:	91 05       	cpc	r25, r1
    1444:	09 f4       	brne	.+2      	; 0x1448 <DIO_enu_SetPinDirection+0x7e>
    1446:	a9 c0       	rjmp	.+338    	; 0x159a <DIO_enu_SetPinDirection+0x1d0>
    1448:	e0 c0       	rjmp	.+448    	; 0x160a <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	3c 87       	std	Y+12, r19	; 0x0c
    1452:	2b 87       	std	Y+11, r18	; 0x0b
    1454:	8b 85       	ldd	r24, Y+11	; 0x0b
    1456:	9c 85       	ldd	r25, Y+12	; 0x0c
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	d1 f0       	breq	.+52     	; 0x1490 <DIO_enu_SetPinDirection+0xc6>
    145c:	2b 85       	ldd	r18, Y+11	; 0x0b
    145e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1460:	21 30       	cpi	r18, 0x01	; 1
    1462:	31 05       	cpc	r19, r1
    1464:	09 f0       	breq	.+2      	; 0x1468 <DIO_enu_SetPinDirection+0x9e>
    1466:	d1 c0       	rjmp	.+418    	; 0x160a <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    1468:	aa e3       	ldi	r26, 0x3A	; 58
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ea e3       	ldi	r30, 0x3A	; 58
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_enu_SetPinDirection+0xbc>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_enu_SetPinDirection+0xb8>
    148a:	84 2b       	or	r24, r20
    148c:	8c 93       	st	X, r24
    148e:	bd c0       	rjmp	.+378    	; 0x160a <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    1490:	aa e3       	ldi	r26, 0x3A	; 58
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ea e3       	ldi	r30, 0x3A	; 58
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_enu_SetPinDirection+0xe4>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_enu_SetPinDirection+0xe0>
    14b2:	80 95       	com	r24
    14b4:	84 23       	and	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	a8 c0       	rjmp	.+336    	; 0x160a <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	3a 87       	std	Y+10, r19	; 0x0a
    14c2:	29 87       	std	Y+9, r18	; 0x09
    14c4:	89 85       	ldd	r24, Y+9	; 0x09
    14c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	d1 f0       	breq	.+52     	; 0x1500 <DIO_enu_SetPinDirection+0x136>
    14cc:	29 85       	ldd	r18, Y+9	; 0x09
    14ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    14d0:	21 30       	cpi	r18, 0x01	; 1
    14d2:	31 05       	cpc	r19, r1
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <DIO_enu_SetPinDirection+0x10e>
    14d6:	99 c0       	rjmp	.+306    	; 0x160a <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    14d8:	a7 e3       	ldi	r26, 0x37	; 55
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e7 e3       	ldi	r30, 0x37	; 55
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_enu_SetPinDirection+0x12c>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_enu_SetPinDirection+0x128>
    14fa:	84 2b       	or	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	85 c0       	rjmp	.+266    	; 0x160a <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    1500:	a7 e3       	ldi	r26, 0x37	; 55
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e7 e3       	ldi	r30, 0x37	; 55
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	48 2f       	mov	r20, r24
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	02 2e       	mov	r0, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <DIO_enu_SetPinDirection+0x154>
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	0a 94       	dec	r0
    1520:	e2 f7       	brpl	.-8      	; 0x151a <DIO_enu_SetPinDirection+0x150>
    1522:	80 95       	com	r24
    1524:	84 23       	and	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	70 c0       	rjmp	.+224    	; 0x160a <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    152a:	8c 81       	ldd	r24, Y+4	; 0x04
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	38 87       	std	Y+8, r19	; 0x08
    1532:	2f 83       	std	Y+7, r18	; 0x07
    1534:	8f 81       	ldd	r24, Y+7	; 0x07
    1536:	98 85       	ldd	r25, Y+8	; 0x08
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	d1 f0       	breq	.+52     	; 0x1570 <DIO_enu_SetPinDirection+0x1a6>
    153c:	2f 81       	ldd	r18, Y+7	; 0x07
    153e:	38 85       	ldd	r19, Y+8	; 0x08
    1540:	21 30       	cpi	r18, 0x01	; 1
    1542:	31 05       	cpc	r19, r1
    1544:	09 f0       	breq	.+2      	; 0x1548 <DIO_enu_SetPinDirection+0x17e>
    1546:	61 c0       	rjmp	.+194    	; 0x160a <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    1548:	a4 e3       	ldi	r26, 0x34	; 52
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e4 e3       	ldi	r30, 0x34	; 52
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_enu_SetPinDirection+0x19c>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_enu_SetPinDirection+0x198>
    156a:	84 2b       	or	r24, r20
    156c:	8c 93       	st	X, r24
    156e:	4d c0       	rjmp	.+154    	; 0x160a <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    1570:	a4 e3       	ldi	r26, 0x34	; 52
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e4 e3       	ldi	r30, 0x34	; 52
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_enu_SetPinDirection+0x1c4>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <DIO_enu_SetPinDirection+0x1c0>
    1592:	80 95       	com	r24
    1594:	84 23       	and	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	38 c0       	rjmp	.+112    	; 0x160a <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	3e 83       	std	Y+6, r19	; 0x06
    15a2:	2d 83       	std	Y+5, r18	; 0x05
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	c9 f0       	breq	.+50     	; 0x15de <DIO_enu_SetPinDirection+0x214>
    15ac:	2d 81       	ldd	r18, Y+5	; 0x05
    15ae:	3e 81       	ldd	r19, Y+6	; 0x06
    15b0:	21 30       	cpi	r18, 0x01	; 1
    15b2:	31 05       	cpc	r19, r1
    15b4:	51 f5       	brne	.+84     	; 0x160a <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    15b6:	a1 e3       	ldi	r26, 0x31	; 49
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e1 e3       	ldi	r30, 0x31	; 49
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_enu_SetPinDirection+0x20a>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_enu_SetPinDirection+0x206>
    15d8:	84 2b       	or	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	16 c0       	rjmp	.+44     	; 0x160a <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    15de:	a1 e3       	ldi	r26, 0x31	; 49
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e1 e3       	ldi	r30, 0x31	; 49
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 2e       	mov	r0, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <DIO_enu_SetPinDirection+0x232>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	0a 94       	dec	r0
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <DIO_enu_SetPinDirection+0x22e>
    1600:	80 95       	com	r24
    1602:	84 23       	and	r24, r20
    1604:	8c 93       	st	X, r24
    1606:	01 c0       	rjmp	.+2      	; 0x160a <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    1608:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    160a:	89 81       	ldd	r24, Y+1	; 0x01
}
    160c:	2e 96       	adiw	r28, 0x0e	; 14
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	2e 97       	sbiw	r28, 0x0e	; 14
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	8a 83       	std	Y+2, r24	; 0x02
    1634:	6b 83       	std	Y+3, r22	; 0x03
    1636:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	84 30       	cpi	r24, 0x04	; 4
    1640:	08 f0       	brcs	.+2      	; 0x1644 <DIO_enu_SetPinValue+0x26>
    1642:	0c c1       	rjmp	.+536    	; 0x185c <DIO_enu_SetPinValue+0x23e>
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	88 30       	cpi	r24, 0x08	; 8
    1648:	08 f0       	brcs	.+2      	; 0x164c <DIO_enu_SetPinValue+0x2e>
    164a:	08 c1       	rjmp	.+528    	; 0x185c <DIO_enu_SetPinValue+0x23e>
    164c:	8c 81       	ldd	r24, Y+4	; 0x04
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	21 f0       	breq	.+8      	; 0x165a <DIO_enu_SetPinValue+0x3c>
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	88 23       	and	r24, r24
    1656:	09 f0       	breq	.+2      	; 0x165a <DIO_enu_SetPinValue+0x3c>
    1658:	01 c1       	rjmp	.+514    	; 0x185c <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	3e 87       	std	Y+14, r19	; 0x0e
    1662:	2d 87       	std	Y+13, r18	; 0x0d
    1664:	8d 85       	ldd	r24, Y+13	; 0x0d
    1666:	9e 85       	ldd	r25, Y+14	; 0x0e
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	91 05       	cpc	r25, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <DIO_enu_SetPinValue+0x52>
    166e:	4f c0       	rjmp	.+158    	; 0x170e <DIO_enu_SetPinValue+0xf0>
    1670:	2d 85       	ldd	r18, Y+13	; 0x0d
    1672:	3e 85       	ldd	r19, Y+14	; 0x0e
    1674:	22 30       	cpi	r18, 0x02	; 2
    1676:	31 05       	cpc	r19, r1
    1678:	2c f4       	brge	.+10     	; 0x1684 <DIO_enu_SetPinValue+0x66>
    167a:	8d 85       	ldd	r24, Y+13	; 0x0d
    167c:	9e 85       	ldd	r25, Y+14	; 0x0e
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	71 f0       	breq	.+28     	; 0x169e <DIO_enu_SetPinValue+0x80>
    1682:	ed c0       	rjmp	.+474    	; 0x185e <DIO_enu_SetPinValue+0x240>
    1684:	2d 85       	ldd	r18, Y+13	; 0x0d
    1686:	3e 85       	ldd	r19, Y+14	; 0x0e
    1688:	22 30       	cpi	r18, 0x02	; 2
    168a:	31 05       	cpc	r19, r1
    168c:	09 f4       	brne	.+2      	; 0x1690 <DIO_enu_SetPinValue+0x72>
    168e:	77 c0       	rjmp	.+238    	; 0x177e <DIO_enu_SetPinValue+0x160>
    1690:	8d 85       	ldd	r24, Y+13	; 0x0d
    1692:	9e 85       	ldd	r25, Y+14	; 0x0e
    1694:	83 30       	cpi	r24, 0x03	; 3
    1696:	91 05       	cpc	r25, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <DIO_enu_SetPinValue+0x7e>
    169a:	a9 c0       	rjmp	.+338    	; 0x17ee <DIO_enu_SetPinValue+0x1d0>
    169c:	e0 c0       	rjmp	.+448    	; 0x185e <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	3c 87       	std	Y+12, r19	; 0x0c
    16a6:	2b 87       	std	Y+11, r18	; 0x0b
    16a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    16aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	d1 f0       	breq	.+52     	; 0x16e4 <DIO_enu_SetPinValue+0xc6>
    16b0:	2b 85       	ldd	r18, Y+11	; 0x0b
    16b2:	3c 85       	ldd	r19, Y+12	; 0x0c
    16b4:	21 30       	cpi	r18, 0x01	; 1
    16b6:	31 05       	cpc	r19, r1
    16b8:	09 f0       	breq	.+2      	; 0x16bc <DIO_enu_SetPinValue+0x9e>
    16ba:	d1 c0       	rjmp	.+418    	; 0x185e <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    16bc:	ab e3       	ldi	r26, 0x3B	; 59
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	eb e3       	ldi	r30, 0x3B	; 59
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_enu_SetPinValue+0xbc>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_enu_SetPinValue+0xb8>
    16de:	84 2b       	or	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	bd c0       	rjmp	.+378    	; 0x185e <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    16e4:	ab e3       	ldi	r26, 0x3B	; 59
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	eb e3       	ldi	r30, 0x3B	; 59
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <DIO_enu_SetPinValue+0xe4>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <DIO_enu_SetPinValue+0xe0>
    1706:	80 95       	com	r24
    1708:	84 23       	and	r24, r20
    170a:	8c 93       	st	X, r24
    170c:	a8 c0       	rjmp	.+336    	; 0x185e <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	3a 87       	std	Y+10, r19	; 0x0a
    1716:	29 87       	std	Y+9, r18	; 0x09
    1718:	89 85       	ldd	r24, Y+9	; 0x09
    171a:	9a 85       	ldd	r25, Y+10	; 0x0a
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	d1 f0       	breq	.+52     	; 0x1754 <DIO_enu_SetPinValue+0x136>
    1720:	29 85       	ldd	r18, Y+9	; 0x09
    1722:	3a 85       	ldd	r19, Y+10	; 0x0a
    1724:	21 30       	cpi	r18, 0x01	; 1
    1726:	31 05       	cpc	r19, r1
    1728:	09 f0       	breq	.+2      	; 0x172c <DIO_enu_SetPinValue+0x10e>
    172a:	99 c0       	rjmp	.+306    	; 0x185e <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    172c:	a8 e3       	ldi	r26, 0x38	; 56
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e8 e3       	ldi	r30, 0x38	; 56
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <DIO_enu_SetPinValue+0x12c>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <DIO_enu_SetPinValue+0x128>
    174e:	84 2b       	or	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	85 c0       	rjmp	.+266    	; 0x185e <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    1754:	a8 e3       	ldi	r26, 0x38	; 56
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e8 e3       	ldi	r30, 0x38	; 56
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <DIO_enu_SetPinValue+0x154>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <DIO_enu_SetPinValue+0x150>
    1776:	80 95       	com	r24
    1778:	84 23       	and	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	70 c0       	rjmp	.+224    	; 0x185e <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	38 87       	std	Y+8, r19	; 0x08
    1786:	2f 83       	std	Y+7, r18	; 0x07
    1788:	8f 81       	ldd	r24, Y+7	; 0x07
    178a:	98 85       	ldd	r25, Y+8	; 0x08
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	d1 f0       	breq	.+52     	; 0x17c4 <DIO_enu_SetPinValue+0x1a6>
    1790:	2f 81       	ldd	r18, Y+7	; 0x07
    1792:	38 85       	ldd	r19, Y+8	; 0x08
    1794:	21 30       	cpi	r18, 0x01	; 1
    1796:	31 05       	cpc	r19, r1
    1798:	09 f0       	breq	.+2      	; 0x179c <DIO_enu_SetPinValue+0x17e>
    179a:	61 c0       	rjmp	.+194    	; 0x185e <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    179c:	a5 e3       	ldi	r26, 0x35	; 53
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e5 e3       	ldi	r30, 0x35	; 53
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <DIO_enu_SetPinValue+0x19c>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <DIO_enu_SetPinValue+0x198>
    17be:	84 2b       	or	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	4d c0       	rjmp	.+154    	; 0x185e <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    17c4:	a5 e3       	ldi	r26, 0x35	; 53
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e5 e3       	ldi	r30, 0x35	; 53
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <DIO_enu_SetPinValue+0x1c4>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <DIO_enu_SetPinValue+0x1c0>
    17e6:	80 95       	com	r24
    17e8:	84 23       	and	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	38 c0       	rjmp	.+112    	; 0x185e <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    17ee:	8c 81       	ldd	r24, Y+4	; 0x04
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	3e 83       	std	Y+6, r19	; 0x06
    17f6:	2d 83       	std	Y+5, r18	; 0x05
    17f8:	8d 81       	ldd	r24, Y+5	; 0x05
    17fa:	9e 81       	ldd	r25, Y+6	; 0x06
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	c9 f0       	breq	.+50     	; 0x1832 <DIO_enu_SetPinValue+0x214>
    1800:	2d 81       	ldd	r18, Y+5	; 0x05
    1802:	3e 81       	ldd	r19, Y+6	; 0x06
    1804:	21 30       	cpi	r18, 0x01	; 1
    1806:	31 05       	cpc	r19, r1
    1808:	51 f5       	brne	.+84     	; 0x185e <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    180a:	a2 e3       	ldi	r26, 0x32	; 50
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e2 e3       	ldi	r30, 0x32	; 50
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	48 2f       	mov	r20, r24
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 2e       	mov	r0, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <DIO_enu_SetPinValue+0x20a>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	0a 94       	dec	r0
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <DIO_enu_SetPinValue+0x206>
    182c:	84 2b       	or	r24, r20
    182e:	8c 93       	st	X, r24
    1830:	16 c0       	rjmp	.+44     	; 0x185e <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    1832:	a2 e3       	ldi	r26, 0x32	; 50
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	e2 e3       	ldi	r30, 0x32	; 50
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	48 2f       	mov	r20, r24
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	02 2e       	mov	r0, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <DIO_enu_SetPinValue+0x232>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	0a 94       	dec	r0
    1852:	e2 f7       	brpl	.-8      	; 0x184c <DIO_enu_SetPinValue+0x22e>
    1854:	80 95       	com	r24
    1856:	84 23       	and	r24, r20
    1858:	8c 93       	st	X, r24
    185a:	01 c0       	rjmp	.+2      	; 0x185e <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    185c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    185e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1860:	2e 96       	adiw	r28, 0x0e	; 14
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	27 97       	sbiw	r28, 0x07	; 7
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	8a 83       	std	Y+2, r24	; 0x02
    1888:	6b 83       	std	Y+3, r22	; 0x03
    188a:	5d 83       	std	Y+5, r21	; 0x05
    188c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	84 30       	cpi	r24, 0x04	; 4
    1896:	08 f0       	brcs	.+2      	; 0x189a <DIO_enu_GetPinValue+0x28>
    1898:	7a c0       	rjmp	.+244    	; 0x198e <DIO_enu_GetPinValue+0x11c>
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	88 30       	cpi	r24, 0x08	; 8
    189e:	08 f0       	brcs	.+2      	; 0x18a2 <DIO_enu_GetPinValue+0x30>
    18a0:	76 c0       	rjmp	.+236    	; 0x198e <DIO_enu_GetPinValue+0x11c>
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	9d 81       	ldd	r25, Y+5	; 0x05
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	09 f4       	brne	.+2      	; 0x18ac <DIO_enu_GetPinValue+0x3a>
    18aa:	71 c0       	rjmp	.+226    	; 0x198e <DIO_enu_GetPinValue+0x11c>
    {
        switch (Copy_u8_PortId)
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	3f 83       	std	Y+7, r19	; 0x07
    18b4:	2e 83       	std	Y+6, r18	; 0x06
    18b6:	4e 81       	ldd	r20, Y+6	; 0x06
    18b8:	5f 81       	ldd	r21, Y+7	; 0x07
    18ba:	41 30       	cpi	r20, 0x01	; 1
    18bc:	51 05       	cpc	r21, r1
    18be:	59 f1       	breq	.+86     	; 0x1916 <DIO_enu_GetPinValue+0xa4>
    18c0:	8e 81       	ldd	r24, Y+6	; 0x06
    18c2:	9f 81       	ldd	r25, Y+7	; 0x07
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	91 05       	cpc	r25, r1
    18c8:	34 f4       	brge	.+12     	; 0x18d6 <DIO_enu_GetPinValue+0x64>
    18ca:	2e 81       	ldd	r18, Y+6	; 0x06
    18cc:	3f 81       	ldd	r19, Y+7	; 0x07
    18ce:	21 15       	cp	r18, r1
    18d0:	31 05       	cpc	r19, r1
    18d2:	69 f0       	breq	.+26     	; 0x18ee <DIO_enu_GetPinValue+0x7c>
    18d4:	5d c0       	rjmp	.+186    	; 0x1990 <DIO_enu_GetPinValue+0x11e>
    18d6:	4e 81       	ldd	r20, Y+6	; 0x06
    18d8:	5f 81       	ldd	r21, Y+7	; 0x07
    18da:	42 30       	cpi	r20, 0x02	; 2
    18dc:	51 05       	cpc	r21, r1
    18de:	79 f1       	breq	.+94     	; 0x193e <DIO_enu_GetPinValue+0xcc>
    18e0:	8e 81       	ldd	r24, Y+6	; 0x06
    18e2:	9f 81       	ldd	r25, Y+7	; 0x07
    18e4:	83 30       	cpi	r24, 0x03	; 3
    18e6:	91 05       	cpc	r25, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <DIO_enu_GetPinValue+0x7a>
    18ea:	3d c0       	rjmp	.+122    	; 0x1966 <DIO_enu_GetPinValue+0xf4>
    18ec:	51 c0       	rjmp	.+162    	; 0x1990 <DIO_enu_GetPinValue+0x11e>
        {
            case DIO_U8_PORTA:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);break;
    18ee:	e9 e3       	ldi	r30, 0x39	; 57
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a9 01       	movw	r20, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <DIO_enu_GetPinValue+0x94>
    1902:	55 95       	asr	r21
    1904:	47 95       	ror	r20
    1906:	8a 95       	dec	r24
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <DIO_enu_GetPinValue+0x90>
    190a:	ca 01       	movw	r24, r20
    190c:	81 70       	andi	r24, 0x01	; 1
    190e:	ec 81       	ldd	r30, Y+4	; 0x04
    1910:	fd 81       	ldd	r31, Y+5	; 0x05
    1912:	80 83       	st	Z, r24
    1914:	3d c0       	rjmp	.+122    	; 0x1990 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTB:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);break;
    1916:	e6 e3       	ldi	r30, 0x36	; 54
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	88 2f       	mov	r24, r24
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a9 01       	movw	r20, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <DIO_enu_GetPinValue+0xbc>
    192a:	55 95       	asr	r21
    192c:	47 95       	ror	r20
    192e:	8a 95       	dec	r24
    1930:	e2 f7       	brpl	.-8      	; 0x192a <DIO_enu_GetPinValue+0xb8>
    1932:	ca 01       	movw	r24, r20
    1934:	81 70       	andi	r24, 0x01	; 1
    1936:	ec 81       	ldd	r30, Y+4	; 0x04
    1938:	fd 81       	ldd	r31, Y+5	; 0x05
    193a:	80 83       	st	Z, r24
    193c:	29 c0       	rjmp	.+82     	; 0x1990 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTC:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);break;
    193e:	e3 e3       	ldi	r30, 0x33	; 51
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a9 01       	movw	r20, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <DIO_enu_GetPinValue+0xe4>
    1952:	55 95       	asr	r21
    1954:	47 95       	ror	r20
    1956:	8a 95       	dec	r24
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <DIO_enu_GetPinValue+0xe0>
    195a:	ca 01       	movw	r24, r20
    195c:	81 70       	andi	r24, 0x01	; 1
    195e:	ec 81       	ldd	r30, Y+4	; 0x04
    1960:	fd 81       	ldd	r31, Y+5	; 0x05
    1962:	80 83       	st	Z, r24
    1964:	15 c0       	rjmp	.+42     	; 0x1990 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTD:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);break;
    1966:	e0 e3       	ldi	r30, 0x30	; 48
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a9 01       	movw	r20, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <DIO_enu_GetPinValue+0x10c>
    197a:	55 95       	asr	r21
    197c:	47 95       	ror	r20
    197e:	8a 95       	dec	r24
    1980:	e2 f7       	brpl	.-8      	; 0x197a <DIO_enu_GetPinValue+0x108>
    1982:	ca 01       	movw	r24, r20
    1984:	81 70       	andi	r24, 0x01	; 1
    1986:	ec 81       	ldd	r30, Y+4	; 0x04
    1988:	fd 81       	ldd	r31, Y+5	; 0x05
    198a:	80 83       	st	Z, r24
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <DIO_enu_GetPinValue+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    198e:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    1990:	89 81       	ldd	r24, Y+1	; 0x01
}
    1992:	27 96       	adiw	r28, 0x07	; 7
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	de bf       	out	0x3e, r29	; 62
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	cd bf       	out	0x3d, r28	; 61
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	2d 97       	sbiw	r28, 0x0d	; 13
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	8a 83       	std	Y+2, r24	; 0x02
    19ba:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	84 30       	cpi	r24, 0x04	; 4
    19c4:	08 f0       	brcs	.+2      	; 0x19c8 <DIO_enu_SetPortDirection+0x24>
    19c6:	84 c0       	rjmp	.+264    	; 0x1ad0 <DIO_enu_SetPortDirection+0x12c>
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	81 30       	cpi	r24, 0x01	; 1
    19cc:	21 f0       	breq	.+8      	; 0x19d6 <DIO_enu_SetPortDirection+0x32>
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	88 23       	and	r24, r24
    19d2:	09 f0       	breq	.+2      	; 0x19d6 <DIO_enu_SetPortDirection+0x32>
    19d4:	7d c0       	rjmp	.+250    	; 0x1ad0 <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	3d 87       	std	Y+13, r19	; 0x0d
    19de:	2c 87       	std	Y+12, r18	; 0x0c
    19e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    19e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	91 05       	cpc	r25, r1
    19e8:	71 f1       	breq	.+92     	; 0x1a46 <DIO_enu_SetPortDirection+0xa2>
    19ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    19ec:	3d 85       	ldd	r19, Y+13	; 0x0d
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	2c f4       	brge	.+10     	; 0x19fe <DIO_enu_SetPortDirection+0x5a>
    19f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    19f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	69 f0       	breq	.+26     	; 0x1a16 <DIO_enu_SetPortDirection+0x72>
    19fc:	6a c0       	rjmp	.+212    	; 0x1ad2 <DIO_enu_SetPortDirection+0x12e>
    19fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a00:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a02:	22 30       	cpi	r18, 0x02	; 2
    1a04:	31 05       	cpc	r19, r1
    1a06:	b1 f1       	breq	.+108    	; 0x1a74 <DIO_enu_SetPortDirection+0xd0>
    1a08:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a0a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a0c:	83 30       	cpi	r24, 0x03	; 3
    1a0e:	91 05       	cpc	r25, r1
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <DIO_enu_SetPortDirection+0x70>
    1a12:	47 c0       	rjmp	.+142    	; 0x1aa2 <DIO_enu_SetPortDirection+0xfe>
    1a14:	5e c0       	rjmp	.+188    	; 0x1ad2 <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	3b 87       	std	Y+11, r19	; 0x0b
    1a1e:	2a 87       	std	Y+10, r18	; 0x0a
    1a20:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a22:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	59 f0       	breq	.+22     	; 0x1a3e <DIO_enu_SetPortDirection+0x9a>
    1a28:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a2a:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a2c:	21 30       	cpi	r18, 0x01	; 1
    1a2e:	31 05       	cpc	r19, r1
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <DIO_enu_SetPortDirection+0x90>
    1a32:	4f c0       	rjmp	.+158    	; 0x1ad2 <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    1a34:	ea e3       	ldi	r30, 0x3A	; 58
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	8f ef       	ldi	r24, 0xFF	; 255
    1a3a:	80 83       	st	Z, r24
    1a3c:	4a c0       	rjmp	.+148    	; 0x1ad2 <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    1a3e:	ea e3       	ldi	r30, 0x3A	; 58
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	10 82       	st	Z, r1
    1a44:	46 c0       	rjmp	.+140    	; 0x1ad2 <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	39 87       	std	Y+9, r19	; 0x09
    1a4e:	28 87       	std	Y+8, r18	; 0x08
    1a50:	88 85       	ldd	r24, Y+8	; 0x08
    1a52:	99 85       	ldd	r25, Y+9	; 0x09
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	51 f0       	breq	.+20     	; 0x1a6c <DIO_enu_SetPortDirection+0xc8>
    1a58:	28 85       	ldd	r18, Y+8	; 0x08
    1a5a:	39 85       	ldd	r19, Y+9	; 0x09
    1a5c:	21 30       	cpi	r18, 0x01	; 1
    1a5e:	31 05       	cpc	r19, r1
    1a60:	c1 f5       	brne	.+112    	; 0x1ad2 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    1a62:	e7 e3       	ldi	r30, 0x37	; 55
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	8f ef       	ldi	r24, 0xFF	; 255
    1a68:	80 83       	st	Z, r24
    1a6a:	33 c0       	rjmp	.+102    	; 0x1ad2 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    1a6c:	e7 e3       	ldi	r30, 0x37	; 55
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	10 82       	st	Z, r1
    1a72:	2f c0       	rjmp	.+94     	; 0x1ad2 <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	3f 83       	std	Y+7, r19	; 0x07
    1a7c:	2e 83       	std	Y+6, r18	; 0x06
    1a7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a80:	9f 81       	ldd	r25, Y+7	; 0x07
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	51 f0       	breq	.+20     	; 0x1a9a <DIO_enu_SetPortDirection+0xf6>
    1a86:	2e 81       	ldd	r18, Y+6	; 0x06
    1a88:	3f 81       	ldd	r19, Y+7	; 0x07
    1a8a:	21 30       	cpi	r18, 0x01	; 1
    1a8c:	31 05       	cpc	r19, r1
    1a8e:	09 f5       	brne	.+66     	; 0x1ad2 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    1a90:	e4 e3       	ldi	r30, 0x34	; 52
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	8f ef       	ldi	r24, 0xFF	; 255
    1a96:	80 83       	st	Z, r24
    1a98:	1c c0       	rjmp	.+56     	; 0x1ad2 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    1a9a:	e4 e3       	ldi	r30, 0x34	; 52
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	10 82       	st	Z, r1
    1aa0:	18 c0       	rjmp	.+48     	; 0x1ad2 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	3d 83       	std	Y+5, r19	; 0x05
    1aaa:	2c 83       	std	Y+4, r18	; 0x04
    1aac:	8c 81       	ldd	r24, Y+4	; 0x04
    1aae:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	51 f0       	breq	.+20     	; 0x1ac8 <DIO_enu_SetPortDirection+0x124>
    1ab4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab8:	21 30       	cpi	r18, 0x01	; 1
    1aba:	31 05       	cpc	r19, r1
    1abc:	51 f4       	brne	.+20     	; 0x1ad2 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    1abe:	e1 e3       	ldi	r30, 0x31	; 49
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	8f ef       	ldi	r24, 0xFF	; 255
    1ac4:	80 83       	st	Z, r24
    1ac6:	05 c0       	rjmp	.+10     	; 0x1ad2 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    1ac8:	e1 e3       	ldi	r30, 0x31	; 49
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	10 82       	st	Z, r1
    1ace:	01 c0       	rjmp	.+2      	; 0x1ad2 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    1ad0:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad4:	2d 96       	adiw	r28, 0x0d	; 13
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <DIO_enu_SetPortValue+0x6>
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <DIO_enu_SetPortValue+0x8>
    1aee:	0f 92       	push	r0
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	8a 83       	std	Y+2, r24	; 0x02
    1af6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	84 30       	cpi	r24, 0x04	; 4
    1b00:	98 f5       	brcc	.+102    	; 0x1b68 <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	3d 83       	std	Y+5, r19	; 0x05
    1b0a:	2c 83       	std	Y+4, r18	; 0x04
    1b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	91 05       	cpc	r25, r1
    1b14:	d1 f0       	breq	.+52     	; 0x1b4a <DIO_enu_SetPortValue+0x64>
    1b16:	2c 81       	ldd	r18, Y+4	; 0x04
    1b18:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1a:	22 30       	cpi	r18, 0x02	; 2
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	2c f4       	brge	.+10     	; 0x1b2a <DIO_enu_SetPortValue+0x44>
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	9d 81       	ldd	r25, Y+5	; 0x05
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	61 f0       	breq	.+24     	; 0x1b40 <DIO_enu_SetPortValue+0x5a>
    1b28:	20 c0       	rjmp	.+64     	; 0x1b6a <DIO_enu_SetPortValue+0x84>
    1b2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b2e:	22 30       	cpi	r18, 0x02	; 2
    1b30:	31 05       	cpc	r19, r1
    1b32:	81 f0       	breq	.+32     	; 0x1b54 <DIO_enu_SetPortValue+0x6e>
    1b34:	8c 81       	ldd	r24, Y+4	; 0x04
    1b36:	9d 81       	ldd	r25, Y+5	; 0x05
    1b38:	83 30       	cpi	r24, 0x03	; 3
    1b3a:	91 05       	cpc	r25, r1
    1b3c:	81 f0       	breq	.+32     	; 0x1b5e <DIO_enu_SetPortValue+0x78>
    1b3e:	15 c0       	rjmp	.+42     	; 0x1b6a <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    1b40:	eb e3       	ldi	r30, 0x3B	; 59
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	80 83       	st	Z, r24
    1b48:	10 c0       	rjmp	.+32     	; 0x1b6a <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    1b4a:	e8 e3       	ldi	r30, 0x38	; 56
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	80 83       	st	Z, r24
    1b52:	0b c0       	rjmp	.+22     	; 0x1b6a <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    1b54:	e5 e3       	ldi	r30, 0x35	; 53
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	80 83       	st	Z, r24
    1b5c:	06 c0       	rjmp	.+12     	; 0x1b6a <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    1b5e:	e2 e3       	ldi	r30, 0x32	; 50
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	80 83       	st	Z, r24
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    1b68:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <DIO_enu_GetPortValue+0x6>
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <DIO_enu_GetPortValue+0x8>
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <DIO_enu_GetPortValue+0xa>
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	8a 83       	std	Y+2, r24	; 0x02
    1b8c:	7c 83       	std	Y+4, r23	; 0x04
    1b8e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	84 30       	cpi	r24, 0x04	; 4
    1b98:	08 f0       	brcs	.+2      	; 0x1b9c <DIO_enu_GetPortValue+0x20>
    1b9a:	3f c0       	rjmp	.+126    	; 0x1c1a <DIO_enu_GetPortValue+0x9e>
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	d9 f1       	breq	.+118    	; 0x1c1a <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    1ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	3e 83       	std	Y+6, r19	; 0x06
    1bac:	2d 83       	std	Y+5, r18	; 0x05
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	e1 f0       	breq	.+56     	; 0x1bf0 <DIO_enu_GetPortValue+0x74>
    1bb8:	2d 81       	ldd	r18, Y+5	; 0x05
    1bba:	3e 81       	ldd	r19, Y+6	; 0x06
    1bbc:	22 30       	cpi	r18, 0x02	; 2
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	2c f4       	brge	.+10     	; 0x1bcc <DIO_enu_GetPortValue+0x50>
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	61 f0       	breq	.+24     	; 0x1be2 <DIO_enu_GetPortValue+0x66>
    1bca:	28 c0       	rjmp	.+80     	; 0x1c1c <DIO_enu_GetPortValue+0xa0>
    1bcc:	2d 81       	ldd	r18, Y+5	; 0x05
    1bce:	3e 81       	ldd	r19, Y+6	; 0x06
    1bd0:	22 30       	cpi	r18, 0x02	; 2
    1bd2:	31 05       	cpc	r19, r1
    1bd4:	a1 f0       	breq	.+40     	; 0x1bfe <DIO_enu_GetPortValue+0x82>
    1bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bda:	83 30       	cpi	r24, 0x03	; 3
    1bdc:	91 05       	cpc	r25, r1
    1bde:	b1 f0       	breq	.+44     	; 0x1c0c <DIO_enu_GetPortValue+0x90>
    1be0:	1d c0       	rjmp	.+58     	; 0x1c1c <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    1be2:	e9 e3       	ldi	r30, 0x39	; 57
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bea:	fc 81       	ldd	r31, Y+4	; 0x04
    1bec:	80 83       	st	Z, r24
    1bee:	16 c0       	rjmp	.+44     	; 0x1c1c <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    1bf0:	e6 e3       	ldi	r30, 0x36	; 54
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	eb 81       	ldd	r30, Y+3	; 0x03
    1bf8:	fc 81       	ldd	r31, Y+4	; 0x04
    1bfa:	80 83       	st	Z, r24
    1bfc:	0f c0       	rjmp	.+30     	; 0x1c1c <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    1bfe:	e3 e3       	ldi	r30, 0x33	; 51
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	eb 81       	ldd	r30, Y+3	; 0x03
    1c06:	fc 81       	ldd	r31, Y+4	; 0x04
    1c08:	80 83       	st	Z, r24
    1c0a:	08 c0       	rjmp	.+16     	; 0x1c1c <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    1c0c:	e0 e3       	ldi	r30, 0x30	; 48
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	eb 81       	ldd	r30, Y+3	; 0x03
    1c14:	fc 81       	ldd	r31, Y+4	; 0x04
    1c16:	80 83       	st	Z, r24
    1c18:	01 c0       	rjmp	.+2      	; 0x1c1c <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    1c1a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c1e:	26 96       	adiw	r28, 0x06	; 6
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	f8 94       	cli
    1c24:	de bf       	out	0x3e, r29	; 62
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	cd bf       	out	0x3d, r28	; 61
    1c2a:	cf 91       	pop	r28
    1c2c:	df 91       	pop	r29
    1c2e:	08 95       	ret

00001c30 <DIO_enu_ToggPin>:
ES_t DIO_enu_ToggPin(u8 Copy_u8_PortId, u8 Copy_u8_PinId){
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <DIO_enu_ToggPin+0x6>
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <DIO_enu_ToggPin+0x8>
    1c38:	0f 92       	push	r0
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	8a 83       	std	Y+2, r24	; 0x02
    1c40:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <=DIO_U8_PORTD)&&(Copy_u8_PinId <= DIO_U8_PIN7)){
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	84 30       	cpi	r24, 0x04	; 4
    1c4a:	08 f0       	brcs	.+2      	; 0x1c4e <DIO_enu_ToggPin+0x1e>
    1c4c:	73 c0       	rjmp	.+230    	; 0x1d34 <DIO_enu_ToggPin+0x104>
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	88 30       	cpi	r24, 0x08	; 8
    1c52:	08 f0       	brcs	.+2      	; 0x1c56 <DIO_enu_ToggPin+0x26>
    1c54:	6f c0       	rjmp	.+222    	; 0x1d34 <DIO_enu_ToggPin+0x104>
        switch (Copy_u8_PortId)
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	3d 83       	std	Y+5, r19	; 0x05
    1c5e:	2c 83       	std	Y+4, r18	; 0x04
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	9d 81       	ldd	r25, Y+5	; 0x05
    1c64:	81 30       	cpi	r24, 0x01	; 1
    1c66:	91 05       	cpc	r25, r1
    1c68:	49 f1       	breq	.+82     	; 0x1cbc <DIO_enu_ToggPin+0x8c>
    1c6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c6e:	22 30       	cpi	r18, 0x02	; 2
    1c70:	31 05       	cpc	r19, r1
    1c72:	2c f4       	brge	.+10     	; 0x1c7e <DIO_enu_ToggPin+0x4e>
    1c74:	8c 81       	ldd	r24, Y+4	; 0x04
    1c76:	9d 81       	ldd	r25, Y+5	; 0x05
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	61 f0       	breq	.+24     	; 0x1c94 <DIO_enu_ToggPin+0x64>
    1c7c:	5c c0       	rjmp	.+184    	; 0x1d36 <DIO_enu_ToggPin+0x106>
    1c7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c80:	3d 81       	ldd	r19, Y+5	; 0x05
    1c82:	22 30       	cpi	r18, 0x02	; 2
    1c84:	31 05       	cpc	r19, r1
    1c86:	71 f1       	breq	.+92     	; 0x1ce4 <DIO_enu_ToggPin+0xb4>
    1c88:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8c:	83 30       	cpi	r24, 0x03	; 3
    1c8e:	91 05       	cpc	r25, r1
    1c90:	e9 f1       	breq	.+122    	; 0x1d0c <DIO_enu_ToggPin+0xdc>
    1c92:	51 c0       	rjmp	.+162    	; 0x1d36 <DIO_enu_ToggPin+0x106>
	        {
	        case DIO_U8_PORTA:TOG_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    1c94:	ab e3       	ldi	r26, 0x3B	; 59
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	eb e3       	ldi	r30, 0x3B	; 59
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 2e       	mov	r0, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <DIO_enu_ToggPin+0x82>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	0a 94       	dec	r0
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <DIO_enu_ToggPin+0x7e>
    1cb6:	84 27       	eor	r24, r20
    1cb8:	8c 93       	st	X, r24
    1cba:	3d c0       	rjmp	.+122    	; 0x1d36 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTB:TOG_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    1cbc:	a8 e3       	ldi	r26, 0x38	; 56
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e8 e3       	ldi	r30, 0x38	; 56
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <DIO_enu_ToggPin+0xaa>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <DIO_enu_ToggPin+0xa6>
    1cde:	84 27       	eor	r24, r20
    1ce0:	8c 93       	st	X, r24
    1ce2:	29 c0       	rjmp	.+82     	; 0x1d36 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTC:TOG_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    1ce4:	a5 e3       	ldi	r26, 0x35	; 53
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e5 e3       	ldi	r30, 0x35	; 53
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	48 2f       	mov	r20, r24
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	02 2e       	mov	r0, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <DIO_enu_ToggPin+0xd2>
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	0a 94       	dec	r0
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <DIO_enu_ToggPin+0xce>
    1d06:	84 27       	eor	r24, r20
    1d08:	8c 93       	st	X, r24
    1d0a:	15 c0       	rjmp	.+42     	; 0x1d36 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTD:TOG_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    1d0c:	a2 e3       	ldi	r26, 0x32	; 50
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e2 e3       	ldi	r30, 0x32	; 50
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	48 2f       	mov	r20, r24
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 2e       	mov	r0, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <DIO_enu_ToggPin+0xfa>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	0a 94       	dec	r0
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <DIO_enu_ToggPin+0xf6>
    1d2e:	84 27       	eor	r24, r20
    1d30:	8c 93       	st	X, r24
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <DIO_enu_ToggPin+0x106>
	        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    1d34:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    1d36:	89 81       	ldd	r24, Y+1	; 0x01


}
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	0f 90       	pop	r0
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <ADC_voidInit>:
#include"ADC_config.h"
#include"ADC_interface.h"
#include"ADC_privet.h"
#include "../REG.h"

void ADC_voidInit(void){
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
#if ADC_Enable_Status==ADC_ENABLE
    #if ADC_Vref==ADC_AREF_INTERNAL_Vref_TURNED_OFF
	    CLR_BIT(ADMUX,7); CLR_BIT(ADMUX,6);
    #elif ADC_Vref==ADC_AVCC
	    CLR_BIT(ADMUX,7); SET_BIT(ADMUX,6);
    1d50:	a7 e2       	ldi	r26, 0x27	; 39
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e7 e2       	ldi	r30, 0x27	; 39
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	8f 77       	andi	r24, 0x7F	; 127
    1d5c:	8c 93       	st	X, r24
    1d5e:	a7 e2       	ldi	r26, 0x27	; 39
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e7 e2       	ldi	r30, 0x27	; 39
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	80 64       	ori	r24, 0x40	; 64
    1d6a:	8c 93       	st	X, r24
    #endif

    #if ADC_Adjustment==ADC_LEFT_ADJUSTMENT
       SET_BIT(ADMUX,5);
    #elif ADC_Adjustment==ADC_RIGHT_ADJUSTMENT
       CLR_BIT(ADMUX,5);
    1d6c:	a7 e2       	ldi	r26, 0x27	; 39
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	e7 e2       	ldi	r30, 0x27	; 39
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	8f 7d       	andi	r24, 0xDF	; 223
    1d78:	8c 93       	st	X, r24
    #endif

    #if ADC_Channal>=ADC_CHANNAL_0&&ADC_Channal<=ADC_CHANNAL_7
      ADMUX|=ADC_Channal;
    1d7a:	a7 e2       	ldi	r26, 0x27	; 39
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e7 e2       	ldi	r30, 0x27	; 39
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	8c 93       	st	X, r24


    #if ADC_Trigger==ADC_SINGLE_CONVERSION
      CLR_BIT(ADCSRA,5);
    #elif ADC_Trigger==ADC_FREE_RUNNING_MODE
      SET_BIT(ADCSRA,5);
    1d86:	a6 e2       	ldi	r26, 0x26	; 38
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e6 e2       	ldi	r30, 0x26	; 38
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	80 62       	ori	r24, 0x20	; 32
    1d92:	8c 93       	st	X, r24
      CLR_BIT(SFIOR,7); CLR_BIT(SFIOR,6); CLR_BIT(SFIOR,5);
    1d94:	a0 e5       	ldi	r26, 0x50	; 80
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e0 e5       	ldi	r30, 0x50	; 80
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	8f 77       	andi	r24, 0x7F	; 127
    1da0:	8c 93       	st	X, r24
    1da2:	a0 e5       	ldi	r26, 0x50	; 80
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e0 e5       	ldi	r30, 0x50	; 80
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	8f 7b       	andi	r24, 0xBF	; 191
    1dae:	8c 93       	st	X, r24
    1db0:	a0 e5       	ldi	r26, 0x50	; 80
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e0 e5       	ldi	r30, 0x50	; 80
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	8f 7d       	andi	r24, 0xDF	; 223
    1dbc:	8c 93       	st	X, r24


    #if ADC_Inturrupt_Mode==ADC_INTERRUPT_ENABLE
      SET_BIT(ADCSRA,3);
    #elif ADC_Inturrupt_Mode==ADC_INTERRUPT_DISABLE
      CLR_BIT(ADCSRA,3);
    1dbe:	a6 e2       	ldi	r26, 0x26	; 38
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e6 e2       	ldi	r30, 0x26	; 38
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	87 7f       	andi	r24, 0xF7	; 247
    1dca:	8c 93       	st	X, r24
    #endif

    #if ADC_Prescallur>=ADC_PRESCALLER_2 && ADC_Prescallur<=ADC_PRESCALLER_128
        ADCSRA |= ADC_Prescallur;
    1dcc:	a6 e2       	ldi	r26, 0x26	; 38
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	e6 e2       	ldi	r30, 0x26	; 38
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	87 60       	ori	r24, 0x07	; 7
    1dd8:	8c 93       	st	X, r24
    #else
          #warning"wrong prescaler"

    #endif

   SET_BIT(ADCSRA,7);
    1dda:	a6 e2       	ldi	r26, 0x26	; 38
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e6 e2       	ldi	r30, 0x26	; 38
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	80 68       	ori	r24, 0x80	; 128
    1de6:	8c 93       	st	X, r24
#endif
	}
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <ADC_u16GetResult>:
u16  ADC_u16GetResult(void){
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <ADC_u16GetResult+0x6>
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
	u16 LOC_Result=0;
    1df8:	1a 82       	std	Y+2, r1	; 0x02
    1dfa:	19 82       	std	Y+1, r1	; 0x01
	//SINGL CONVERTION-->Start Conversion
	SET_BIT(ADCSRA,6);
    1dfc:	a6 e2       	ldi	r26, 0x26	; 38
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e6 e2       	ldi	r30, 0x26	; 38
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	80 64       	ori	r24, 0x40	; 64
    1e08:	8c 93       	st	X, r24
	//Read Flag
	while(GET_BIT(ADCSRA,4)==0);
    1e0a:	e6 e2       	ldi	r30, 0x26	; 38
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	82 95       	swap	r24
    1e12:	8f 70       	andi	r24, 0x0F	; 15
    1e14:	88 2f       	mov	r24, r24
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	81 70       	andi	r24, 0x01	; 1
    1e1a:	90 70       	andi	r25, 0x00	; 0
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	a9 f3       	breq	.-22     	; 0x1e0a <ADC_u16GetResult+0x1c>
	//Read Counter
    #if ADC_Adjustment==ADC_LEFT_ADJUSTMENT
	    LOC_Result=ADCH;
    #elif ADC_Adjustment==ADC_RIGHT_ADJUSTMENT
	    LOC_Result=ADCL|(ADCH<<8);
    1e20:	e4 e2       	ldi	r30, 0x24	; 36
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	e5 e2       	ldi	r30, 0x25	; 37
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	88 2f       	mov	r24, r24
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	98 2f       	mov	r25, r24
    1e36:	88 27       	eor	r24, r24
    1e38:	82 2b       	or	r24, r18
    1e3a:	93 2b       	or	r25, r19
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    #endif
	//Clear Flag
	SET_BIT(ADCSRA,4);
    1e40:	a6 e2       	ldi	r26, 0x26	; 38
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e6 e2       	ldi	r30, 0x26	; 38
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	80 61       	ori	r24, 0x10	; 16
    1e4c:	8c 93       	st	X, r24
	//Return Value
	return LOC_Result;
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	9a 81       	ldd	r25, Y+2	; 0x02

}
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <ADC_u16GetChannalResult>:
u16  ADC_u16GetChannalResult(u8 Copy_u8Channal){
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <ADC_u16GetChannalResult+0x6>
    1e62:	0f 92       	push	r0
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	8b 83       	std	Y+3, r24	; 0x03
	u16 LOC_Result=0;
    1e6a:	1a 82       	std	Y+2, r1	; 0x02
    1e6c:	19 82       	std	Y+1, r1	; 0x01
	//Copy_u8Channal &=0b00000111;
	//Clear Mux
	ADMUX &=0b11100000;
    1e6e:	a7 e2       	ldi	r26, 0x27	; 39
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e7 e2       	ldi	r30, 0x27	; 39
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	80 7e       	andi	r24, 0xE0	; 224
    1e7a:	8c 93       	st	X, r24
	//Select MUX
	ADMUX|=Copy_u8Channal;
    1e7c:	a7 e2       	ldi	r26, 0x27	; 39
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e7 e2       	ldi	r30, 0x27	; 39
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	90 81       	ld	r25, Z
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	89 2b       	or	r24, r25
    1e8a:	8c 93       	st	X, r24
	//SINGL CONVERTION-->Start Conversion
	SET_BIT(ADCSRA,6);
    1e8c:	a6 e2       	ldi	r26, 0x26	; 38
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e6 e2       	ldi	r30, 0x26	; 38
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	80 64       	ori	r24, 0x40	; 64
    1e98:	8c 93       	st	X, r24
	//Read Flag
	while(GET_BIT(ADCSRA,4)==0);
    1e9a:	e6 e2       	ldi	r30, 0x26	; 38
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	82 95       	swap	r24
    1ea2:	8f 70       	andi	r24, 0x0F	; 15
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	81 70       	andi	r24, 0x01	; 1
    1eaa:	90 70       	andi	r25, 0x00	; 0
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	a9 f3       	breq	.-22     	; 0x1e9a <ADC_u16GetChannalResult+0x3e>
	//Read Counter
	    #if ADC_Adjustment==ADC_LEFT_ADJUSTMENT
		    LOC_Result=ADCH;
	    #elif ADC_Adjustment==ADC_RIGHT_ADJUSTMENT
		    LOC_Result=ADCL|(ADCH<<8);
    1eb0:	e4 e2       	ldi	r30, 0x24	; 36
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	e5 e2       	ldi	r30, 0x25	; 37
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	88 2f       	mov	r24, r24
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	98 2f       	mov	r25, r24
    1ec6:	88 27       	eor	r24, r24
    1ec8:	82 2b       	or	r24, r18
    1eca:	93 2b       	or	r25, r19
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	89 83       	std	Y+1, r24	; 0x01
	    #endif
	//Clear Flag
	SET_BIT(ADCSRA,4);
    1ed0:	a6 e2       	ldi	r26, 0x26	; 38
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e6 e2       	ldi	r30, 0x26	; 38
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	80 61       	ori	r24, 0x10	; 16
    1edc:	8c 93       	st	X, r24
	//Return Value
		return LOC_Result;
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <ADC_Enable>:
void ADC_Enable(void){
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA,7);
    1ef6:	a6 e2       	ldi	r26, 0x26	; 38
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e6 e2       	ldi	r30, 0x26	; 38
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	80 68       	ori	r24, 0x80	; 128
    1f02:	8c 93       	st	X, r24
}
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <ADC_Disable>:
void ADC_Disable(void){
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA,7);
    1f12:	a6 e2       	ldi	r26, 0x26	; 38
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e6 e2       	ldi	r30, 0x26	; 38
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	8f 77       	andi	r24, 0x7F	; 127
    1f1e:	8c 93       	st	X, r24
}
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <LCD_8_bit_init>:
 */

#include "LCD.h"

void LCD_8_bit_init (void) 		/* LCD 8-bit Mode Initialize function */
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	6c 97       	sbiw	r28, 0x1c	; 28
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61

	LCD_CMD_PORT_DIR = 0xFF;		/* Make LCD command port direction as o/p */
    1f3a:	e1 e3       	ldi	r30, 0x31	; 49
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	8f ef       	ldi	r24, 0xFF	; 255
    1f40:	80 83       	st	Z, r24
	LCD_DATA_PORT_DIR = 0xFF;		/* Make LCD data port direction as o/p */
    1f42:	e7 e3       	ldi	r30, 0x37	; 55
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	8f ef       	ldi	r24, 0xFF	; 255
    1f48:	80 83       	st	Z, r24
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	a0 ea       	ldi	r26, 0xA0	; 160
    1f50:	b1 e4       	ldi	r27, 0x41	; 65
    1f52:	89 8f       	std	Y+25, r24	; 0x19
    1f54:	9a 8f       	std	Y+26, r25	; 0x1a
    1f56:	ab 8f       	std	Y+27, r26	; 0x1b
    1f58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	4a ef       	ldi	r20, 0xFA	; 250
    1f68:	54 e4       	ldi	r21, 0x44	; 68
    1f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	8d 8b       	std	Y+21, r24	; 0x15
    1f74:	9e 8b       	std	Y+22, r25	; 0x16
    1f76:	af 8b       	std	Y+23, r26	; 0x17
    1f78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f80:	98 8d       	ldd	r25, Y+24	; 0x18
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e8       	ldi	r20, 0x80	; 128
    1f88:	5f e3       	ldi	r21, 0x3F	; 63
    1f8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f8e:	88 23       	and	r24, r24
    1f90:	2c f4       	brge	.+10     	; 0x1f9c <LCD_8_bit_init+0x76>
		__ticks = 1;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	9c 8b       	std	Y+20, r25	; 0x14
    1f98:	8b 8b       	std	Y+19, r24	; 0x13
    1f9a:	3f c0       	rjmp	.+126    	; 0x201a <LCD_8_bit_init+0xf4>
	else if (__tmp > 65535)
    1f9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	3f ef       	ldi	r19, 0xFF	; 255
    1fa8:	4f e7       	ldi	r20, 0x7F	; 127
    1faa:	57 e4       	ldi	r21, 0x47	; 71
    1fac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb0:	18 16       	cp	r1, r24
    1fb2:	4c f5       	brge	.+82     	; 0x2006 <LCD_8_bit_init+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e2       	ldi	r20, 0x20	; 32
    1fc2:	51 e4       	ldi	r21, 0x41	; 65
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	9c 8b       	std	Y+20, r25	; 0x14
    1fda:	8b 8b       	std	Y+19, r24	; 0x13
    1fdc:	0f c0       	rjmp	.+30     	; 0x1ffc <LCD_8_bit_init+0xd6>
    1fde:	88 ec       	ldi	r24, 0xC8	; 200
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9a 8b       	std	Y+18, r25	; 0x12
    1fe4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fe6:	89 89       	ldd	r24, Y+17	; 0x11
    1fe8:	9a 89       	ldd	r25, Y+18	; 0x12
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <LCD_8_bit_init+0xc4>
    1fee:	9a 8b       	std	Y+18, r25	; 0x12
    1ff0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	9c 8b       	std	Y+20, r25	; 0x14
    1ffa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ffe:	9c 89       	ldd	r25, Y+20	; 0x14
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	69 f7       	brne	.-38     	; 0x1fde <LCD_8_bit_init+0xb8>
    2004:	14 c0       	rjmp	.+40     	; 0x202e <LCD_8_bit_init+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2006:	6d 89       	ldd	r22, Y+21	; 0x15
    2008:	7e 89       	ldd	r23, Y+22	; 0x16
    200a:	8f 89       	ldd	r24, Y+23	; 0x17
    200c:	98 8d       	ldd	r25, Y+24	; 0x18
    200e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	9c 8b       	std	Y+20, r25	; 0x14
    2018:	8b 8b       	std	Y+19, r24	; 0x13
    201a:	8b 89       	ldd	r24, Y+19	; 0x13
    201c:	9c 89       	ldd	r25, Y+20	; 0x14
    201e:	98 8b       	std	Y+16, r25	; 0x10
    2020:	8f 87       	std	Y+15, r24	; 0x0f
    2022:	8f 85       	ldd	r24, Y+15	; 0x0f
    2024:	98 89       	ldd	r25, Y+16	; 0x10
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <LCD_8_bit_init+0x100>
    202a:	98 8b       	std	Y+16, r25	; 0x10
    202c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(20);					/* LCD Power ON delay always >15ms */

	LCD_8_bit_sendCMD(0x38);		/* Initialization of 16X2 LCD in 8bit mode */
    202e:	88 e3       	ldi	r24, 0x38	; 56
    2030:	0e 94 a1 10 	call	0x2142	; 0x2142 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0x0C);		/* Display ON Cursor OFF */
    2034:	8c e0       	ldi	r24, 0x0C	; 12
    2036:	0e 94 a1 10 	call	0x2142	; 0x2142 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0x06);		/* Auto Increment cursor */
    203a:	86 e0       	ldi	r24, 0x06	; 6
    203c:	0e 94 a1 10 	call	0x2142	; 0x2142 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0x01);		/* clear display */
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	0e 94 a1 10 	call	0x2142	; 0x2142 <LCD_8_bit_sendCMD>
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	a0 e0       	ldi	r26, 0x00	; 0
    204c:	b0 e4       	ldi	r27, 0x40	; 64
    204e:	8b 87       	std	Y+11, r24	; 0x0b
    2050:	9c 87       	std	Y+12, r25	; 0x0c
    2052:	ad 87       	std	Y+13, r26	; 0x0d
    2054:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2056:	6b 85       	ldd	r22, Y+11	; 0x0b
    2058:	7c 85       	ldd	r23, Y+12	; 0x0c
    205a:	8d 85       	ldd	r24, Y+13	; 0x0d
    205c:	9e 85       	ldd	r25, Y+14	; 0x0e
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	4a ef       	ldi	r20, 0xFA	; 250
    2064:	54 e4       	ldi	r21, 0x44	; 68
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	8f 83       	std	Y+7, r24	; 0x07
    2070:	98 87       	std	Y+8, r25	; 0x08
    2072:	a9 87       	std	Y+9, r26	; 0x09
    2074:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2076:	6f 81       	ldd	r22, Y+7	; 0x07
    2078:	78 85       	ldd	r23, Y+8	; 0x08
    207a:	89 85       	ldd	r24, Y+9	; 0x09
    207c:	9a 85       	ldd	r25, Y+10	; 0x0a
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208a:	88 23       	and	r24, r24
    208c:	2c f4       	brge	.+10     	; 0x2098 <LCD_8_bit_init+0x172>
		__ticks = 1;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9e 83       	std	Y+6, r25	; 0x06
    2094:	8d 83       	std	Y+5, r24	; 0x05
    2096:	3f c0       	rjmp	.+126    	; 0x2116 <LCD_8_bit_init+0x1f0>
	else if (__tmp > 65535)
    2098:	6f 81       	ldd	r22, Y+7	; 0x07
    209a:	78 85       	ldd	r23, Y+8	; 0x08
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	3f ef       	ldi	r19, 0xFF	; 255
    20a4:	4f e7       	ldi	r20, 0x7F	; 127
    20a6:	57 e4       	ldi	r21, 0x47	; 71
    20a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ac:	18 16       	cp	r1, r24
    20ae:	4c f5       	brge	.+82     	; 0x2102 <LCD_8_bit_init+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e2       	ldi	r20, 0x20	; 32
    20be:	51 e4       	ldi	r21, 0x41	; 65
    20c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	9e 83       	std	Y+6, r25	; 0x06
    20d6:	8d 83       	std	Y+5, r24	; 0x05
    20d8:	0f c0       	rjmp	.+30     	; 0x20f8 <LCD_8_bit_init+0x1d2>
    20da:	88 ec       	ldi	r24, 0xC8	; 200
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9c 83       	std	Y+4, r25	; 0x04
    20e0:	8b 83       	std	Y+3, r24	; 0x03
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	9c 81       	ldd	r25, Y+4	; 0x04
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <LCD_8_bit_init+0x1c0>
    20ea:	9c 83       	std	Y+4, r25	; 0x04
    20ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ee:	8d 81       	ldd	r24, Y+5	; 0x05
    20f0:	9e 81       	ldd	r25, Y+6	; 0x06
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	9e 83       	std	Y+6, r25	; 0x06
    20f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f8:	8d 81       	ldd	r24, Y+5	; 0x05
    20fa:	9e 81       	ldd	r25, Y+6	; 0x06
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	69 f7       	brne	.-38     	; 0x20da <LCD_8_bit_init+0x1b4>
    2100:	14 c0       	rjmp	.+40     	; 0x212a <LCD_8_bit_init+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2102:	6f 81       	ldd	r22, Y+7	; 0x07
    2104:	78 85       	ldd	r23, Y+8	; 0x08
    2106:	89 85       	ldd	r24, Y+9	; 0x09
    2108:	9a 85       	ldd	r25, Y+10	; 0x0a
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9e 83       	std	Y+6, r25	; 0x06
    2114:	8d 83       	std	Y+5, r24	; 0x05
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	9e 81       	ldd	r25, Y+6	; 0x06
    211a:	9a 83       	std	Y+2, r25	; 0x02
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	9a 81       	ldd	r25, Y+2	; 0x02
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_8_bit_init+0x1fc>
    2126:	9a 83       	std	Y+2, r25	; 0x02
    2128:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);					/* Clear display command delay> 1.63 ms */

	LCD_8_bit_sendCMD(0x80);		/* cursor at home position */
    212a:	80 e8       	ldi	r24, 0x80	; 128
    212c:	0e 94 a1 10 	call	0x2142	; 0x2142 <LCD_8_bit_sendCMD>

}
    2130:	6c 96       	adiw	r28, 0x1c	; 28
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <LCD_8_bit_sendCMD>:

void LCD_8_bit_sendCMD (u8 cmnd)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	6d 97       	sbiw	r28, 0x1d	; 29
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA_PORT = cmnd;
    2158:	e8 e3       	ldi	r30, 0x38	; 56
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    215e:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<RS);	/* RS=O command register */
    2160:	a2 e3       	ldi	r26, 0x32	; 50
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e2 e3       	ldi	r30, 0x32	; 50
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	8b 7f       	andi	r24, 0xFB	; 251
    216c:	8c 93       	st	X, r24
	LCD_CMD_PORT &= ~(1<<RW);	/* RW=0 Write operation */
    216e:	a2 e3       	ldi	r26, 0x32	; 50
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e2 e3       	ldi	r30, 0x32	; 50
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	87 7f       	andi	r24, 0xF7	; 247
    217a:	8c 93       	st	X, r24

	/* Enable pulse */
	LCD_CMD_PORT |=  (1<<EN);
    217c:	a2 e3       	ldi	r26, 0x32	; 50
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e2 e3       	ldi	r30, 0x32	; 50
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	80 61       	ori	r24, 0x10	; 16
    2188:	8c 93       	st	X, r24
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	a0 e8       	ldi	r26, 0x80	; 128
    2190:	bf e3       	ldi	r27, 0x3F	; 63
    2192:	89 8f       	std	Y+25, r24	; 0x19
    2194:	9a 8f       	std	Y+26, r25	; 0x1a
    2196:	ab 8f       	std	Y+27, r26	; 0x1b
    2198:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219a:	69 8d       	ldd	r22, Y+25	; 0x19
    219c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	4a ef       	ldi	r20, 0xFA	; 250
    21a8:	54 e4       	ldi	r21, 0x44	; 68
    21aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	8d 8b       	std	Y+21, r24	; 0x15
    21b4:	9e 8b       	std	Y+22, r25	; 0x16
    21b6:	af 8b       	std	Y+23, r26	; 0x17
    21b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21ba:	6d 89       	ldd	r22, Y+21	; 0x15
    21bc:	7e 89       	ldd	r23, Y+22	; 0x16
    21be:	8f 89       	ldd	r24, Y+23	; 0x17
    21c0:	98 8d       	ldd	r25, Y+24	; 0x18
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e8       	ldi	r20, 0x80	; 128
    21c8:	5f e3       	ldi	r21, 0x3F	; 63
    21ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ce:	88 23       	and	r24, r24
    21d0:	2c f4       	brge	.+10     	; 0x21dc <LCD_8_bit_sendCMD+0x9a>
		__ticks = 1;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	9c 8b       	std	Y+20, r25	; 0x14
    21d8:	8b 8b       	std	Y+19, r24	; 0x13
    21da:	3f c0       	rjmp	.+126    	; 0x225a <LCD_8_bit_sendCMD+0x118>
	else if (__tmp > 65535)
    21dc:	6d 89       	ldd	r22, Y+21	; 0x15
    21de:	7e 89       	ldd	r23, Y+22	; 0x16
    21e0:	8f 89       	ldd	r24, Y+23	; 0x17
    21e2:	98 8d       	ldd	r25, Y+24	; 0x18
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	3f ef       	ldi	r19, 0xFF	; 255
    21e8:	4f e7       	ldi	r20, 0x7F	; 127
    21ea:	57 e4       	ldi	r21, 0x47	; 71
    21ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f0:	18 16       	cp	r1, r24
    21f2:	4c f5       	brge	.+82     	; 0x2246 <LCD_8_bit_sendCMD+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f4:	69 8d       	ldd	r22, Y+25	; 0x19
    21f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e2       	ldi	r20, 0x20	; 32
    2202:	51 e4       	ldi	r21, 0x41	; 65
    2204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	bc 01       	movw	r22, r24
    220e:	cd 01       	movw	r24, r26
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	9c 8b       	std	Y+20, r25	; 0x14
    221a:	8b 8b       	std	Y+19, r24	; 0x13
    221c:	0f c0       	rjmp	.+30     	; 0x223c <LCD_8_bit_sendCMD+0xfa>
    221e:	88 ec       	ldi	r24, 0xC8	; 200
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9a 8b       	std	Y+18, r25	; 0x12
    2224:	89 8b       	std	Y+17, r24	; 0x11
    2226:	89 89       	ldd	r24, Y+17	; 0x11
    2228:	9a 89       	ldd	r25, Y+18	; 0x12
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	f1 f7       	brne	.-4      	; 0x222a <LCD_8_bit_sendCMD+0xe8>
    222e:	9a 8b       	std	Y+18, r25	; 0x12
    2230:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2232:	8b 89       	ldd	r24, Y+19	; 0x13
    2234:	9c 89       	ldd	r25, Y+20	; 0x14
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	9c 8b       	std	Y+20, r25	; 0x14
    223a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223c:	8b 89       	ldd	r24, Y+19	; 0x13
    223e:	9c 89       	ldd	r25, Y+20	; 0x14
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	69 f7       	brne	.-38     	; 0x221e <LCD_8_bit_sendCMD+0xdc>
    2244:	14 c0       	rjmp	.+40     	; 0x226e <LCD_8_bit_sendCMD+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2246:	6d 89       	ldd	r22, Y+21	; 0x15
    2248:	7e 89       	ldd	r23, Y+22	; 0x16
    224a:	8f 89       	ldd	r24, Y+23	; 0x17
    224c:	98 8d       	ldd	r25, Y+24	; 0x18
    224e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	9c 8b       	std	Y+20, r25	; 0x14
    2258:	8b 8b       	std	Y+19, r24	; 0x13
    225a:	8b 89       	ldd	r24, Y+19	; 0x13
    225c:	9c 89       	ldd	r25, Y+20	; 0x14
    225e:	98 8b       	std	Y+16, r25	; 0x10
    2260:	8f 87       	std	Y+15, r24	; 0x0f
    2262:	8f 85       	ldd	r24, Y+15	; 0x0f
    2264:	98 89       	ldd	r25, Y+16	; 0x10
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <LCD_8_bit_sendCMD+0x124>
    226a:	98 8b       	std	Y+16, r25	; 0x10
    226c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_CMD_PORT &=  ~(1<<EN);
    226e:	a2 e3       	ldi	r26, 0x32	; 50
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	e2 e3       	ldi	r30, 0x32	; 50
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	8f 7e       	andi	r24, 0xEF	; 239
    227a:	8c 93       	st	X, r24
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	a0 ea       	ldi	r26, 0xA0	; 160
    2282:	b0 e4       	ldi	r27, 0x40	; 64
    2284:	8b 87       	std	Y+11, r24	; 0x0b
    2286:	9c 87       	std	Y+12, r25	; 0x0c
    2288:	ad 87       	std	Y+13, r26	; 0x0d
    228a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228c:	6b 85       	ldd	r22, Y+11	; 0x0b
    228e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2290:	8d 85       	ldd	r24, Y+13	; 0x0d
    2292:	9e 85       	ldd	r25, Y+14	; 0x0e
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	4a ef       	ldi	r20, 0xFA	; 250
    229a:	54 e4       	ldi	r21, 0x44	; 68
    229c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	8f 83       	std	Y+7, r24	; 0x07
    22a6:	98 87       	std	Y+8, r25	; 0x08
    22a8:	a9 87       	std	Y+9, r26	; 0x09
    22aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ac:	6f 81       	ldd	r22, Y+7	; 0x07
    22ae:	78 85       	ldd	r23, Y+8	; 0x08
    22b0:	89 85       	ldd	r24, Y+9	; 0x09
    22b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e8       	ldi	r20, 0x80	; 128
    22ba:	5f e3       	ldi	r21, 0x3F	; 63
    22bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22c0:	88 23       	and	r24, r24
    22c2:	2c f4       	brge	.+10     	; 0x22ce <LCD_8_bit_sendCMD+0x18c>
		__ticks = 1;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	9e 83       	std	Y+6, r25	; 0x06
    22ca:	8d 83       	std	Y+5, r24	; 0x05
    22cc:	3f c0       	rjmp	.+126    	; 0x234c <LCD_8_bit_sendCMD+0x20a>
	else if (__tmp > 65535)
    22ce:	6f 81       	ldd	r22, Y+7	; 0x07
    22d0:	78 85       	ldd	r23, Y+8	; 0x08
    22d2:	89 85       	ldd	r24, Y+9	; 0x09
    22d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	3f ef       	ldi	r19, 0xFF	; 255
    22da:	4f e7       	ldi	r20, 0x7F	; 127
    22dc:	57 e4       	ldi	r21, 0x47	; 71
    22de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22e2:	18 16       	cp	r1, r24
    22e4:	4c f5       	brge	.+82     	; 0x2338 <LCD_8_bit_sendCMD+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e2       	ldi	r20, 0x20	; 32
    22f4:	51 e4       	ldi	r21, 0x41	; 65
    22f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	bc 01       	movw	r22, r24
    2300:	cd 01       	movw	r24, r26
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9e 83       	std	Y+6, r25	; 0x06
    230c:	8d 83       	std	Y+5, r24	; 0x05
    230e:	0f c0       	rjmp	.+30     	; 0x232e <LCD_8_bit_sendCMD+0x1ec>
    2310:	88 ec       	ldi	r24, 0xC8	; 200
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	9c 83       	std	Y+4, r25	; 0x04
    2316:	8b 83       	std	Y+3, r24	; 0x03
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	9c 81       	ldd	r25, Y+4	; 0x04
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <LCD_8_bit_sendCMD+0x1da>
    2320:	9c 83       	std	Y+4, r25	; 0x04
    2322:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	9e 81       	ldd	r25, Y+6	; 0x06
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	9e 83       	std	Y+6, r25	; 0x06
    232c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	69 f7       	brne	.-38     	; 0x2310 <LCD_8_bit_sendCMD+0x1ce>
    2336:	14 c0       	rjmp	.+40     	; 0x2360 <LCD_8_bit_sendCMD+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2338:	6f 81       	ldd	r22, Y+7	; 0x07
    233a:	78 85       	ldd	r23, Y+8	; 0x08
    233c:	89 85       	ldd	r24, Y+9	; 0x09
    233e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9e 83       	std	Y+6, r25	; 0x06
    234a:	8d 83       	std	Y+5, r24	; 0x05
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	9a 83       	std	Y+2, r25	; 0x02
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	9a 81       	ldd	r25, Y+2	; 0x02
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <LCD_8_bit_sendCMD+0x216>
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
}
    2360:	6d 96       	adiw	r28, 0x1d	; 29
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	cd bf       	out	0x3d, r28	; 61
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <LCD_8_bit_sendChar>:

void LCD_8_bit_sendChar (u8 charData)
{
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	6d 97       	sbiw	r28, 0x1d	; 29
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA_PORT = charData;
    2388:	e8 e3       	ldi	r30, 0x38	; 56
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    238e:	80 83       	st	Z, r24
	LCD_CMD_PORT |= (1<<RS);	/* RS=1 data register */
    2390:	a2 e3       	ldi	r26, 0x32	; 50
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	e2 e3       	ldi	r30, 0x32	; 50
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	84 60       	ori	r24, 0x04	; 4
    239c:	8c 93       	st	X, r24
	LCD_CMD_PORT &= ~(1<<RW);	/* RW=0 Write operation */
    239e:	a2 e3       	ldi	r26, 0x32	; 50
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	e2 e3       	ldi	r30, 0x32	; 50
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	87 7f       	andi	r24, 0xF7	; 247
    23aa:	8c 93       	st	X, r24

	/* Enable pulse */
	LCD_CMD_PORT |=  (1<<EN);
    23ac:	a2 e3       	ldi	r26, 0x32	; 50
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e2 e3       	ldi	r30, 0x32	; 50
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	80 61       	ori	r24, 0x10	; 16
    23b8:	8c 93       	st	X, r24
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	a0 e8       	ldi	r26, 0x80	; 128
    23c0:	bf e3       	ldi	r27, 0x3F	; 63
    23c2:	89 8f       	std	Y+25, r24	; 0x19
    23c4:	9a 8f       	std	Y+26, r25	; 0x1a
    23c6:	ab 8f       	std	Y+27, r26	; 0x1b
    23c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ca:	69 8d       	ldd	r22, Y+25	; 0x19
    23cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	4a ef       	ldi	r20, 0xFA	; 250
    23d8:	54 e4       	ldi	r21, 0x44	; 68
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	8d 8b       	std	Y+21, r24	; 0x15
    23e4:	9e 8b       	std	Y+22, r25	; 0x16
    23e6:	af 8b       	std	Y+23, r26	; 0x17
    23e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23ea:	6d 89       	ldd	r22, Y+21	; 0x15
    23ec:	7e 89       	ldd	r23, Y+22	; 0x16
    23ee:	8f 89       	ldd	r24, Y+23	; 0x17
    23f0:	98 8d       	ldd	r25, Y+24	; 0x18
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e8       	ldi	r20, 0x80	; 128
    23f8:	5f e3       	ldi	r21, 0x3F	; 63
    23fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23fe:	88 23       	and	r24, r24
    2400:	2c f4       	brge	.+10     	; 0x240c <LCD_8_bit_sendChar+0x9a>
		__ticks = 1;
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	9c 8b       	std	Y+20, r25	; 0x14
    2408:	8b 8b       	std	Y+19, r24	; 0x13
    240a:	3f c0       	rjmp	.+126    	; 0x248a <LCD_8_bit_sendChar+0x118>
	else if (__tmp > 65535)
    240c:	6d 89       	ldd	r22, Y+21	; 0x15
    240e:	7e 89       	ldd	r23, Y+22	; 0x16
    2410:	8f 89       	ldd	r24, Y+23	; 0x17
    2412:	98 8d       	ldd	r25, Y+24	; 0x18
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	3f ef       	ldi	r19, 0xFF	; 255
    2418:	4f e7       	ldi	r20, 0x7F	; 127
    241a:	57 e4       	ldi	r21, 0x47	; 71
    241c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2420:	18 16       	cp	r1, r24
    2422:	4c f5       	brge	.+82     	; 0x2476 <LCD_8_bit_sendChar+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2424:	69 8d       	ldd	r22, Y+25	; 0x19
    2426:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2428:	8b 8d       	ldd	r24, Y+27	; 0x1b
    242a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e2       	ldi	r20, 0x20	; 32
    2432:	51 e4       	ldi	r21, 0x41	; 65
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	9c 8b       	std	Y+20, r25	; 0x14
    244a:	8b 8b       	std	Y+19, r24	; 0x13
    244c:	0f c0       	rjmp	.+30     	; 0x246c <LCD_8_bit_sendChar+0xfa>
    244e:	88 ec       	ldi	r24, 0xC8	; 200
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9a 8b       	std	Y+18, r25	; 0x12
    2454:	89 8b       	std	Y+17, r24	; 0x11
    2456:	89 89       	ldd	r24, Y+17	; 0x11
    2458:	9a 89       	ldd	r25, Y+18	; 0x12
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <LCD_8_bit_sendChar+0xe8>
    245e:	9a 8b       	std	Y+18, r25	; 0x12
    2460:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2462:	8b 89       	ldd	r24, Y+19	; 0x13
    2464:	9c 89       	ldd	r25, Y+20	; 0x14
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	9c 8b       	std	Y+20, r25	; 0x14
    246a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246c:	8b 89       	ldd	r24, Y+19	; 0x13
    246e:	9c 89       	ldd	r25, Y+20	; 0x14
    2470:	00 97       	sbiw	r24, 0x00	; 0
    2472:	69 f7       	brne	.-38     	; 0x244e <LCD_8_bit_sendChar+0xdc>
    2474:	14 c0       	rjmp	.+40     	; 0x249e <LCD_8_bit_sendChar+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2476:	6d 89       	ldd	r22, Y+21	; 0x15
    2478:	7e 89       	ldd	r23, Y+22	; 0x16
    247a:	8f 89       	ldd	r24, Y+23	; 0x17
    247c:	98 8d       	ldd	r25, Y+24	; 0x18
    247e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	9c 8b       	std	Y+20, r25	; 0x14
    2488:	8b 8b       	std	Y+19, r24	; 0x13
    248a:	8b 89       	ldd	r24, Y+19	; 0x13
    248c:	9c 89       	ldd	r25, Y+20	; 0x14
    248e:	98 8b       	std	Y+16, r25	; 0x10
    2490:	8f 87       	std	Y+15, r24	; 0x0f
    2492:	8f 85       	ldd	r24, Y+15	; 0x0f
    2494:	98 89       	ldd	r25, Y+16	; 0x10
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <LCD_8_bit_sendChar+0x124>
    249a:	98 8b       	std	Y+16, r25	; 0x10
    249c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_CMD_PORT &=  ~(1<<EN);
    249e:	a2 e3       	ldi	r26, 0x32	; 50
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e2 e3       	ldi	r30, 0x32	; 50
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	8f 7e       	andi	r24, 0xEF	; 239
    24aa:	8c 93       	st	X, r24
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a0 ea       	ldi	r26, 0xA0	; 160
    24b2:	b0 e4       	ldi	r27, 0x40	; 64
    24b4:	8b 87       	std	Y+11, r24	; 0x0b
    24b6:	9c 87       	std	Y+12, r25	; 0x0c
    24b8:	ad 87       	std	Y+13, r26	; 0x0d
    24ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24be:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	4a ef       	ldi	r20, 0xFA	; 250
    24ca:	54 e4       	ldi	r21, 0x44	; 68
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	8f 83       	std	Y+7, r24	; 0x07
    24d6:	98 87       	std	Y+8, r25	; 0x08
    24d8:	a9 87       	std	Y+9, r26	; 0x09
    24da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24dc:	6f 81       	ldd	r22, Y+7	; 0x07
    24de:	78 85       	ldd	r23, Y+8	; 0x08
    24e0:	89 85       	ldd	r24, Y+9	; 0x09
    24e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	40 e8       	ldi	r20, 0x80	; 128
    24ea:	5f e3       	ldi	r21, 0x3F	; 63
    24ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f0:	88 23       	and	r24, r24
    24f2:	2c f4       	brge	.+10     	; 0x24fe <LCD_8_bit_sendChar+0x18c>
		__ticks = 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9e 83       	std	Y+6, r25	; 0x06
    24fa:	8d 83       	std	Y+5, r24	; 0x05
    24fc:	3f c0       	rjmp	.+126    	; 0x257c <LCD_8_bit_sendChar+0x20a>
	else if (__tmp > 65535)
    24fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2500:	78 85       	ldd	r23, Y+8	; 0x08
    2502:	89 85       	ldd	r24, Y+9	; 0x09
    2504:	9a 85       	ldd	r25, Y+10	; 0x0a
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	3f ef       	ldi	r19, 0xFF	; 255
    250a:	4f e7       	ldi	r20, 0x7F	; 127
    250c:	57 e4       	ldi	r21, 0x47	; 71
    250e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2512:	18 16       	cp	r1, r24
    2514:	4c f5       	brge	.+82     	; 0x2568 <LCD_8_bit_sendChar+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2516:	6b 85       	ldd	r22, Y+11	; 0x0b
    2518:	7c 85       	ldd	r23, Y+12	; 0x0c
    251a:	8d 85       	ldd	r24, Y+13	; 0x0d
    251c:	9e 85       	ldd	r25, Y+14	; 0x0e
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e2       	ldi	r20, 0x20	; 32
    2524:	51 e4       	ldi	r21, 0x41	; 65
    2526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	bc 01       	movw	r22, r24
    2530:	cd 01       	movw	r24, r26
    2532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	9e 83       	std	Y+6, r25	; 0x06
    253c:	8d 83       	std	Y+5, r24	; 0x05
    253e:	0f c0       	rjmp	.+30     	; 0x255e <LCD_8_bit_sendChar+0x1ec>
    2540:	88 ec       	ldi	r24, 0xC8	; 200
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	9c 83       	std	Y+4, r25	; 0x04
    2546:	8b 83       	std	Y+3, r24	; 0x03
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <LCD_8_bit_sendChar+0x1da>
    2550:	9c 83       	std	Y+4, r25	; 0x04
    2552:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2554:	8d 81       	ldd	r24, Y+5	; 0x05
    2556:	9e 81       	ldd	r25, Y+6	; 0x06
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255e:	8d 81       	ldd	r24, Y+5	; 0x05
    2560:	9e 81       	ldd	r25, Y+6	; 0x06
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	69 f7       	brne	.-38     	; 0x2540 <LCD_8_bit_sendChar+0x1ce>
    2566:	14 c0       	rjmp	.+40     	; 0x2590 <LCD_8_bit_sendChar+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2568:	6f 81       	ldd	r22, Y+7	; 0x07
    256a:	78 85       	ldd	r23, Y+8	; 0x08
    256c:	89 85       	ldd	r24, Y+9	; 0x09
    256e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	8d 81       	ldd	r24, Y+5	; 0x05
    257e:	9e 81       	ldd	r25, Y+6	; 0x06
    2580:	9a 83       	std	Y+2, r25	; 0x02
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <LCD_8_bit_sendChar+0x216>
    258c:	9a 83       	std	Y+2, r25	; 0x02
    258e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
}
    2590:	6d 96       	adiw	r28, 0x1d	; 29
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
    259c:	cf 91       	pop	r28
    259e:	df 91       	pop	r29
    25a0:	08 95       	ret

000025a2 <LCD_8_bit_sendString>:

void LCD_8_bit_sendString (u8 *str)
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	00 d0       	rcall	.+0      	; 0x25a8 <LCD_8_bit_sendString+0x6>
    25a8:	0f 92       	push	r0
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	9b 83       	std	Y+3, r25	; 0x03
    25b0:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    25b2:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; str[i] != 0; i++)
    25b4:	19 82       	std	Y+1, r1	; 0x01
    25b6:	0e c0       	rjmp	.+28     	; 0x25d4 <LCD_8_bit_sendString+0x32>
	{
		LCD_8_bit_sendChar(str[i]);
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	9b 81       	ldd	r25, Y+3	; 0x03
    25c2:	fc 01       	movw	r30, r24
    25c4:	e2 0f       	add	r30, r18
    25c6:	f3 1f       	adc	r31, r19
    25c8:	80 81       	ld	r24, Z
    25ca:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_8_bit_sendChar>
}

void LCD_8_bit_sendString (u8 *str)
{
	u8 i = 0;
	for (i = 0; str[i] != 0; i++)
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	8f 5f       	subi	r24, 0xFF	; 255
    25d2:	89 83       	std	Y+1, r24	; 0x01
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	28 2f       	mov	r18, r24
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
    25dc:	9b 81       	ldd	r25, Y+3	; 0x03
    25de:	fc 01       	movw	r30, r24
    25e0:	e2 0f       	add	r30, r18
    25e2:	f3 1f       	adc	r31, r19
    25e4:	80 81       	ld	r24, Z
    25e6:	88 23       	and	r24, r24
    25e8:	39 f7       	brne	.-50     	; 0x25b8 <LCD_8_bit_sendString+0x16>
	{
		LCD_8_bit_sendChar(str[i]);
	}
}
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	cf 91       	pop	r28
    25f2:	df 91       	pop	r29
    25f4:	08 95       	ret

000025f6 <LCD_8_bit_GoToPos>:

void LCD_8_bit_GoToPos (u8 row, u8 col)
{
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	00 d0       	rcall	.+0      	; 0x25fc <LCD_8_bit_GoToPos+0x6>
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <LCD_8_bit_GoToPos+0x8>
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	8b 83       	std	Y+3, r24	; 0x03
    2604:	6c 83       	std	Y+4, r22	; 0x04
	u8 Loc[2] = {0x80 , 0xc0};
    2606:	80 e8       	ldi	r24, 0x80	; 128
    2608:	89 83       	std	Y+1, r24	; 0x01
    260a:	80 ec       	ldi	r24, 0xC0	; 192
    260c:	8a 83       	std	Y+2, r24	; 0x02
	LCD_8_bit_sendCMD(Loc[row]+col);
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	ce 01       	movw	r24, r28
    2616:	01 96       	adiw	r24, 0x01	; 1
    2618:	fc 01       	movw	r30, r24
    261a:	e2 0f       	add	r30, r18
    261c:	f3 1f       	adc	r31, r19
    261e:	90 81       	ld	r25, Z
    2620:	8c 81       	ldd	r24, Y+4	; 0x04
    2622:	89 0f       	add	r24, r25
    2624:	0e 94 a1 10 	call	0x2142	; 0x2142 <LCD_8_bit_sendCMD>
}
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	cf 91       	pop	r28
    2632:	df 91       	pop	r29
    2634:	08 95       	ret

00002636 <LCD_createCustomCharacter>:

void LCD_createCustomCharacter (u8 *pattern, u8 location)
{
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	00 d0       	rcall	.+0      	; 0x263c <LCD_createCustomCharacter+0x6>
    263c:	00 d0       	rcall	.+0      	; 0x263e <LCD_createCustomCharacter+0x8>
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
    2642:	9b 83       	std	Y+3, r25	; 0x03
    2644:	8a 83       	std	Y+2, r24	; 0x02
    2646:	6c 83       	std	Y+4, r22	; 0x04
	u8 i = 0;
    2648:	19 82       	std	Y+1, r1	; 0x01

	LCD_8_bit_sendCMD(0x40 + (location * 8));	/* Send the Address of CGRAM */
    264a:	8c 81       	ldd	r24, Y+4	; 0x04
    264c:	88 2f       	mov	r24, r24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	08 96       	adiw	r24, 0x08	; 8
    2652:	88 0f       	add	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	88 0f       	add	r24, r24
    2658:	99 1f       	adc	r25, r25
    265a:	88 0f       	add	r24, r24
    265c:	99 1f       	adc	r25, r25
    265e:	0e 94 a1 10 	call	0x2142	; 0x2142 <LCD_8_bit_sendCMD>

	for(i = 0; i < 8; i++)
    2662:	19 82       	std	Y+1, r1	; 0x01
    2664:	0e c0       	rjmp	.+28     	; 0x2682 <LCD_createCustomCharacter+0x4c>
	{
		LCD_8_bit_sendChar(pattern[i]);			/* Pass the Bytes of pattern on LCD */
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	28 2f       	mov	r18, r24
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	9b 81       	ldd	r25, Y+3	; 0x03
    2670:	fc 01       	movw	r30, r24
    2672:	e2 0f       	add	r30, r18
    2674:	f3 1f       	adc	r31, r19
    2676:	80 81       	ld	r24, Z
    2678:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_8_bit_sendChar>
{
	u8 i = 0;

	LCD_8_bit_sendCMD(0x40 + (location * 8));	/* Send the Address of CGRAM */

	for(i = 0; i < 8; i++)
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	8f 5f       	subi	r24, 0xFF	; 255
    2680:	89 83       	std	Y+1, r24	; 0x01
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	88 30       	cpi	r24, 0x08	; 8
    2686:	78 f3       	brcs	.-34     	; 0x2666 <LCD_createCustomCharacter+0x30>
	{
		LCD_8_bit_sendChar(pattern[i]);			/* Pass the Bytes of pattern on LCD */
	}
}
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <LCD_CLR>:

void LCD_CLR (void)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
	LCD_8_bit_sendCMD(0X01);			/* clear display */
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	0e 94 a1 10 	call	0x2142	; 0x2142 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0X80);			/* cursor at home position */
    26a4:	80 e8       	ldi	r24, 0x80	; 128
    26a6:	0e 94 a1 10 	call	0x2142	; 0x2142 <LCD_8_bit_sendCMD>
}
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	08 95       	ret

000026b0 <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][4] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	0f 92       	push	r0
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    26ba:	19 82       	std	Y+1, r1	; 0x01
    26bc:	33 c0       	rjmp	.+102    	; 0x2724 <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	88 2f       	mov	r24, r24
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	fc 01       	movw	r30, r24
    26c6:	e0 5a       	subi	r30, 0xA0	; 160
    26c8:	fc 4f       	sbci	r31, 0xFC	; 252
    26ca:	90 81       	ld	r25, Z
    26cc:	82 e0       	ldi	r24, 0x02	; 2
    26ce:	69 2f       	mov	r22, r25
    26d0:	41 e0       	ldi	r20, 0x01	; 1
    26d2:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	88 2f       	mov	r24, r24
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	fc 01       	movw	r30, r24
    26de:	e0 5a       	subi	r30, 0xA0	; 160
    26e0:	fc 4f       	sbci	r31, 0xFC	; 252
    26e2:	90 81       	ld	r25, Z
    26e4:	82 e0       	ldi	r24, 0x02	; 2
    26e6:	69 2f       	mov	r22, r25
    26e8:	41 e0       	ldi	r20, 0x01	; 1
    26ea:	0e 94 0f 0b 	call	0x161e	; 0x161e <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	88 2f       	mov	r24, r24
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	fc 01       	movw	r30, r24
    26f6:	ec 59       	subi	r30, 0x9C	; 156
    26f8:	fc 4f       	sbci	r31, 0xFC	; 252
    26fa:	90 81       	ld	r25, Z
    26fc:	82 e0       	ldi	r24, 0x02	; 2
    26fe:	69 2f       	mov	r22, r25
    2700:	40 e0       	ldi	r20, 0x00	; 0
    2702:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	88 2f       	mov	r24, r24
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	fc 01       	movw	r30, r24
    270e:	ec 59       	subi	r30, 0x9C	; 156
    2710:	fc 4f       	sbci	r31, 0xFC	; 252
    2712:	90 81       	ld	r25, Z
    2714:	82 e0       	ldi	r24, 0x02	; 2
    2716:	69 2f       	mov	r22, r25
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	0e 94 0f 0b 	call	0x161e	; 0x161e <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	8f 5f       	subi	r24, 0xFF	; 255
    2722:	89 83       	std	Y+1, r24	; 0x01
    2724:	89 81       	ldd	r24, Y+1	; 0x01
    2726:	84 30       	cpi	r24, 0x04	; 4
    2728:	50 f2       	brcs	.-108    	; 0x26be <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    272a:	81 e0       	ldi	r24, 0x01	; 1
}
    272c:	0f 90       	pop	r0
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	65 97       	sbiw	r28, 0x15	; 21
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	9d 8b       	std	Y+21, r25	; 0x15
    274a:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	8a 8b       	std	Y+18, r24	; 0x12
    2750:	1b 8a       	std	Y+19, r1	; 0x13
    2752:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    2754:	8c 89       	ldd	r24, Y+20	; 0x14
    2756:	9d 89       	ldd	r25, Y+21	; 0x15
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	09 f4       	brne	.+2      	; 0x275e <Keypad_enu_getKey+0x2a>
    275c:	f0 c0       	rjmp	.+480    	; 0x293e <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    275e:	ec 89       	ldd	r30, Y+20	; 0x14
    2760:	fd 89       	ldd	r31, Y+21	; 0x15
    2762:	8f ef       	ldi	r24, 0xFF	; 255
    2764:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    2766:	19 8a       	std	Y+17, r1	; 0x11
    2768:	e5 c0       	rjmp	.+458    	; 0x2934 <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    276a:	89 89       	ldd	r24, Y+17	; 0x11
    276c:	88 2f       	mov	r24, r24
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	fc 01       	movw	r30, r24
    2772:	e0 5a       	subi	r30, 0xA0	; 160
    2774:	fc 4f       	sbci	r31, 0xFC	; 252
    2776:	90 81       	ld	r25, Z
    2778:	82 e0       	ldi	r24, 0x02	; 2
    277a:	69 2f       	mov	r22, r25
    277c:	40 e0       	ldi	r20, 0x00	; 0
    277e:	0e 94 0f 0b 	call	0x161e	; 0x161e <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2782:	18 8a       	std	Y+16, r1	; 0x10
    2784:	c1 c0       	rjmp	.+386    	; 0x2908 <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2786:	88 89       	ldd	r24, Y+16	; 0x10
    2788:	88 2f       	mov	r24, r24
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	fc 01       	movw	r30, r24
    278e:	ec 59       	subi	r30, 0x9C	; 156
    2790:	fc 4f       	sbci	r31, 0xFC	; 252
    2792:	90 81       	ld	r25, Z
    2794:	9e 01       	movw	r18, r28
    2796:	2d 5e       	subi	r18, 0xED	; 237
    2798:	3f 4f       	sbci	r19, 0xFF	; 255
    279a:	82 e0       	ldi	r24, 0x02	; 2
    279c:	69 2f       	mov	r22, r25
    279e:	a9 01       	movw	r20, r18
    27a0:	0e 94 39 0c 	call	0x1872	; 0x1872 <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    27a4:	8b 89       	ldd	r24, Y+19	; 0x13
    27a6:	88 23       	and	r24, r24
    27a8:	09 f0       	breq	.+2      	; 0x27ac <Keypad_enu_getKey+0x78>
    27aa:	ab c0       	rjmp	.+342    	; 0x2902 <Keypad_enu_getKey+0x1ce>
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	a0 ea       	ldi	r26, 0xA0	; 160
    27b2:	b1 e4       	ldi	r27, 0x41	; 65
    27b4:	8b 87       	std	Y+11, r24	; 0x0b
    27b6:	9c 87       	std	Y+12, r25	; 0x0c
    27b8:	ad 87       	std	Y+13, r26	; 0x0d
    27ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27be:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	4a e7       	ldi	r20, 0x7A	; 122
    27ca:	55 e4       	ldi	r21, 0x45	; 69
    27cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	8f 83       	std	Y+7, r24	; 0x07
    27d6:	98 87       	std	Y+8, r25	; 0x08
    27d8:	a9 87       	std	Y+9, r26	; 0x09
    27da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27dc:	6f 81       	ldd	r22, Y+7	; 0x07
    27de:	78 85       	ldd	r23, Y+8	; 0x08
    27e0:	89 85       	ldd	r24, Y+9	; 0x09
    27e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e8       	ldi	r20, 0x80	; 128
    27ea:	5f e3       	ldi	r21, 0x3F	; 63
    27ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f0:	88 23       	and	r24, r24
    27f2:	2c f4       	brge	.+10     	; 0x27fe <Keypad_enu_getKey+0xca>
		__ticks = 1;
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	9e 83       	std	Y+6, r25	; 0x06
    27fa:	8d 83       	std	Y+5, r24	; 0x05
    27fc:	3f c0       	rjmp	.+126    	; 0x287c <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    27fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2800:	78 85       	ldd	r23, Y+8	; 0x08
    2802:	89 85       	ldd	r24, Y+9	; 0x09
    2804:	9a 85       	ldd	r25, Y+10	; 0x0a
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	3f ef       	ldi	r19, 0xFF	; 255
    280a:	4f e7       	ldi	r20, 0x7F	; 127
    280c:	57 e4       	ldi	r21, 0x47	; 71
    280e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2812:	18 16       	cp	r1, r24
    2814:	4c f5       	brge	.+82     	; 0x2868 <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2816:	6b 85       	ldd	r22, Y+11	; 0x0b
    2818:	7c 85       	ldd	r23, Y+12	; 0x0c
    281a:	8d 85       	ldd	r24, Y+13	; 0x0d
    281c:	9e 85       	ldd	r25, Y+14	; 0x0e
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e2       	ldi	r20, 0x20	; 32
    2824:	51 e4       	ldi	r21, 0x41	; 65
    2826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	bc 01       	movw	r22, r24
    2830:	cd 01       	movw	r24, r26
    2832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	9e 83       	std	Y+6, r25	; 0x06
    283c:	8d 83       	std	Y+5, r24	; 0x05
    283e:	0f c0       	rjmp	.+30     	; 0x285e <Keypad_enu_getKey+0x12a>
    2840:	80 e9       	ldi	r24, 0x90	; 144
    2842:	91 e0       	ldi	r25, 0x01	; 1
    2844:	9c 83       	std	Y+4, r25	; 0x04
    2846:	8b 83       	std	Y+3, r24	; 0x03
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	9c 81       	ldd	r25, Y+4	; 0x04
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	f1 f7       	brne	.-4      	; 0x284c <Keypad_enu_getKey+0x118>
    2850:	9c 83       	std	Y+4, r25	; 0x04
    2852:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2854:	8d 81       	ldd	r24, Y+5	; 0x05
    2856:	9e 81       	ldd	r25, Y+6	; 0x06
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	9e 83       	std	Y+6, r25	; 0x06
    285c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	9e 81       	ldd	r25, Y+6	; 0x06
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	69 f7       	brne	.-38     	; 0x2840 <Keypad_enu_getKey+0x10c>
    2866:	14 c0       	rjmp	.+40     	; 0x2890 <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2868:	6f 81       	ldd	r22, Y+7	; 0x07
    286a:	78 85       	ldd	r23, Y+8	; 0x08
    286c:	89 85       	ldd	r24, Y+9	; 0x09
    286e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	9e 83       	std	Y+6, r25	; 0x06
    287a:	8d 83       	std	Y+5, r24	; 0x05
    287c:	8d 81       	ldd	r24, Y+5	; 0x05
    287e:	9e 81       	ldd	r25, Y+6	; 0x06
    2880:	9a 83       	std	Y+2, r25	; 0x02
    2882:	89 83       	std	Y+1, r24	; 0x01
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	f1 f7       	brne	.-4      	; 0x2888 <Keypad_enu_getKey+0x154>
    288c:	9a 83       	std	Y+2, r25	; 0x02
    288e:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2890:	88 89       	ldd	r24, Y+16	; 0x10
    2892:	88 2f       	mov	r24, r24
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	fc 01       	movw	r30, r24
    2898:	ec 59       	subi	r30, 0x9C	; 156
    289a:	fc 4f       	sbci	r31, 0xFC	; 252
    289c:	90 81       	ld	r25, Z
    289e:	9e 01       	movw	r18, r28
    28a0:	2d 5e       	subi	r18, 0xED	; 237
    28a2:	3f 4f       	sbci	r19, 0xFF	; 255
    28a4:	82 e0       	ldi	r24, 0x02	; 2
    28a6:	69 2f       	mov	r22, r25
    28a8:	a9 01       	movw	r20, r18
    28aa:	0e 94 39 0c 	call	0x1872	; 0x1872 <DIO_enu_GetPinValue>
    28ae:	0f c0       	rjmp	.+30     	; 0x28ce <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    28b0:	88 89       	ldd	r24, Y+16	; 0x10
    28b2:	88 2f       	mov	r24, r24
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	fc 01       	movw	r30, r24
    28b8:	ec 59       	subi	r30, 0x9C	; 156
    28ba:	fc 4f       	sbci	r31, 0xFC	; 252
    28bc:	90 81       	ld	r25, Z
    28be:	9e 01       	movw	r18, r28
    28c0:	2d 5e       	subi	r18, 0xED	; 237
    28c2:	3f 4f       	sbci	r19, 0xFF	; 255
    28c4:	82 e0       	ldi	r24, 0x02	; 2
    28c6:	69 2f       	mov	r22, r25
    28c8:	a9 01       	movw	r20, r18
    28ca:	0e 94 39 0c 	call	0x1872	; 0x1872 <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    28ce:	8b 89       	ldd	r24, Y+19	; 0x13
    28d0:	88 23       	and	r24, r24
    28d2:	71 f3       	breq	.-36     	; 0x28b0 <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    28d4:	89 89       	ldd	r24, Y+17	; 0x11
    28d6:	48 2f       	mov	r20, r24
    28d8:	50 e0       	ldi	r21, 0x00	; 0
    28da:	88 89       	ldd	r24, Y+16	; 0x10
    28dc:	28 2f       	mov	r18, r24
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	ca 01       	movw	r24, r20
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	82 0f       	add	r24, r18
    28ec:	93 1f       	adc	r25, r19
    28ee:	fc 01       	movw	r30, r24
    28f0:	e0 5b       	subi	r30, 0xB0	; 176
    28f2:	fc 4f       	sbci	r31, 0xFC	; 252
    28f4:	80 81       	ld	r24, Z
    28f6:	ec 89       	ldd	r30, Y+20	; 0x14
    28f8:	fd 89       	ldd	r31, Y+21	; 0x15
    28fa:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	8f 87       	std	Y+15, r24	; 0x0f
    2900:	07 c0       	rjmp	.+14     	; 0x2910 <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2902:	88 89       	ldd	r24, Y+16	; 0x10
    2904:	8f 5f       	subi	r24, 0xFF	; 255
    2906:	88 8b       	std	Y+16, r24	; 0x10
    2908:	88 89       	ldd	r24, Y+16	; 0x10
    290a:	84 30       	cpi	r24, 0x04	; 4
    290c:	08 f4       	brcc	.+2      	; 0x2910 <Keypad_enu_getKey+0x1dc>
    290e:	3b cf       	rjmp	.-394    	; 0x2786 <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    2910:	89 89       	ldd	r24, Y+17	; 0x11
    2912:	88 2f       	mov	r24, r24
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	fc 01       	movw	r30, r24
    2918:	e0 5a       	subi	r30, 0xA0	; 160
    291a:	fc 4f       	sbci	r31, 0xFC	; 252
    291c:	90 81       	ld	r25, Z
    291e:	82 e0       	ldi	r24, 0x02	; 2
    2920:	69 2f       	mov	r22, r25
    2922:	41 e0       	ldi	r20, 0x01	; 1
    2924:	0e 94 0f 0b 	call	0x161e	; 0x161e <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    2928:	8f 85       	ldd	r24, Y+15	; 0x0f
    292a:	88 23       	and	r24, r24
    292c:	49 f4       	brne	.+18     	; 0x2940 <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    292e:	89 89       	ldd	r24, Y+17	; 0x11
    2930:	8f 5f       	subi	r24, 0xFF	; 255
    2932:	89 8b       	std	Y+17, r24	; 0x11
    2934:	89 89       	ldd	r24, Y+17	; 0x11
    2936:	84 30       	cpi	r24, 0x04	; 4
    2938:	08 f4       	brcc	.+2      	; 0x293c <Keypad_enu_getKey+0x208>
    293a:	17 cf       	rjmp	.-466    	; 0x276a <Keypad_enu_getKey+0x36>
    293c:	01 c0       	rjmp	.+2      	; 0x2940 <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    293e:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    2940:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2942:	65 96       	adiw	r28, 0x15	; 21
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <controlLED>:
#include "../main.h"

void controlLED(u8 selectedRoom) {
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	29 97       	sbiw	r28, 0x09	; 9
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	8d 83       	std	Y+5, r24	; 0x05
    USART_VoidSendString((u8*)"1:LED ON\r\n2:LED OFF\r\n");
    296a:	80 e6       	ldi	r24, 0x60	; 96
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>

    u8 ledControl = 1;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	8b 83       	std	Y+3, r24	; 0x03
    u8 ledPin;
    u8 isClicked =0;
    2976:	19 82       	std	Y+1, r1	; 0x01
    // Determine the LED pin based on the selected room
    switch (selectedRoom) {
    2978:	8d 81       	ldd	r24, Y+5	; 0x05
    297a:	28 2f       	mov	r18, r24
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	39 87       	std	Y+9, r19	; 0x09
    2980:	28 87       	std	Y+8, r18	; 0x08
    2982:	88 85       	ldd	r24, Y+8	; 0x08
    2984:	99 85       	ldd	r25, Y+9	; 0x09
    2986:	81 30       	cpi	r24, 0x01	; 1
    2988:	91 05       	cpc	r25, r1
    298a:	31 f0       	breq	.+12     	; 0x2998 <controlLED+0x44>
    298c:	28 85       	ldd	r18, Y+8	; 0x08
    298e:	39 85       	ldd	r19, Y+9	; 0x09
    2990:	22 30       	cpi	r18, 0x02	; 2
    2992:	31 05       	cpc	r19, r1
    2994:	19 f0       	breq	.+6      	; 0x299c <controlLED+0x48>
    2996:	05 c0       	rjmp	.+10     	; 0x29a2 <controlLED+0x4e>
        case 1:
            ledPin = PIN0; // LED for room 1
    2998:	1a 82       	std	Y+2, r1	; 0x02
    299a:	64 c0       	rjmp	.+200    	; 0x2a64 <controlLED+0x110>
            break;
        case 2:
            ledPin = PIN5; // LED for room 2
    299c:	85 e0       	ldi	r24, 0x05	; 5
    299e:	8a 83       	std	Y+2, r24	; 0x02
    29a0:	61 c0       	rjmp	.+194    	; 0x2a64 <controlLED+0x110>
            break;
        default:
            USART_VoidSendString((u8*)"Invalid room number\n");
    29a2:	86 e7       	ldi	r24, 0x76	; 118
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    29aa:	60 c0       	rjmp	.+192    	; 0x2a6c <controlLED+0x118>
    }

    while (ledControl) {
        u8 key;

        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    29ac:	ce 01       	movw	r24, r28
    29ae:	04 96       	adiw	r24, 0x04	; 4
    29b0:	0e 94 9a 13 	call	0x2734	; 0x2734 <Keypad_enu_getKey>
    29b4:	81 30       	cpi	r24, 0x01	; 1
    29b6:	09 f0       	breq	.+2      	; 0x29ba <controlLED+0x66>
    29b8:	55 c0       	rjmp	.+170    	; 0x2a64 <controlLED+0x110>
    29ba:	8c 81       	ldd	r24, Y+4	; 0x04
    29bc:	8f 3f       	cpi	r24, 0xFF	; 255
    29be:	09 f4       	brne	.+2      	; 0x29c2 <controlLED+0x6e>
    29c0:	51 c0       	rjmp	.+162    	; 0x2a64 <controlLED+0x110>
            switch (key) {
    29c2:	8c 81       	ldd	r24, Y+4	; 0x04
    29c4:	28 2f       	mov	r18, r24
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	3f 83       	std	Y+7, r19	; 0x07
    29ca:	2e 83       	std	Y+6, r18	; 0x06
    29cc:	8e 81       	ldd	r24, Y+6	; 0x06
    29ce:	9f 81       	ldd	r25, Y+7	; 0x07
    29d0:	82 33       	cpi	r24, 0x32	; 50
    29d2:	91 05       	cpc	r25, r1
    29d4:	69 f1       	breq	.+90     	; 0x2a30 <controlLED+0xdc>
    29d6:	2e 81       	ldd	r18, Y+6	; 0x06
    29d8:	3f 81       	ldd	r19, Y+7	; 0x07
    29da:	23 34       	cpi	r18, 0x43	; 67
    29dc:	31 05       	cpc	r19, r1
    29de:	31 f0       	breq	.+12     	; 0x29ec <controlLED+0x98>
    29e0:	8e 81       	ldd	r24, Y+6	; 0x06
    29e2:	9f 81       	ldd	r25, Y+7	; 0x07
    29e4:	81 33       	cpi	r24, 0x31	; 49
    29e6:	91 05       	cpc	r25, r1
    29e8:	71 f0       	breq	.+28     	; 0x2a06 <controlLED+0xb2>
    29ea:	38 c0       	rjmp	.+112    	; 0x2a5c <controlLED+0x108>
                case 'C':
                	if(isClicked!=0)
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	88 23       	and	r24, r24
    29f0:	21 f0       	breq	.+8      	; 0x29fa <controlLED+0xa6>
                	DIO_toggle (PORT_A, ledPin );
    29f2:	81 e4       	ldi	r24, 0x41	; 65
    29f4:	6a 81       	ldd	r22, Y+2	; 0x02
    29f6:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_toggle>
                    showOptions(selectedRoom);
    29fa:	8d 81       	ldd	r24, Y+5	; 0x05
    29fc:	88 2f       	mov	r24, r24
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0e 94 32 17 	call	0x2e64	; 0x2e64 <showOptions>
    2a04:	2f c0       	rjmp	.+94     	; 0x2a64 <controlLED+0x110>
                    break;
                case '1': // LED ON
                	isClicked++;
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	8f 5f       	subi	r24, 0xFF	; 255
    2a0a:	89 83       	std	Y+1, r24	; 0x01
                    DIO_write(PORT_A, ledPin, HIGH);
    2a0c:	81 e4       	ldi	r24, 0x41	; 65
    2a0e:	6a 81       	ldd	r22, Y+2	; 0x02
    2a10:	41 e0       	ldi	r20, 0x01	; 1
    2a12:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_write>
                    displayLEDStatus(selectedRoom, "ON");
    2a16:	8d 81       	ldd	r24, Y+5	; 0x05
    2a18:	88 2f       	mov	r24, r24
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	2b e8       	ldi	r18, 0x8B	; 139
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	b9 01       	movw	r22, r18
    2a22:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <displayLEDStatus>
                    USART_VoidSendString((u8*)"LED ON\n");
    2a26:	8e e8       	ldi	r24, 0x8E	; 142
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    2a2e:	1a c0       	rjmp	.+52     	; 0x2a64 <controlLED+0x110>
                    break;
                case '2': // LED OFF
                	isClicked++;
    2a30:	89 81       	ldd	r24, Y+1	; 0x01
    2a32:	8f 5f       	subi	r24, 0xFF	; 255
    2a34:	89 83       	std	Y+1, r24	; 0x01
                    DIO_write(PORT_A, ledPin, LOW);
    2a36:	81 e4       	ldi	r24, 0x41	; 65
    2a38:	6a 81       	ldd	r22, Y+2	; 0x02
    2a3a:	40 e0       	ldi	r20, 0x00	; 0
    2a3c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_write>
                    displayLEDStatus(selectedRoom, "OFF");
    2a40:	8d 81       	ldd	r24, Y+5	; 0x05
    2a42:	88 2f       	mov	r24, r24
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	26 e9       	ldi	r18, 0x96	; 150
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	b9 01       	movw	r22, r18
    2a4c:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <displayLEDStatus>
                    USART_VoidSendString((u8*)"LED OFF\n");
    2a50:	8a e9       	ldi	r24, 0x9A	; 154
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
                    ledControl = 0;
    2a58:	1b 82       	std	Y+3, r1	; 0x03
    2a5a:	04 c0       	rjmp	.+8      	; 0x2a64 <controlLED+0x110>
                  //  showOptions();
                    break;
                default:
                    USART_VoidSendString((u8*)"Invalid selection, try again\n");
    2a5c:	83 ea       	ldi	r24, 0xA3	; 163
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
        default:
            USART_VoidSendString((u8*)"Invalid room number\n");
            return; // Exit if room number is invalid
    }

    while (ledControl) {
    2a64:	8b 81       	ldd	r24, Y+3	; 0x03
    2a66:	88 23       	and	r24, r24
    2a68:	09 f0       	breq	.+2      	; 0x2a6c <controlLED+0x118>
    2a6a:	a0 cf       	rjmp	.-192    	; 0x29ac <controlLED+0x58>
                    USART_VoidSendString((u8*)"Invalid selection, try again\n");
                    break;
            }
        }
    }
}
    2a6c:	29 96       	adiw	r28, 0x09	; 9
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	08 95       	ret

00002a7e <displayLEDStatus>:

// Helper function to display LED status on LCD
void displayLEDStatus(u8 room, const char* status) {
    2a7e:	df 93       	push	r29
    2a80:	cf 93       	push	r28
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <displayLEDStatus+0x6>
    2a84:	0f 92       	push	r0
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	89 83       	std	Y+1, r24	; 0x01
    2a8c:	7b 83       	std	Y+3, r23	; 0x03
    2a8e:	6a 83       	std	Y+2, r22	; 0x02
    LCD_8_bit_GoToPos(1, 0);
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	60 e0       	ldi	r22, 0x00	; 0
    2a96:	70 e0       	ldi	r23, 0x00	; 0
    2a98:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_8_bit_GoToPos>
    LCD_8_bit_sendString("LED ");
    2a9c:	81 ec       	ldi	r24, 0xC1	; 193
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
    LCD_8_bit_sendString(room); // Display the selected room number
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	88 2f       	mov	r24, r24
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
    LCD_8_bit_sendString(" ");
    2aae:	86 ec       	ldi	r24, 0xC6	; 198
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
    LCD_8_bit_sendString(status); // Display the status (ON/OFF)
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aba:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
}
    2abe:	0f 90       	pop	r0
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
    2ac4:	cf 91       	pop	r28
    2ac6:	df 91       	pop	r29
    2ac8:	08 95       	ret

00002aca <controlMotor>:
#include "../main.h"

void controlMotor(u8 selectedRoom) {
    2aca:	df 93       	push	r29
    2acc:	cf 93       	push	r28
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
    2ad2:	28 97       	sbiw	r28, 0x08	; 8
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	8c 83       	std	Y+4, r24	; 0x04
    USART_VoidSendString((u8*)"1:Motor ON\r\n2:Motor OFF\r\n");
    2ae0:	88 ec       	ldi	r24, 0xC8	; 200
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    u8 motorPin;
    u8 isClicked =0;
    2ae8:	19 82       	std	Y+1, r1	; 0x01
    // Determine the motor pin based on the selected room
    switch (selectedRoom) {
    2aea:	8c 81       	ldd	r24, Y+4	; 0x04
    2aec:	28 2f       	mov	r18, r24
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	38 87       	std	Y+8, r19	; 0x08
    2af2:	2f 83       	std	Y+7, r18	; 0x07
    2af4:	8f 81       	ldd	r24, Y+7	; 0x07
    2af6:	98 85       	ldd	r25, Y+8	; 0x08
    2af8:	81 30       	cpi	r24, 0x01	; 1
    2afa:	91 05       	cpc	r25, r1
    2afc:	31 f0       	breq	.+12     	; 0x2b0a <controlMotor+0x40>
    2afe:	2f 81       	ldd	r18, Y+7	; 0x07
    2b00:	38 85       	ldd	r19, Y+8	; 0x08
    2b02:	22 30       	cpi	r18, 0x02	; 2
    2b04:	31 05       	cpc	r19, r1
    2b06:	21 f0       	breq	.+8      	; 0x2b10 <controlMotor+0x46>
    2b08:	06 c0       	rjmp	.+12     	; 0x2b16 <controlMotor+0x4c>
        case 1:
            motorPin = PIN1; // Motor for room 1
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	8a 83       	std	Y+2, r24	; 0x02
    2b0e:	10 c0       	rjmp	.+32     	; 0x2b30 <controlMotor+0x66>
            break;
        case 2:
            motorPin = PIN6; // Motor for room 2
    2b10:	86 e0       	ldi	r24, 0x06	; 6
    2b12:	8a 83       	std	Y+2, r24	; 0x02
    2b14:	0d c0       	rjmp	.+26     	; 0x2b30 <controlMotor+0x66>
            break;
        default:
            USART_VoidSendString((u8*)"Invalid room number\n");
    2b16:	82 ee       	ldi	r24, 0xE2	; 226
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
                    USART_VoidSendString((u8*)"Invalid selection, try again\n");
                    break;
            }
        }
    }
}
    2b1e:	28 96       	adiw	r28, 0x08	; 8
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret
            return; // Exit if room number is invalid
    }

    while (1) {
        u8 key;
        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    2b30:	ce 01       	movw	r24, r28
    2b32:	03 96       	adiw	r24, 0x03	; 3
    2b34:	0e 94 9a 13 	call	0x2734	; 0x2734 <Keypad_enu_getKey>
    2b38:	81 30       	cpi	r24, 0x01	; 1
    2b3a:	d1 f7       	brne	.-12     	; 0x2b30 <controlMotor+0x66>
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b40:	b9 f3       	breq	.-18     	; 0x2b30 <controlMotor+0x66>
            switch (key) {
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	28 2f       	mov	r18, r24
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	3e 83       	std	Y+6, r19	; 0x06
    2b4a:	2d 83       	std	Y+5, r18	; 0x05
    2b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b50:	82 33       	cpi	r24, 0x32	; 50
    2b52:	91 05       	cpc	r25, r1
    2b54:	69 f1       	breq	.+90     	; 0x2bb0 <controlMotor+0xe6>
    2b56:	2d 81       	ldd	r18, Y+5	; 0x05
    2b58:	3e 81       	ldd	r19, Y+6	; 0x06
    2b5a:	23 34       	cpi	r18, 0x43	; 67
    2b5c:	31 05       	cpc	r19, r1
    2b5e:	31 f0       	breq	.+12     	; 0x2b6c <controlMotor+0xa2>
    2b60:	8d 81       	ldd	r24, Y+5	; 0x05
    2b62:	9e 81       	ldd	r25, Y+6	; 0x06
    2b64:	81 33       	cpi	r24, 0x31	; 49
    2b66:	91 05       	cpc	r25, r1
    2b68:	71 f0       	breq	.+28     	; 0x2b86 <controlMotor+0xbc>
    2b6a:	37 c0       	rjmp	.+110    	; 0x2bda <controlMotor+0x110>
                case 'C':
                	if(isClicked!=0)
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	88 23       	and	r24, r24
    2b70:	21 f0       	breq	.+8      	; 0x2b7a <controlMotor+0xb0>
                	DIO_toggle (PORT_A, motorPin);
    2b72:	81 e4       	ldi	r24, 0x41	; 65
    2b74:	6a 81       	ldd	r22, Y+2	; 0x02
    2b76:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_toggle>
                    showOptions(selectedRoom);
    2b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7c:	88 2f       	mov	r24, r24
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	0e 94 32 17 	call	0x2e64	; 0x2e64 <showOptions>
    2b84:	d5 cf       	rjmp	.-86     	; 0x2b30 <controlMotor+0x66>
                    break;
                case '1': // Motor ON
                	isClicked++;
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	8f 5f       	subi	r24, 0xFF	; 255
    2b8a:	89 83       	std	Y+1, r24	; 0x01
                    DIO_write(PORT_A, motorPin, HIGH);
    2b8c:	81 e4       	ldi	r24, 0x41	; 65
    2b8e:	6a 81       	ldd	r22, Y+2	; 0x02
    2b90:	41 e0       	ldi	r20, 0x01	; 1
    2b92:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_write>
                    displayMotorStatus(selectedRoom, "ON");
    2b96:	8c 81       	ldd	r24, Y+4	; 0x04
    2b98:	88 2f       	mov	r24, r24
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	27 ef       	ldi	r18, 0xF7	; 247
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	b9 01       	movw	r22, r18
    2ba2:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <displayMotorStatus>
                    USART_VoidSendString((u8*)"Motor ON\n");
    2ba6:	8a ef       	ldi	r24, 0xFA	; 250
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    2bae:	c0 cf       	rjmp	.-128    	; 0x2b30 <controlMotor+0x66>
                    break;
                case '2': // Motor OFF
                	isClicked++;
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	8f 5f       	subi	r24, 0xFF	; 255
    2bb4:	89 83       	std	Y+1, r24	; 0x01
                    DIO_write(PORT_A, motorPin, LOW);
    2bb6:	81 e4       	ldi	r24, 0x41	; 65
    2bb8:	6a 81       	ldd	r22, Y+2	; 0x02
    2bba:	40 e0       	ldi	r20, 0x00	; 0
    2bbc:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_write>
                    displayMotorStatus(selectedRoom, "OFF");
    2bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc2:	88 2f       	mov	r24, r24
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	24 e0       	ldi	r18, 0x04	; 4
    2bc8:	31 e0       	ldi	r19, 0x01	; 1
    2bca:	b9 01       	movw	r22, r18
    2bcc:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <displayMotorStatus>
                    USART_VoidSendString((u8*)"Motor OFF\n");
    2bd0:	88 e0       	ldi	r24, 0x08	; 8
    2bd2:	91 e0       	ldi	r25, 0x01	; 1
    2bd4:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    2bd8:	ab cf       	rjmp	.-170    	; 0x2b30 <controlMotor+0x66>
                    break;
                default:
                    USART_VoidSendString((u8*)"Invalid selection, try again\n");
    2bda:	83 e1       	ldi	r24, 0x13	; 19
    2bdc:	91 e0       	ldi	r25, 0x01	; 1
    2bde:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    2be2:	a6 cf       	rjmp	.-180    	; 0x2b30 <controlMotor+0x66>

00002be4 <displayMotorStatus>:
        }
    }
}

// Helper function to display motor status on LCD
void displayMotorStatus(u8 room, const char* status) {
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	00 d0       	rcall	.+0      	; 0x2bea <displayMotorStatus+0x6>
    2bea:	0f 92       	push	r0
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	89 83       	std	Y+1, r24	; 0x01
    2bf2:	7b 83       	std	Y+3, r23	; 0x03
    2bf4:	6a 83       	std	Y+2, r22	; 0x02
    LCD_8_bit_GoToPos(1, 0);
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	60 e0       	ldi	r22, 0x00	; 0
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_8_bit_GoToPos>
    LCD_8_bit_sendString("Motor ");
    2c02:	81 e3       	ldi	r24, 0x31	; 49
    2c04:	91 e0       	ldi	r25, 0x01	; 1
    2c06:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
    LCD_8_bit_sendString(status); // Display the status (ON/OFF)
    2c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c0e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
}
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	cf 91       	pop	r28
    2c1a:	df 91       	pop	r29
    2c1c:	08 95       	ret

00002c1e <controlTemp>:
#include "../main.h"
void controlTemp() {
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	6d 97       	sbiw	r28, 0x1d	; 29
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	f8 94       	cli
    2c2c:	de bf       	out	0x3e, r29	; 62
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	cd bf       	out	0x3d, r28	; 61


    DIO_write(PORT_A, PIN0, HIGH); // Assume sensor activation or an indicator LED is on PIN0
    2c32:	81 e4       	ldi	r24, 0x41	; 65
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	41 e0       	ldi	r20, 0x01	; 1
    2c38:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_write>
    DIO_write(PORT_A, PIN3, HIGH); // Assume another device is on PIN3
    2c3c:	81 e4       	ldi	r24, 0x41	; 65
    2c3e:	63 e0       	ldi	r22, 0x03	; 3
    2c40:	41 e0       	ldi	r20, 0x01	; 1
    2c42:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_write>

    u8 tempControl = 1;
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	8b 8b       	std	Y+19, r24	; 0x13
    2c4a:	c5 c0       	rjmp	.+394    	; 0x2dd6 <controlTemp+0x1b8>
    u16 analog_value;
	char buffer[10];

    while (tempControl) {
   	 analog_value = ADC_u16GetChannalResult(2);
    2c4c:	82 e0       	ldi	r24, 0x02	; 2
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <ADC_u16GetChannalResult>
    2c54:	9a 8b       	std	Y+18, r25	; 0x12
    2c56:	89 8b       	std	Y+17, r24	; 0x11
         itoa(analog_value, buffer, 10);
    2c58:	89 89       	ldd	r24, Y+17	; 0x11
    2c5a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c5c:	9e 01       	movw	r18, r28
    2c5e:	2c 5e       	subi	r18, 0xEC	; 236
    2c60:	3f 4f       	sbci	r19, 0xFF	; 255
    2c62:	b9 01       	movw	r22, r18
    2c64:	4a e0       	ldi	r20, 0x0A	; 10
    2c66:	50 e0       	ldi	r21, 0x00	; 0
    2c68:	0e 94 bf 1c 	call	0x397e	; 0x397e <itoa>

        LCD_8_bit_GoToPos(1, 0);
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	60 e0       	ldi	r22, 0x00	; 0
    2c72:	70 e0       	ldi	r23, 0x00	; 0
    2c74:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_8_bit_GoToPos>
        LCD_8_bit_sendString("Temp: ");
    2c78:	88 e3       	ldi	r24, 0x38	; 56
    2c7a:	91 e0       	ldi	r25, 0x01	; 1
    2c7c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
    	LCD_8_bit_sendString(buffer);
    2c80:	ce 01       	movw	r24, r28
    2c82:	44 96       	adiw	r24, 0x14	; 20
    2c84:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
        LCD_8_bit_sendString(" C");
    2c88:	8f e3       	ldi	r24, 0x3F	; 63
    2c8a:	91 e0       	ldi	r25, 0x01	; 1
    2c8c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	aa ef       	ldi	r26, 0xFA	; 250
    2c96:	b3 e4       	ldi	r27, 0x43	; 67
    2c98:	8b 87       	std	Y+11, r24	; 0x0b
    2c9a:	9c 87       	std	Y+12, r25	; 0x0c
    2c9c:	ad 87       	std	Y+13, r26	; 0x0d
    2c9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	4a ef       	ldi	r20, 0xFA	; 250
    2cae:	54 e4       	ldi	r21, 0x44	; 68
    2cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	8f 83       	std	Y+7, r24	; 0x07
    2cba:	98 87       	std	Y+8, r25	; 0x08
    2cbc:	a9 87       	std	Y+9, r26	; 0x09
    2cbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc2:	78 85       	ldd	r23, Y+8	; 0x08
    2cc4:	89 85       	ldd	r24, Y+9	; 0x09
    2cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	40 e8       	ldi	r20, 0x80	; 128
    2cce:	5f e3       	ldi	r21, 0x3F	; 63
    2cd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd4:	88 23       	and	r24, r24
    2cd6:	2c f4       	brge	.+10     	; 0x2ce2 <controlTemp+0xc4>
		__ticks = 1;
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	9e 83       	std	Y+6, r25	; 0x06
    2cde:	8d 83       	std	Y+5, r24	; 0x05
    2ce0:	3f c0       	rjmp	.+126    	; 0x2d60 <controlTemp+0x142>
	else if (__tmp > 65535)
    2ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce4:	78 85       	ldd	r23, Y+8	; 0x08
    2ce6:	89 85       	ldd	r24, Y+9	; 0x09
    2ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	3f ef       	ldi	r19, 0xFF	; 255
    2cee:	4f e7       	ldi	r20, 0x7F	; 127
    2cf0:	57 e4       	ldi	r21, 0x47	; 71
    2cf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cf6:	18 16       	cp	r1, r24
    2cf8:	4c f5       	brge	.+82     	; 0x2d4c <controlTemp+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	40 e2       	ldi	r20, 0x20	; 32
    2d08:	51 e4       	ldi	r21, 0x41	; 65
    2d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	bc 01       	movw	r22, r24
    2d14:	cd 01       	movw	r24, r26
    2d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	9e 83       	std	Y+6, r25	; 0x06
    2d20:	8d 83       	std	Y+5, r24	; 0x05
    2d22:	0f c0       	rjmp	.+30     	; 0x2d42 <controlTemp+0x124>
    2d24:	88 ec       	ldi	r24, 0xC8	; 200
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	9c 83       	std	Y+4, r25	; 0x04
    2d2a:	8b 83       	std	Y+3, r24	; 0x03
    2d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	f1 f7       	brne	.-4      	; 0x2d30 <controlTemp+0x112>
    2d34:	9c 83       	std	Y+4, r25	; 0x04
    2d36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d38:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	9e 83       	std	Y+6, r25	; 0x06
    2d40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d42:	8d 81       	ldd	r24, Y+5	; 0x05
    2d44:	9e 81       	ldd	r25, Y+6	; 0x06
    2d46:	00 97       	sbiw	r24, 0x00	; 0
    2d48:	69 f7       	brne	.-38     	; 0x2d24 <controlTemp+0x106>
    2d4a:	14 c0       	rjmp	.+40     	; 0x2d74 <controlTemp+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4e:	78 85       	ldd	r23, Y+8	; 0x08
    2d50:	89 85       	ldd	r24, Y+9	; 0x09
    2d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	9e 83       	std	Y+6, r25	; 0x06
    2d5e:	8d 83       	std	Y+5, r24	; 0x05
    2d60:	8d 81       	ldd	r24, Y+5	; 0x05
    2d62:	9e 81       	ldd	r25, Y+6	; 0x06
    2d64:	9a 83       	std	Y+2, r25	; 0x02
    2d66:	89 83       	std	Y+1, r24	; 0x01
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
    2d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	f1 f7       	brne	.-4      	; 0x2d6c <controlTemp+0x14e>
    2d70:	9a 83       	std	Y+2, r25	; 0x02
    2d72:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(500);
        int temperature = atoi(buffer);
    2d74:	ce 01       	movw	r24, r28
    2d76:	44 96       	adiw	r24, 0x14	; 20
    2d78:	0e 94 98 1c 	call	0x3930	; 0x3930 <atoi>
    2d7c:	98 8b       	std	Y+16, r25	; 0x10
    2d7e:	8f 87       	std	Y+15, r24	; 0x0f
        // Temperature control logic remains the same
        if (temperature > 30.0) {
    2d80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d82:	98 89       	ldd	r25, Y+16	; 0x10
    2d84:	aa 27       	eor	r26, r26
    2d86:	97 fd       	sbrc	r25, 7
    2d88:	a0 95       	com	r26
    2d8a:	ba 2f       	mov	r27, r26
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	bc 01       	movw	r22, r24
    2d9a:	cd 01       	movw	r24, r26
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 ef       	ldi	r20, 0xF0	; 240
    2da2:	51 e4       	ldi	r21, 0x41	; 65
    2da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2da8:	18 16       	cp	r1, r24
    2daa:	5c f4       	brge	.+22     	; 0x2dc2 <controlTemp+0x1a4>
            DIO_write(PORT_A, PIN0, HIGH); // Turn on buzzer
    2dac:	81 e4       	ldi	r24, 0x41	; 65
    2dae:	60 e0       	ldi	r22, 0x00	; 0
    2db0:	41 e0       	ldi	r20, 0x01	; 1
    2db2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_write>
            DIO_write(PORT_A, PIN3, HIGH); // Turn on lamp
    2db6:	81 e4       	ldi	r24, 0x41	; 65
    2db8:	63 e0       	ldi	r22, 0x03	; 3
    2dba:	41 e0       	ldi	r20, 0x01	; 1
    2dbc:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_write>
    2dc0:	0a c0       	rjmp	.+20     	; 0x2dd6 <controlTemp+0x1b8>
        } else {
            DIO_write(PORT_A, PIN0, LOW); // Turn off buzzer
    2dc2:	81 e4       	ldi	r24, 0x41	; 65
    2dc4:	60 e0       	ldi	r22, 0x00	; 0
    2dc6:	40 e0       	ldi	r20, 0x00	; 0
    2dc8:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_write>
            DIO_write(PORT_A, PIN3, LOW); // Turn off lamp
    2dcc:	81 e4       	ldi	r24, 0x41	; 65
    2dce:	63 e0       	ldi	r22, 0x03	; 3
    2dd0:	40 e0       	ldi	r20, 0x00	; 0
    2dd2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_write>

    u8 tempControl = 1;
    u16 analog_value;
	char buffer[10];

    while (tempControl) {
    2dd6:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd8:	88 23       	and	r24, r24
    2dda:	09 f0       	breq	.+2      	; 0x2dde <controlTemp+0x1c0>
    2ddc:	37 cf       	rjmp	.-402    	; 0x2c4c <controlTemp+0x2e>
            DIO_write(PORT_A, PIN3, LOW); // Turn off lamp
        }

        // Delay to allow the display to update
    }
}
    2dde:	6d 96       	adiw	r28, 0x1d	; 29
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	f8 94       	cli
    2de4:	de bf       	out	0x3e, r29	; 62
    2de6:	0f be       	out	0x3f, r0	; 63
    2de8:	cd bf       	out	0x3d, r28	; 61
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <showRoomSelection>:
#include "../main.h"
void showRoomSelection() {
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	00 d0       	rcall	.+0      	; 0x2df6 <showRoomSelection+0x6>
    2df6:	0f 92       	push	r0
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    USART_VoidSendString((u8*)"Select a room:\r\n");
    2dfc:	82 e4       	ldi	r24, 0x42	; 66
    2dfe:	91 e0       	ldi	r25, 0x01	; 1
    2e00:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    USART_VoidSendString((u8*)"1: Room one, ");
    2e04:	83 e5       	ldi	r24, 0x53	; 83
    2e06:	91 e0       	ldi	r25, 0x01	; 1
    2e08:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    USART_VoidSendString((u8*)"2: Room two\r\n");
    2e0c:	81 e6       	ldi	r24, 0x61	; 97
    2e0e:	91 e0       	ldi	r25, 0x01	; 1
    2e10:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>

    while (1) {
        u8 key;
        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    2e14:	ce 01       	movw	r24, r28
    2e16:	01 96       	adiw	r24, 0x01	; 1
    2e18:	0e 94 9a 13 	call	0x2734	; 0x2734 <Keypad_enu_getKey>
    2e1c:	81 30       	cpi	r24, 0x01	; 1
    2e1e:	d1 f7       	brne	.-12     	; 0x2e14 <showRoomSelection+0x24>
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	8f 3f       	cpi	r24, 0xFF	; 255
    2e24:	b9 f3       	breq	.-18     	; 0x2e14 <showRoomSelection+0x24>
            switch (key) {
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	28 2f       	mov	r18, r24
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	3b 83       	std	Y+3, r19	; 0x03
    2e2e:	2a 83       	std	Y+2, r18	; 0x02
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	9b 81       	ldd	r25, Y+3	; 0x03
    2e34:	81 33       	cpi	r24, 0x31	; 49
    2e36:	91 05       	cpc	r25, r1
    2e38:	31 f0       	breq	.+12     	; 0x2e46 <showRoomSelection+0x56>
    2e3a:	2a 81       	ldd	r18, Y+2	; 0x02
    2e3c:	3b 81       	ldd	r19, Y+3	; 0x03
    2e3e:	22 33       	cpi	r18, 0x32	; 50
    2e40:	31 05       	cpc	r19, r1
    2e42:	31 f0       	breq	.+12     	; 0x2e50 <showRoomSelection+0x60>
    2e44:	0a c0       	rjmp	.+20     	; 0x2e5a <showRoomSelection+0x6a>
                case '1':
                    showOptions(1); // Room 1 selected
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	0e 94 32 17 	call	0x2e64	; 0x2e64 <showOptions>
    2e4e:	e2 cf       	rjmp	.-60     	; 0x2e14 <showRoomSelection+0x24>
                    break;
                case '2':
                    showOptions(2); // Room 2 selected
    2e50:	82 e0       	ldi	r24, 0x02	; 2
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	0e 94 32 17 	call	0x2e64	; 0x2e64 <showOptions>
    2e58:	dd cf       	rjmp	.-70     	; 0x2e14 <showRoomSelection+0x24>
                    break;
                default:
                    USART_VoidSendString((u8*)"Invalid selection, try again\r\n");
    2e5a:	8f e6       	ldi	r24, 0x6F	; 111
    2e5c:	91 e0       	ldi	r25, 0x01	; 1
    2e5e:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    2e62:	d8 cf       	rjmp	.-80     	; 0x2e14 <showRoomSelection+0x24>

00002e64 <showOptions>:
            }
        }
    }
}

void showOptions(u8 selectedRoom) {
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	00 d0       	rcall	.+0      	; 0x2e6a <showOptions+0x6>
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <showOptions+0x8>
    2e6c:	00 d0       	rcall	.+0      	; 0x2e6e <showOptions+0xa>
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
    2e72:	8c 83       	std	Y+4, r24	; 0x04
    displayRoomSelection(selectedRoom); // Display room on LCD and USART
    2e74:	8c 81       	ldd	r24, Y+4	; 0x04
    2e76:	88 2f       	mov	r24, r24
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <displayRoomSelection>

    USART_VoidSendString((u8*)"1:Temp, 2:Motors,");
    2e7e:	8e e8       	ldi	r24, 0x8E	; 142
    2e80:	91 e0       	ldi	r25, 0x01	; 1
    2e82:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    USART_VoidSendString((u8*)" 3:LEDs, 4:back,");
    2e86:	80 ea       	ldi	r24, 0xA0	; 160
    2e88:	91 e0       	ldi	r25, 0x01	; 1
    2e8a:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    USART_VoidSendString((u8*)" 5:CLR\r\n");
    2e8e:	81 eb       	ldi	r24, 0xB1	; 177
    2e90:	91 e0       	ldi	r25, 0x01	; 1
    2e92:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    u8 isClicked =0;
    2e96:	1a 82       	std	Y+2, r1	; 0x02
    u8 isLoggedOut = 0;
    2e98:	19 82       	std	Y+1, r1	; 0x01
    2e9a:	4d c0       	rjmp	.+154    	; 0x2f36 <showOptions+0xd2>

    while (!isLoggedOut) {
        u8 key;
        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    2e9c:	ce 01       	movw	r24, r28
    2e9e:	03 96       	adiw	r24, 0x03	; 3
    2ea0:	0e 94 9a 13 	call	0x2734	; 0x2734 <Keypad_enu_getKey>
    2ea4:	81 30       	cpi	r24, 0x01	; 1
    2ea6:	09 f0       	breq	.+2      	; 0x2eaa <showOptions+0x46>
    2ea8:	46 c0       	rjmp	.+140    	; 0x2f36 <showOptions+0xd2>
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	8f 3f       	cpi	r24, 0xFF	; 255
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <showOptions+0x4e>
    2eb0:	42 c0       	rjmp	.+132    	; 0x2f36 <showOptions+0xd2>
            switch (key) {
    2eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb4:	28 2f       	mov	r18, r24
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	3e 83       	std	Y+6, r19	; 0x06
    2eba:	2d 83       	std	Y+5, r18	; 0x05
    2ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec0:	83 33       	cpi	r24, 0x33	; 51
    2ec2:	91 05       	cpc	r25, r1
    2ec4:	49 f1       	breq	.+82     	; 0x2f18 <showOptions+0xb4>
    2ec6:	2d 81       	ldd	r18, Y+5	; 0x05
    2ec8:	3e 81       	ldd	r19, Y+6	; 0x06
    2eca:	24 33       	cpi	r18, 0x34	; 52
    2ecc:	31 05       	cpc	r19, r1
    2ece:	5c f4       	brge	.+22     	; 0x2ee6 <showOptions+0x82>
    2ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed4:	81 33       	cpi	r24, 0x31	; 49
    2ed6:	91 05       	cpc	r25, r1
    2ed8:	b1 f0       	breq	.+44     	; 0x2f06 <showOptions+0xa2>
    2eda:	2d 81       	ldd	r18, Y+5	; 0x05
    2edc:	3e 81       	ldd	r19, Y+6	; 0x06
    2ede:	22 33       	cpi	r18, 0x32	; 50
    2ee0:	31 05       	cpc	r19, r1
    2ee2:	a1 f0       	breq	.+40     	; 0x2f0c <showOptions+0xa8>
    2ee4:	24 c0       	rjmp	.+72     	; 0x2f2e <showOptions+0xca>
    2ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eea:	84 33       	cpi	r24, 0x34	; 52
    2eec:	91 05       	cpc	r25, r1
    2eee:	d1 f0       	breq	.+52     	; 0x2f24 <showOptions+0xc0>
    2ef0:	2d 81       	ldd	r18, Y+5	; 0x05
    2ef2:	3e 81       	ldd	r19, Y+6	; 0x06
    2ef4:	23 34       	cpi	r18, 0x43	; 67
    2ef6:	31 05       	cpc	r19, r1
    2ef8:	d1 f4       	brne	.+52     	; 0x2f2e <showOptions+0xca>
                case 'C':
                    LCD_CLR();
    2efa:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_CLR>
                    showOptions(selectedRoom); // Clear and show options again
    2efe:	8c 81       	ldd	r24, Y+4	; 0x04
    2f00:	0e 94 32 17 	call	0x2e64	; 0x2e64 <showOptions>
    2f04:	18 c0       	rjmp	.+48     	; 0x2f36 <showOptions+0xd2>
                    break;
                case '1':
                    controlTemp();
    2f06:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <controlTemp>
    2f0a:	15 c0       	rjmp	.+42     	; 0x2f36 <showOptions+0xd2>
                    break;
                case '2':
                    controlMotor(selectedRoom);
    2f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f0e:	88 2f       	mov	r24, r24
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	0e 94 65 15 	call	0x2aca	; 0x2aca <controlMotor>
    2f16:	0f c0       	rjmp	.+30     	; 0x2f36 <showOptions+0xd2>
                    break;
                case '3':
                    controlLED(selectedRoom);
    2f18:	8c 81       	ldd	r24, Y+4	; 0x04
    2f1a:	88 2f       	mov	r24, r24
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	0e 94 aa 14 	call	0x2954	; 0x2954 <controlLED>
    2f22:	09 c0       	rjmp	.+18     	; 0x2f36 <showOptions+0xd2>
                    break;
                case '4':
                	showRoomSelection();
    2f24:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <showRoomSelection>
                    isLoggedOut = 1;
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	89 83       	std	Y+1, r24	; 0x01
    2f2c:	04 c0       	rjmp	.+8      	; 0x2f36 <showOptions+0xd2>
                    break;

                default:
                    USART_VoidSendString((u8*)"Invalid selection, try again\r\n");
    2f2e:	8f e6       	ldi	r24, 0x6F	; 111
    2f30:	91 e0       	ldi	r25, 0x01	; 1
    2f32:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    USART_VoidSendString((u8*)" 3:LEDs, 4:back,");
    USART_VoidSendString((u8*)" 5:CLR\r\n");
    u8 isClicked =0;
    u8 isLoggedOut = 0;

    while (!isLoggedOut) {
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	88 23       	and	r24, r24
    2f3a:	09 f4       	brne	.+2      	; 0x2f3e <showOptions+0xda>
    2f3c:	af cf       	rjmp	.-162    	; 0x2e9c <showOptions+0x38>
                    USART_VoidSendString((u8*)"Invalid selection, try again\r\n");
                    break;
            }
        }
    }
}
    2f3e:	26 96       	adiw	r28, 0x06	; 6
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	08 95       	ret

00002f50 <displayRoomSelection>:

// Helper function to display room selection
void displayRoomSelection(u8 selectedRoom) {
    2f50:	df 93       	push	r29
    2f52:	cf 93       	push	r28
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
    2f58:	2b 97       	sbiw	r28, 0x0b	; 11
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	f8 94       	cli
    2f5e:	de bf       	out	0x3e, r29	; 62
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	cd bf       	out	0x3d, r28	; 61
    2f64:	8b 87       	std	Y+11, r24	; 0x0b
    // Clear the LCD display
    LCD_CLR();
    2f66:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_CLR>

    // Convert the room number to a string
    char str[10];
    convertNumberToString(selectedRoom, str);
    2f6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f6c:	88 2f       	mov	r24, r24
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	9e 01       	movw	r18, r28
    2f72:	2f 5f       	subi	r18, 0xFF	; 255
    2f74:	3f 4f       	sbci	r19, 0xFF	; 255
    2f76:	b9 01       	movw	r22, r18
    2f78:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <convertNumberToString>

    // Display the room selection on the LCD
    LCD_8_bit_sendString("Room ");
    2f7c:	8a eb       	ldi	r24, 0xBA	; 186
    2f7e:	91 e0       	ldi	r25, 0x01	; 1
    2f80:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
    LCD_8_bit_sendString(str);
    2f84:	ce 01       	movw	r24, r28
    2f86:	01 96       	adiw	r24, 0x01	; 1
    2f88:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>

    // Send the room selection via USART
    USART_VoidSendString((u8*)"Room ");
    2f8c:	8a eb       	ldi	r24, 0xBA	; 186
    2f8e:	91 e0       	ldi	r25, 0x01	; 1
    2f90:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    USART_VoidSendString((u8*)str);
    2f94:	ce 01       	movw	r24, r28
    2f96:	01 96       	adiw	r24, 0x01	; 1
    2f98:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    USART_VoidSendString((u8*)" Selected\r\n");
    2f9c:	80 ec       	ldi	r24, 0xC0	; 192
    2f9e:	91 e0       	ldi	r25, 0x01	; 1
    2fa0:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
}
    2fa4:	2b 96       	adiw	r28, 0x0b	; 11
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	f8 94       	cli
    2faa:	de bf       	out	0x3e, r29	; 62
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	cd bf       	out	0x3d, r28	; 61
    2fb0:	cf 91       	pop	r28
    2fb2:	df 91       	pop	r29
    2fb4:	08 95       	ret

00002fb6 <convertNumberToString>:

// Helper function to convert a number to a string
void convertNumberToString(u8 number, char* buffer) {
    2fb6:	df 93       	push	r29
    2fb8:	cf 93       	push	r28
    2fba:	00 d0       	rcall	.+0      	; 0x2fbc <convertNumberToString+0x6>
    2fbc:	0f 92       	push	r0
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	89 83       	std	Y+1, r24	; 0x01
    2fc4:	7b 83       	std	Y+3, r23	; 0x03
    2fc6:	6a 83       	std	Y+2, r22	; 0x02
    sprintf(buffer, "%d", number);
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	28 2f       	mov	r18, r24
    2fcc:	30 e0       	ldi	r19, 0x00	; 0
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <convertNumberToString+0x1a>
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <convertNumberToString+0x1c>
    2fd2:	00 d0       	rcall	.+0      	; 0x2fd4 <convertNumberToString+0x1e>
    2fd4:	ed b7       	in	r30, 0x3d	; 61
    2fd6:	fe b7       	in	r31, 0x3e	; 62
    2fd8:	31 96       	adiw	r30, 0x01	; 1
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	80 83       	st	Z, r24
    2fe2:	8c ec       	ldi	r24, 0xCC	; 204
    2fe4:	91 e0       	ldi	r25, 0x01	; 1
    2fe6:	93 83       	std	Z+3, r25	; 0x03
    2fe8:	82 83       	std	Z+2, r24	; 0x02
    2fea:	35 83       	std	Z+5, r19	; 0x05
    2fec:	24 83       	std	Z+4, r18	; 0x04
    2fee:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <sprintf>
    2ff2:	8d b7       	in	r24, 0x3d	; 61
    2ff4:	9e b7       	in	r25, 0x3e	; 62
    2ff6:	06 96       	adiw	r24, 0x06	; 6
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	f8 94       	cli
    2ffc:	9e bf       	out	0x3e, r25	; 62
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	8d bf       	out	0x3d, r24	; 61
}
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	0f 90       	pop	r0
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	08 95       	ret

0000300e <main>:

u8 numberOfLogins = 0;
char id[ID_LENGTH + 1] = "";
char password[PASSWORD_LENGTH + 1] = "";

int main() {
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    initializeSystem();
    3016:	0e 94 41 18 	call	0x3082	; 0x3082 <initializeSystem>
    showRoomSelection();
    301a:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <showRoomSelection>
    return 0;
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	90 e0       	ldi	r25, 0x00	; 0
}
    3022:	cf 91       	pop	r28
    3024:	df 91       	pop	r29
    3026:	08 95       	ret

00003028 <myAPP>:



void myAPP(){
    3028:	df 93       	push	r29
    302a:	cf 93       	push	r28
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
	if (numberOfLogins >= MAX_LOGIN_ATTEMPTS) {
    3030:	80 91 68 03 	lds	r24, 0x0368
    3034:	83 30       	cpi	r24, 0x03	; 3
    3036:	18 f0       	brcs	.+6      	; 0x303e <myAPP+0x16>
	    while(1){
	    	 displayMaxLoginAttemptsReached();
    3038:	0e 94 45 1b 	call	0x368a	; 0x368a <displayMaxLoginAttemptsReached>
    303c:	fd cf       	rjmp	.-6      	; 0x3038 <myAPP+0x10>
	    }
	} else{
         displayWelcomeMessage();
    303e:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <displayWelcomeMessage>
         getUserInput(id, ID_LENGTH, "Enter ID", 0);
    3042:	88 e4       	ldi	r24, 0x48	; 72
    3044:	93 e0       	ldi	r25, 0x03	; 3
    3046:	2f ec       	ldi	r18, 0xCF	; 207
    3048:	31 e0       	ldi	r19, 0x01	; 1
    304a:	63 e0       	ldi	r22, 0x03	; 3
    304c:	70 e0       	ldi	r23, 0x00	; 0
    304e:	a9 01       	movw	r20, r18
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	0e 94 64 18 	call	0x30c8	; 0x30c8 <getUserInput>
         getUserInput(password, PASSWORD_LENGTH, "Enter Password", 1);
    3058:	8c e4       	ldi	r24, 0x4C	; 76
    305a:	93 e0       	ldi	r25, 0x03	; 3
    305c:	28 ed       	ldi	r18, 0xD8	; 216
    305e:	31 e0       	ldi	r19, 0x01	; 1
    3060:	63 e0       	ldi	r22, 0x03	; 3
    3062:	70 e0       	ldi	r23, 0x00	; 0
    3064:	a9 01       	movw	r20, r18
    3066:	21 e0       	ldi	r18, 0x01	; 1
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	0e 94 64 18 	call	0x30c8	; 0x30c8 <getUserInput>
         checkCredentials(id, password);}
    306e:	88 e4       	ldi	r24, 0x48	; 72
    3070:	93 e0       	ldi	r25, 0x03	; 3
    3072:	2c e4       	ldi	r18, 0x4C	; 76
    3074:	33 e0       	ldi	r19, 0x03	; 3
    3076:	b9 01       	movw	r22, r18
    3078:	0e 94 9f 19 	call	0x333e	; 0x333e <checkCredentials>
}
    307c:	cf 91       	pop	r28
    307e:	df 91       	pop	r29
    3080:	08 95       	ret

00003082 <initializeSystem>:

void initializeSystem(void) {
    3082:	df 93       	push	r29
    3084:	cf 93       	push	r28
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    LCD_8_bit_init();
    308a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <LCD_8_bit_init>
    Keypad_enu_Init();
    308e:	0e 94 58 13 	call	0x26b0	; 0x26b0 <Keypad_enu_Init>
    USART_voidINIT();
    3092:	0e 94 50 06 	call	0xca0	; 0xca0 <USART_voidINIT>
    // Initialize other peripherals
   DIO_init(PORT_A, PIN0, OUT);
    3096:	81 e4       	ldi	r24, 0x41	; 65
    3098:	60 e0       	ldi	r22, 0x00	; 0
    309a:	41 e0       	ldi	r20, 0x01	; 1
    309c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <DIO_init>
   DIO_init(PORT_A, PIN1, OUT);
    30a0:	81 e4       	ldi	r24, 0x41	; 65
    30a2:	61 e0       	ldi	r22, 0x01	; 1
    30a4:	41 e0       	ldi	r20, 0x01	; 1
    30a6:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <DIO_init>
   DIO_init(PORT_A, PIN5, OUT);
    30aa:	81 e4       	ldi	r24, 0x41	; 65
    30ac:	65 e0       	ldi	r22, 0x05	; 5
    30ae:	41 e0       	ldi	r20, 0x01	; 1
    30b0:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <DIO_init>
   DIO_init(PORT_A, PIN6, OUT);
    30b4:	81 e4       	ldi	r24, 0x41	; 65
    30b6:	66 e0       	ldi	r22, 0x06	; 6
    30b8:	41 e0       	ldi	r20, 0x01	; 1
    30ba:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <DIO_init>
     ADC_voidInit();
    30be:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <ADC_voidInit>
}
    30c2:	cf 91       	pop	r28
    30c4:	df 91       	pop	r29
    30c6:	08 95       	ret

000030c8 <getUserInput>:

void getUserInput(char *buffer, u8 maxLength, const char *promptMessage, u8 maskInput) {
    30c8:	df 93       	push	r29
    30ca:	cf 93       	push	r28
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	a5 97       	sbiw	r28, 0x25	; 37
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	98 a3       	std	Y+32, r25	; 0x20
    30de:	8f 8f       	std	Y+31, r24	; 0x1f
    30e0:	69 a3       	std	Y+33, r22	; 0x21
    30e2:	5b a3       	std	Y+35, r21	; 0x23
    30e4:	4a a3       	std	Y+34, r20	; 0x22
    30e6:	2c a3       	std	Y+36, r18	; 0x24
    u8 key;
    u8 counter = 0;
    30e8:	1d 8e       	std	Y+29, r1	; 0x1d

    LCD_8_bit_sendString(promptMessage);
    30ea:	8a a1       	ldd	r24, Y+34	; 0x22
    30ec:	9b a1       	ldd	r25, Y+35	; 0x23
    30ee:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	a8 ec       	ldi	r26, 0xC8	; 200
    30f8:	b2 e4       	ldi	r27, 0x42	; 66
    30fa:	89 8f       	std	Y+25, r24	; 0x19
    30fc:	9a 8f       	std	Y+26, r25	; 0x1a
    30fe:	ab 8f       	std	Y+27, r26	; 0x1b
    3100:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3102:	69 8d       	ldd	r22, Y+25	; 0x19
    3104:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3106:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3108:	9c 8d       	ldd	r25, Y+28	; 0x1c
    310a:	20 e0       	ldi	r18, 0x00	; 0
    310c:	30 e0       	ldi	r19, 0x00	; 0
    310e:	4a ef       	ldi	r20, 0xFA	; 250
    3110:	54 e4       	ldi	r21, 0x44	; 68
    3112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3116:	dc 01       	movw	r26, r24
    3118:	cb 01       	movw	r24, r22
    311a:	8d 8b       	std	Y+21, r24	; 0x15
    311c:	9e 8b       	std	Y+22, r25	; 0x16
    311e:	af 8b       	std	Y+23, r26	; 0x17
    3120:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3122:	6d 89       	ldd	r22, Y+21	; 0x15
    3124:	7e 89       	ldd	r23, Y+22	; 0x16
    3126:	8f 89       	ldd	r24, Y+23	; 0x17
    3128:	98 8d       	ldd	r25, Y+24	; 0x18
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	40 e8       	ldi	r20, 0x80	; 128
    3130:	5f e3       	ldi	r21, 0x3F	; 63
    3132:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3136:	88 23       	and	r24, r24
    3138:	2c f4       	brge	.+10     	; 0x3144 <getUserInput+0x7c>
		__ticks = 1;
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	9c 8b       	std	Y+20, r25	; 0x14
    3140:	8b 8b       	std	Y+19, r24	; 0x13
    3142:	3f c0       	rjmp	.+126    	; 0x31c2 <getUserInput+0xfa>
	else if (__tmp > 65535)
    3144:	6d 89       	ldd	r22, Y+21	; 0x15
    3146:	7e 89       	ldd	r23, Y+22	; 0x16
    3148:	8f 89       	ldd	r24, Y+23	; 0x17
    314a:	98 8d       	ldd	r25, Y+24	; 0x18
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	3f ef       	ldi	r19, 0xFF	; 255
    3150:	4f e7       	ldi	r20, 0x7F	; 127
    3152:	57 e4       	ldi	r21, 0x47	; 71
    3154:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3158:	18 16       	cp	r1, r24
    315a:	4c f5       	brge	.+82     	; 0x31ae <getUserInput+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    315c:	69 8d       	ldd	r22, Y+25	; 0x19
    315e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e2       	ldi	r20, 0x20	; 32
    316a:	51 e4       	ldi	r21, 0x41	; 65
    316c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	bc 01       	movw	r22, r24
    3176:	cd 01       	movw	r24, r26
    3178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	9c 8b       	std	Y+20, r25	; 0x14
    3182:	8b 8b       	std	Y+19, r24	; 0x13
    3184:	0f c0       	rjmp	.+30     	; 0x31a4 <getUserInput+0xdc>
    3186:	88 ec       	ldi	r24, 0xC8	; 200
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	9a 8b       	std	Y+18, r25	; 0x12
    318c:	89 8b       	std	Y+17, r24	; 0x11
    318e:	89 89       	ldd	r24, Y+17	; 0x11
    3190:	9a 89       	ldd	r25, Y+18	; 0x12
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	f1 f7       	brne	.-4      	; 0x3192 <getUserInput+0xca>
    3196:	9a 8b       	std	Y+18, r25	; 0x12
    3198:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    319a:	8b 89       	ldd	r24, Y+19	; 0x13
    319c:	9c 89       	ldd	r25, Y+20	; 0x14
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	9c 8b       	std	Y+20, r25	; 0x14
    31a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a4:	8b 89       	ldd	r24, Y+19	; 0x13
    31a6:	9c 89       	ldd	r25, Y+20	; 0x14
    31a8:	00 97       	sbiw	r24, 0x00	; 0
    31aa:	69 f7       	brne	.-38     	; 0x3186 <getUserInput+0xbe>
    31ac:	3e c0       	rjmp	.+124    	; 0x322a <getUserInput+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ae:	6d 89       	ldd	r22, Y+21	; 0x15
    31b0:	7e 89       	ldd	r23, Y+22	; 0x16
    31b2:	8f 89       	ldd	r24, Y+23	; 0x17
    31b4:	98 8d       	ldd	r25, Y+24	; 0x18
    31b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ba:	dc 01       	movw	r26, r24
    31bc:	cb 01       	movw	r24, r22
    31be:	9c 8b       	std	Y+20, r25	; 0x14
    31c0:	8b 8b       	std	Y+19, r24	; 0x13
    31c2:	8b 89       	ldd	r24, Y+19	; 0x13
    31c4:	9c 89       	ldd	r25, Y+20	; 0x14
    31c6:	98 8b       	std	Y+16, r25	; 0x10
    31c8:	8f 87       	std	Y+15, r24	; 0x0f
    31ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    31cc:	98 89       	ldd	r25, Y+16	; 0x10
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	f1 f7       	brne	.-4      	; 0x31ce <getUserInput+0x106>
    31d2:	98 8b       	std	Y+16, r25	; 0x10
    31d4:	8f 87       	std	Y+15, r24	; 0x0f
    31d6:	29 c0       	rjmp	.+82     	; 0x322a <getUserInput+0x162>
    _delay_ms(100);

    while (counter < maxLength) {
        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    31d8:	ce 01       	movw	r24, r28
    31da:	4e 96       	adiw	r24, 0x1e	; 30
    31dc:	0e 94 9a 13 	call	0x2734	; 0x2734 <Keypad_enu_getKey>
    31e0:	81 30       	cpi	r24, 0x01	; 1
    31e2:	19 f5       	brne	.+70     	; 0x322a <getUserInput+0x162>
    31e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31e6:	8f 3f       	cpi	r24, 0xFF	; 255
    31e8:	01 f1       	breq	.+64     	; 0x322a <getUserInput+0x162>
            LCD_8_bit_GoToPos(1, counter);
    31ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31ec:	28 2f       	mov	r18, r24
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	b9 01       	movw	r22, r18
    31f6:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_8_bit_GoToPos>
            LCD_8_bit_sendChar(maskInput ? '*' : key);
    31fa:	8c a1       	ldd	r24, Y+36	; 0x24
    31fc:	88 23       	and	r24, r24
    31fe:	19 f4       	brne	.+6      	; 0x3206 <getUserInput+0x13e>
    3200:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3202:	8d a3       	std	Y+37, r24	; 0x25
    3204:	02 c0       	rjmp	.+4      	; 0x320a <getUserInput+0x142>
    3206:	8a e2       	ldi	r24, 0x2A	; 42
    3208:	8d a3       	std	Y+37, r24	; 0x25
    320a:	8d a1       	ldd	r24, Y+37	; 0x25
    320c:	0e 94 b9 11 	call	0x2372	; 0x2372 <LCD_8_bit_sendChar>
            buffer[counter] = key;
    3210:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3212:	28 2f       	mov	r18, r24
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3218:	98 a1       	ldd	r25, Y+32	; 0x20
    321a:	fc 01       	movw	r30, r24
    321c:	e2 0f       	add	r30, r18
    321e:	f3 1f       	adc	r31, r19
    3220:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3222:	80 83       	st	Z, r24
            counter++;
    3224:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3226:	8f 5f       	subi	r24, 0xFF	; 255
    3228:	8d 8f       	std	Y+29, r24	; 0x1d
    u8 counter = 0;

    LCD_8_bit_sendString(promptMessage);
    _delay_ms(100);

    while (counter < maxLength) {
    322a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    322c:	89 a1       	ldd	r24, Y+33	; 0x21
    322e:	98 17       	cp	r25, r24
    3230:	98 f2       	brcs	.-90     	; 0x31d8 <getUserInput+0x110>
            buffer[counter] = key;
            counter++;
        }
    }

    buffer[counter] = '\0';
    3232:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3234:	28 2f       	mov	r18, r24
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	8f 8d       	ldd	r24, Y+31	; 0x1f
    323a:	98 a1       	ldd	r25, Y+32	; 0x20
    323c:	fc 01       	movw	r30, r24
    323e:	e2 0f       	add	r30, r18
    3240:	f3 1f       	adc	r31, r19
    3242:	10 82       	st	Z, r1
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	a8 e4       	ldi	r26, 0x48	; 72
    324a:	b2 e4       	ldi	r27, 0x42	; 66
    324c:	8b 87       	std	Y+11, r24	; 0x0b
    324e:	9c 87       	std	Y+12, r25	; 0x0c
    3250:	ad 87       	std	Y+13, r26	; 0x0d
    3252:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3254:	6b 85       	ldd	r22, Y+11	; 0x0b
    3256:	7c 85       	ldd	r23, Y+12	; 0x0c
    3258:	8d 85       	ldd	r24, Y+13	; 0x0d
    325a:	9e 85       	ldd	r25, Y+14	; 0x0e
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	4a ef       	ldi	r20, 0xFA	; 250
    3262:	54 e4       	ldi	r21, 0x44	; 68
    3264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	8f 83       	std	Y+7, r24	; 0x07
    326e:	98 87       	std	Y+8, r25	; 0x08
    3270:	a9 87       	std	Y+9, r26	; 0x09
    3272:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3274:	6f 81       	ldd	r22, Y+7	; 0x07
    3276:	78 85       	ldd	r23, Y+8	; 0x08
    3278:	89 85       	ldd	r24, Y+9	; 0x09
    327a:	9a 85       	ldd	r25, Y+10	; 0x0a
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	40 e8       	ldi	r20, 0x80	; 128
    3282:	5f e3       	ldi	r21, 0x3F	; 63
    3284:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3288:	88 23       	and	r24, r24
    328a:	2c f4       	brge	.+10     	; 0x3296 <getUserInput+0x1ce>
		__ticks = 1;
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	9e 83       	std	Y+6, r25	; 0x06
    3292:	8d 83       	std	Y+5, r24	; 0x05
    3294:	3f c0       	rjmp	.+126    	; 0x3314 <getUserInput+0x24c>
	else if (__tmp > 65535)
    3296:	6f 81       	ldd	r22, Y+7	; 0x07
    3298:	78 85       	ldd	r23, Y+8	; 0x08
    329a:	89 85       	ldd	r24, Y+9	; 0x09
    329c:	9a 85       	ldd	r25, Y+10	; 0x0a
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	3f ef       	ldi	r19, 0xFF	; 255
    32a2:	4f e7       	ldi	r20, 0x7F	; 127
    32a4:	57 e4       	ldi	r21, 0x47	; 71
    32a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32aa:	18 16       	cp	r1, r24
    32ac:	4c f5       	brge	.+82     	; 0x3300 <getUserInput+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    32b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    32b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	40 e2       	ldi	r20, 0x20	; 32
    32bc:	51 e4       	ldi	r21, 0x41	; 65
    32be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	bc 01       	movw	r22, r24
    32c8:	cd 01       	movw	r24, r26
    32ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	9e 83       	std	Y+6, r25	; 0x06
    32d4:	8d 83       	std	Y+5, r24	; 0x05
    32d6:	0f c0       	rjmp	.+30     	; 0x32f6 <getUserInput+0x22e>
    32d8:	88 ec       	ldi	r24, 0xC8	; 200
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	9c 83       	std	Y+4, r25	; 0x04
    32de:	8b 83       	std	Y+3, r24	; 0x03
    32e0:	8b 81       	ldd	r24, Y+3	; 0x03
    32e2:	9c 81       	ldd	r25, Y+4	; 0x04
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	f1 f7       	brne	.-4      	; 0x32e4 <getUserInput+0x21c>
    32e8:	9c 83       	std	Y+4, r25	; 0x04
    32ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ec:	8d 81       	ldd	r24, Y+5	; 0x05
    32ee:	9e 81       	ldd	r25, Y+6	; 0x06
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	9e 83       	std	Y+6, r25	; 0x06
    32f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f6:	8d 81       	ldd	r24, Y+5	; 0x05
    32f8:	9e 81       	ldd	r25, Y+6	; 0x06
    32fa:	00 97       	sbiw	r24, 0x00	; 0
    32fc:	69 f7       	brne	.-38     	; 0x32d8 <getUserInput+0x210>
    32fe:	14 c0       	rjmp	.+40     	; 0x3328 <getUserInput+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3300:	6f 81       	ldd	r22, Y+7	; 0x07
    3302:	78 85       	ldd	r23, Y+8	; 0x08
    3304:	89 85       	ldd	r24, Y+9	; 0x09
    3306:	9a 85       	ldd	r25, Y+10	; 0x0a
    3308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	9e 83       	std	Y+6, r25	; 0x06
    3312:	8d 83       	std	Y+5, r24	; 0x05
    3314:	8d 81       	ldd	r24, Y+5	; 0x05
    3316:	9e 81       	ldd	r25, Y+6	; 0x06
    3318:	9a 83       	std	Y+2, r25	; 0x02
    331a:	89 83       	std	Y+1, r24	; 0x01
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	9a 81       	ldd	r25, Y+2	; 0x02
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	f1 f7       	brne	.-4      	; 0x3320 <getUserInput+0x258>
    3324:	9a 83       	std	Y+2, r25	; 0x02
    3326:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(50);
    LCD_CLR();
    3328:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_CLR>
}
    332c:	a5 96       	adiw	r28, 0x25	; 37
    332e:	0f b6       	in	r0, 0x3f	; 63
    3330:	f8 94       	cli
    3332:	de bf       	out	0x3e, r29	; 62
    3334:	0f be       	out	0x3f, r0	; 63
    3336:	cd bf       	out	0x3d, r28	; 61
    3338:	cf 91       	pop	r28
    333a:	df 91       	pop	r29
    333c:	08 95       	ret

0000333e <checkCredentials>:

void checkCredentials(const char *id, const char *password) {
    333e:	df 93       	push	r29
    3340:	cf 93       	push	r28
    3342:	cd b7       	in	r28, 0x3d	; 61
    3344:	de b7       	in	r29, 0x3e	; 62
    3346:	6c 97       	sbiw	r28, 0x1c	; 28
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	f8 94       	cli
    334c:	de bf       	out	0x3e, r29	; 62
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	cd bf       	out	0x3d, r28	; 61
    3352:	9a 8f       	std	Y+26, r25	; 0x1a
    3354:	89 8f       	std	Y+25, r24	; 0x19
    3356:	7c 8f       	std	Y+28, r23	; 0x1c
    3358:	6b 8f       	std	Y+27, r22	; 0x1b
    LCD_CLR();
    335a:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_CLR>

    const char *idArray[] = ID_ARRAY;
    335e:	87 ee       	ldi	r24, 0xE7	; 231
    3360:	91 e0       	ldi	r25, 0x01	; 1
    3362:	9a 8b       	std	Y+18, r25	; 0x12
    3364:	89 8b       	std	Y+17, r24	; 0x11
    3366:	8b ee       	ldi	r24, 0xEB	; 235
    3368:	91 e0       	ldi	r25, 0x01	; 1
    336a:	9c 8b       	std	Y+20, r25	; 0x14
    336c:	8b 8b       	std	Y+19, r24	; 0x13
    const char *passwordArray[] = PASSWORD_ARRAY;
    336e:	87 ee       	ldi	r24, 0xE7	; 231
    3370:	91 e0       	ldi	r25, 0x01	; 1
    3372:	9e 8b       	std	Y+22, r25	; 0x16
    3374:	8d 8b       	std	Y+21, r24	; 0x15
    3376:	8b ee       	ldi	r24, 0xEB	; 235
    3378:	91 e0       	ldi	r25, 0x01	; 1
    337a:	98 8f       	std	Y+24, r25	; 0x18
    337c:	8f 8b       	std	Y+23, r24	; 0x17

    u8 loginSuccess = 0;
    337e:	18 8a       	std	Y+16, r1	; 0x10


        	    for (uint8_t i = 0; i < sizeof(idArray)/sizeof(idArray[0]); i++) {
    3380:	1f 86       	std	Y+15, r1	; 0x0f
    3382:	38 c0       	rjmp	.+112    	; 0x33f4 <checkCredentials+0xb6>
        	        if (strcmp(id, idArray[i]) == 0 && strcmp(password, passwordArray[i]) == 0) {
    3384:	8f 85       	ldd	r24, Y+15	; 0x0f
    3386:	88 2f       	mov	r24, r24
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	9c 01       	movw	r18, r24
    338c:	22 0f       	add	r18, r18
    338e:	33 1f       	adc	r19, r19
    3390:	ce 01       	movw	r24, r28
    3392:	01 96       	adiw	r24, 0x01	; 1
    3394:	82 0f       	add	r24, r18
    3396:	93 1f       	adc	r25, r19
    3398:	fc 01       	movw	r30, r24
    339a:	70 96       	adiw	r30, 0x10	; 16
    339c:	20 81       	ld	r18, Z
    339e:	31 81       	ldd	r19, Z+1	; 0x01
    33a0:	89 8d       	ldd	r24, Y+25	; 0x19
    33a2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    33a4:	b9 01       	movw	r22, r18
    33a6:	0e 94 b6 1c 	call	0x396c	; 0x396c <strcmp>
    33aa:	00 97       	sbiw	r24, 0x00	; 0
    33ac:	01 f5       	brne	.+64     	; 0x33ee <checkCredentials+0xb0>
    33ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    33b0:	88 2f       	mov	r24, r24
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	9c 01       	movw	r18, r24
    33b6:	22 0f       	add	r18, r18
    33b8:	33 1f       	adc	r19, r19
    33ba:	ce 01       	movw	r24, r28
    33bc:	01 96       	adiw	r24, 0x01	; 1
    33be:	82 0f       	add	r24, r18
    33c0:	93 1f       	adc	r25, r19
    33c2:	fc 01       	movw	r30, r24
    33c4:	74 96       	adiw	r30, 0x14	; 20
    33c6:	20 81       	ld	r18, Z
    33c8:	31 81       	ldd	r19, Z+1	; 0x01
    33ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33ce:	b9 01       	movw	r22, r18
    33d0:	0e 94 b6 1c 	call	0x396c	; 0x396c <strcmp>
    33d4:	00 97       	sbiw	r24, 0x00	; 0
    33d6:	59 f4       	brne	.+22     	; 0x33ee <checkCredentials+0xb0>
        	            // Credentials matched
        	            displayLoginSuccessful(i + 1); // Display the user index (i + 1)
    33d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    33da:	88 2f       	mov	r24, r24
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	01 96       	adiw	r24, 0x01	; 1
    33e0:	0e 94 8b 1a 	call	0x3516	; 0x3516 <displayLoginSuccessful>
        	            showOptions();
    33e4:	0e 94 32 17 	call	0x2e64	; 0x2e64 <showOptions>
        	            loginSuccess = 1;
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	88 8b       	std	Y+16, r24	; 0x10
    33ec:	06 c0       	rjmp	.+12     	; 0x33fa <checkCredentials+0xbc>
    const char *passwordArray[] = PASSWORD_ARRAY;

    u8 loginSuccess = 0;


        	    for (uint8_t i = 0; i < sizeof(idArray)/sizeof(idArray[0]); i++) {
    33ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    33f0:	8f 5f       	subi	r24, 0xFF	; 255
    33f2:	8f 87       	std	Y+15, r24	; 0x0f
    33f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    33f6:	82 30       	cpi	r24, 0x02	; 2
    33f8:	28 f2       	brcs	.-118    	; 0x3384 <checkCredentials+0x46>
        	            loginSuccess = 1;
        	            break;
        	        }
        	    }

        	    if (!loginSuccess) {
    33fa:	88 89       	ldd	r24, Y+16	; 0x10
    33fc:	88 23       	and	r24, r24
    33fe:	09 f0       	breq	.+2      	; 0x3402 <checkCredentials+0xc4>
    3400:	7f c0       	rjmp	.+254    	; 0x3500 <checkCredentials+0x1c2>
        	        numberOfLogins++;
    3402:	80 91 68 03 	lds	r24, 0x0368
    3406:	8f 5f       	subi	r24, 0xFF	; 255
    3408:	80 93 68 03 	sts	0x0368, r24
        	        LCD_8_bit_sendString("Login Failed");
    340c:	8f ee       	ldi	r24, 0xEF	; 239
    340e:	91 e0       	ldi	r25, 0x01	; 1
    3410:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	a8 ec       	ldi	r26, 0xC8	; 200
    341a:	b2 e4       	ldi	r27, 0x42	; 66
    341c:	8b 87       	std	Y+11, r24	; 0x0b
    341e:	9c 87       	std	Y+12, r25	; 0x0c
    3420:	ad 87       	std	Y+13, r26	; 0x0d
    3422:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3424:	6b 85       	ldd	r22, Y+11	; 0x0b
    3426:	7c 85       	ldd	r23, Y+12	; 0x0c
    3428:	8d 85       	ldd	r24, Y+13	; 0x0d
    342a:	9e 85       	ldd	r25, Y+14	; 0x0e
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	4a ef       	ldi	r20, 0xFA	; 250
    3432:	54 e4       	ldi	r21, 0x44	; 68
    3434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	8f 83       	std	Y+7, r24	; 0x07
    343e:	98 87       	std	Y+8, r25	; 0x08
    3440:	a9 87       	std	Y+9, r26	; 0x09
    3442:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3444:	6f 81       	ldd	r22, Y+7	; 0x07
    3446:	78 85       	ldd	r23, Y+8	; 0x08
    3448:	89 85       	ldd	r24, Y+9	; 0x09
    344a:	9a 85       	ldd	r25, Y+10	; 0x0a
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	40 e8       	ldi	r20, 0x80	; 128
    3452:	5f e3       	ldi	r21, 0x3F	; 63
    3454:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3458:	88 23       	and	r24, r24
    345a:	2c f4       	brge	.+10     	; 0x3466 <checkCredentials+0x128>
		__ticks = 1;
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	9e 83       	std	Y+6, r25	; 0x06
    3462:	8d 83       	std	Y+5, r24	; 0x05
    3464:	3f c0       	rjmp	.+126    	; 0x34e4 <checkCredentials+0x1a6>
	else if (__tmp > 65535)
    3466:	6f 81       	ldd	r22, Y+7	; 0x07
    3468:	78 85       	ldd	r23, Y+8	; 0x08
    346a:	89 85       	ldd	r24, Y+9	; 0x09
    346c:	9a 85       	ldd	r25, Y+10	; 0x0a
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	3f ef       	ldi	r19, 0xFF	; 255
    3472:	4f e7       	ldi	r20, 0x7F	; 127
    3474:	57 e4       	ldi	r21, 0x47	; 71
    3476:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    347a:	18 16       	cp	r1, r24
    347c:	4c f5       	brge	.+82     	; 0x34d0 <checkCredentials+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    347e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3480:	7c 85       	ldd	r23, Y+12	; 0x0c
    3482:	8d 85       	ldd	r24, Y+13	; 0x0d
    3484:	9e 85       	ldd	r25, Y+14	; 0x0e
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	40 e2       	ldi	r20, 0x20	; 32
    348c:	51 e4       	ldi	r21, 0x41	; 65
    348e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	bc 01       	movw	r22, r24
    3498:	cd 01       	movw	r24, r26
    349a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	9e 83       	std	Y+6, r25	; 0x06
    34a4:	8d 83       	std	Y+5, r24	; 0x05
    34a6:	0f c0       	rjmp	.+30     	; 0x34c6 <checkCredentials+0x188>
    34a8:	88 ec       	ldi	r24, 0xC8	; 200
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	9c 83       	std	Y+4, r25	; 0x04
    34ae:	8b 83       	std	Y+3, r24	; 0x03
    34b0:	8b 81       	ldd	r24, Y+3	; 0x03
    34b2:	9c 81       	ldd	r25, Y+4	; 0x04
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	f1 f7       	brne	.-4      	; 0x34b4 <checkCredentials+0x176>
    34b8:	9c 83       	std	Y+4, r25	; 0x04
    34ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34bc:	8d 81       	ldd	r24, Y+5	; 0x05
    34be:	9e 81       	ldd	r25, Y+6	; 0x06
    34c0:	01 97       	sbiw	r24, 0x01	; 1
    34c2:	9e 83       	std	Y+6, r25	; 0x06
    34c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c6:	8d 81       	ldd	r24, Y+5	; 0x05
    34c8:	9e 81       	ldd	r25, Y+6	; 0x06
    34ca:	00 97       	sbiw	r24, 0x00	; 0
    34cc:	69 f7       	brne	.-38     	; 0x34a8 <checkCredentials+0x16a>
    34ce:	14 c0       	rjmp	.+40     	; 0x34f8 <checkCredentials+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d0:	6f 81       	ldd	r22, Y+7	; 0x07
    34d2:	78 85       	ldd	r23, Y+8	; 0x08
    34d4:	89 85       	ldd	r24, Y+9	; 0x09
    34d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	9e 83       	std	Y+6, r25	; 0x06
    34e2:	8d 83       	std	Y+5, r24	; 0x05
    34e4:	8d 81       	ldd	r24, Y+5	; 0x05
    34e6:	9e 81       	ldd	r25, Y+6	; 0x06
    34e8:	9a 83       	std	Y+2, r25	; 0x02
    34ea:	89 83       	std	Y+1, r24	; 0x01
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	9a 81       	ldd	r25, Y+2	; 0x02
    34f0:	01 97       	sbiw	r24, 0x01	; 1
    34f2:	f1 f7       	brne	.-4      	; 0x34f0 <checkCredentials+0x1b2>
    34f4:	9a 83       	std	Y+2, r25	; 0x02
    34f6:	89 83       	std	Y+1, r24	; 0x01
        	        _delay_ms(100);
        	        LCD_CLR();
    34f8:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_CLR>
        	        myAPP();
    34fc:	0e 94 14 18 	call	0x3028	; 0x3028 <myAPP>

        	    }


    LCD_CLR();
    3500:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_CLR>
}
    3504:	6c 96       	adiw	r28, 0x1c	; 28
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	f8 94       	cli
    350a:	de bf       	out	0x3e, r29	; 62
    350c:	0f be       	out	0x3f, r0	; 63
    350e:	cd bf       	out	0x3d, r28	; 61
    3510:	cf 91       	pop	r28
    3512:	df 91       	pop	r29
    3514:	08 95       	ret

00003516 <displayLoginSuccessful>:

void displayLoginSuccessful(u8 userIndex) {
    3516:	df 93       	push	r29
    3518:	cf 93       	push	r28
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	6f 97       	sbiw	r28, 0x1f	; 31
    3520:	0f b6       	in	r0, 0x3f	; 63
    3522:	f8 94       	cli
    3524:	de bf       	out	0x3e, r29	; 62
    3526:	0f be       	out	0x3f, r0	; 63
    3528:	cd bf       	out	0x3d, r28	; 61
    352a:	8f 8f       	std	Y+31, r24	; 0x1f
    LCD_8_bit_sendString("Login Successful");
    352c:	8c ef       	ldi	r24, 0xFC	; 252
    352e:	91 e0       	ldi	r25, 0x01	; 1
    3530:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
    LCD_8_bit_GoToPos(1, 0);
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	60 e0       	ldi	r22, 0x00	; 0
    353a:	70 e0       	ldi	r23, 0x00	; 0
    353c:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_8_bit_GoToPos>
    char message[16];
    snprintf(message, sizeof(message), "Hello User %d", userIndex);
    3540:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3542:	28 2f       	mov	r18, r24
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	8d b7       	in	r24, 0x3d	; 61
    3548:	9e b7       	in	r25, 0x3e	; 62
    354a:	08 97       	sbiw	r24, 0x08	; 8
    354c:	0f b6       	in	r0, 0x3f	; 63
    354e:	f8 94       	cli
    3550:	9e bf       	out	0x3e, r25	; 62
    3552:	0f be       	out	0x3f, r0	; 63
    3554:	8d bf       	out	0x3d, r24	; 61
    3556:	ed b7       	in	r30, 0x3d	; 61
    3558:	fe b7       	in	r31, 0x3e	; 62
    355a:	31 96       	adiw	r30, 0x01	; 1
    355c:	ce 01       	movw	r24, r28
    355e:	0f 96       	adiw	r24, 0x0f	; 15
    3560:	91 83       	std	Z+1, r25	; 0x01
    3562:	80 83       	st	Z, r24
    3564:	80 e1       	ldi	r24, 0x10	; 16
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	93 83       	std	Z+3, r25	; 0x03
    356a:	82 83       	std	Z+2, r24	; 0x02
    356c:	8d e0       	ldi	r24, 0x0D	; 13
    356e:	92 e0       	ldi	r25, 0x02	; 2
    3570:	95 83       	std	Z+5, r25	; 0x05
    3572:	84 83       	std	Z+4, r24	; 0x04
    3574:	37 83       	std	Z+7, r19	; 0x07
    3576:	26 83       	std	Z+6, r18	; 0x06
    3578:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <snprintf>
    357c:	8d b7       	in	r24, 0x3d	; 61
    357e:	9e b7       	in	r25, 0x3e	; 62
    3580:	08 96       	adiw	r24, 0x08	; 8
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	f8 94       	cli
    3586:	9e bf       	out	0x3e, r25	; 62
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	8d bf       	out	0x3d, r24	; 61
    LCD_8_bit_sendString(message);
    358c:	ce 01       	movw	r24, r28
    358e:	0f 96       	adiw	r24, 0x0f	; 15
    3590:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
    3594:	80 e0       	ldi	r24, 0x00	; 0
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	a8 ec       	ldi	r26, 0xC8	; 200
    359a:	b2 e4       	ldi	r27, 0x42	; 66
    359c:	8b 87       	std	Y+11, r24	; 0x0b
    359e:	9c 87       	std	Y+12, r25	; 0x0c
    35a0:	ad 87       	std	Y+13, r26	; 0x0d
    35a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	4a ef       	ldi	r20, 0xFA	; 250
    35b2:	54 e4       	ldi	r21, 0x44	; 68
    35b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	8f 83       	std	Y+7, r24	; 0x07
    35be:	98 87       	std	Y+8, r25	; 0x08
    35c0:	a9 87       	std	Y+9, r26	; 0x09
    35c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35c4:	6f 81       	ldd	r22, Y+7	; 0x07
    35c6:	78 85       	ldd	r23, Y+8	; 0x08
    35c8:	89 85       	ldd	r24, Y+9	; 0x09
    35ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    35cc:	20 e0       	ldi	r18, 0x00	; 0
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	40 e8       	ldi	r20, 0x80	; 128
    35d2:	5f e3       	ldi	r21, 0x3F	; 63
    35d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35d8:	88 23       	and	r24, r24
    35da:	2c f4       	brge	.+10     	; 0x35e6 <displayLoginSuccessful+0xd0>
		__ticks = 1;
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	9e 83       	std	Y+6, r25	; 0x06
    35e2:	8d 83       	std	Y+5, r24	; 0x05
    35e4:	3f c0       	rjmp	.+126    	; 0x3664 <displayLoginSuccessful+0x14e>
	else if (__tmp > 65535)
    35e6:	6f 81       	ldd	r22, Y+7	; 0x07
    35e8:	78 85       	ldd	r23, Y+8	; 0x08
    35ea:	89 85       	ldd	r24, Y+9	; 0x09
    35ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	3f ef       	ldi	r19, 0xFF	; 255
    35f2:	4f e7       	ldi	r20, 0x7F	; 127
    35f4:	57 e4       	ldi	r21, 0x47	; 71
    35f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35fa:	18 16       	cp	r1, r24
    35fc:	4c f5       	brge	.+82     	; 0x3650 <displayLoginSuccessful+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3600:	7c 85       	ldd	r23, Y+12	; 0x0c
    3602:	8d 85       	ldd	r24, Y+13	; 0x0d
    3604:	9e 85       	ldd	r25, Y+14	; 0x0e
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	40 e2       	ldi	r20, 0x20	; 32
    360c:	51 e4       	ldi	r21, 0x41	; 65
    360e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	bc 01       	movw	r22, r24
    3618:	cd 01       	movw	r24, r26
    361a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	9e 83       	std	Y+6, r25	; 0x06
    3624:	8d 83       	std	Y+5, r24	; 0x05
    3626:	0f c0       	rjmp	.+30     	; 0x3646 <displayLoginSuccessful+0x130>
    3628:	88 ec       	ldi	r24, 0xC8	; 200
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	9c 83       	std	Y+4, r25	; 0x04
    362e:	8b 83       	std	Y+3, r24	; 0x03
    3630:	8b 81       	ldd	r24, Y+3	; 0x03
    3632:	9c 81       	ldd	r25, Y+4	; 0x04
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	f1 f7       	brne	.-4      	; 0x3634 <displayLoginSuccessful+0x11e>
    3638:	9c 83       	std	Y+4, r25	; 0x04
    363a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    363c:	8d 81       	ldd	r24, Y+5	; 0x05
    363e:	9e 81       	ldd	r25, Y+6	; 0x06
    3640:	01 97       	sbiw	r24, 0x01	; 1
    3642:	9e 83       	std	Y+6, r25	; 0x06
    3644:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3646:	8d 81       	ldd	r24, Y+5	; 0x05
    3648:	9e 81       	ldd	r25, Y+6	; 0x06
    364a:	00 97       	sbiw	r24, 0x00	; 0
    364c:	69 f7       	brne	.-38     	; 0x3628 <displayLoginSuccessful+0x112>
    364e:	14 c0       	rjmp	.+40     	; 0x3678 <displayLoginSuccessful+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3650:	6f 81       	ldd	r22, Y+7	; 0x07
    3652:	78 85       	ldd	r23, Y+8	; 0x08
    3654:	89 85       	ldd	r24, Y+9	; 0x09
    3656:	9a 85       	ldd	r25, Y+10	; 0x0a
    3658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	9e 83       	std	Y+6, r25	; 0x06
    3662:	8d 83       	std	Y+5, r24	; 0x05
    3664:	8d 81       	ldd	r24, Y+5	; 0x05
    3666:	9e 81       	ldd	r25, Y+6	; 0x06
    3668:	9a 83       	std	Y+2, r25	; 0x02
    366a:	89 83       	std	Y+1, r24	; 0x01
    366c:	89 81       	ldd	r24, Y+1	; 0x01
    366e:	9a 81       	ldd	r25, Y+2	; 0x02
    3670:	01 97       	sbiw	r24, 0x01	; 1
    3672:	f1 f7       	brne	.-4      	; 0x3670 <displayLoginSuccessful+0x15a>
    3674:	9a 83       	std	Y+2, r25	; 0x02
    3676:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
}
    3678:	6f 96       	adiw	r28, 0x1f	; 31
    367a:	0f b6       	in	r0, 0x3f	; 63
    367c:	f8 94       	cli
    367e:	de bf       	out	0x3e, r29	; 62
    3680:	0f be       	out	0x3f, r0	; 63
    3682:	cd bf       	out	0x3d, r28	; 61
    3684:	cf 91       	pop	r28
    3686:	df 91       	pop	r29
    3688:	08 95       	ret

0000368a <displayMaxLoginAttemptsReached>:

void displayMaxLoginAttemptsReached() {
    368a:	df 93       	push	r29
    368c:	cf 93       	push	r28
    368e:	cd b7       	in	r28, 0x3d	; 61
    3690:	de b7       	in	r29, 0x3e	; 62
    3692:	2e 97       	sbiw	r28, 0x0e	; 14
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	de bf       	out	0x3e, r29	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	cd bf       	out	0x3d, r28	; 61
    LCD_8_bit_sendString("Max Login");
    369e:	8b e1       	ldi	r24, 0x1B	; 27
    36a0:	92 e0       	ldi	r25, 0x02	; 2
    36a2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
    LCD_8_bit_GoToPos(1, 0);
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	60 e0       	ldi	r22, 0x00	; 0
    36ac:	70 e0       	ldi	r23, 0x00	; 0
    36ae:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_8_bit_GoToPos>
    LCD_8_bit_sendString("Attempts Reached");
    36b2:	85 e2       	ldi	r24, 0x25	; 37
    36b4:	92 e0       	ldi	r25, 0x02	; 2
    36b6:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <LCD_8_bit_sendString>
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	a8 ec       	ldi	r26, 0xC8	; 200
    36c0:	b2 e4       	ldi	r27, 0x42	; 66
    36c2:	8b 87       	std	Y+11, r24	; 0x0b
    36c4:	9c 87       	std	Y+12, r25	; 0x0c
    36c6:	ad 87       	std	Y+13, r26	; 0x0d
    36c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    36cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    36ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    36d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	4a ef       	ldi	r20, 0xFA	; 250
    36d8:	54 e4       	ldi	r21, 0x44	; 68
    36da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	8f 83       	std	Y+7, r24	; 0x07
    36e4:	98 87       	std	Y+8, r25	; 0x08
    36e6:	a9 87       	std	Y+9, r26	; 0x09
    36e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36ea:	6f 81       	ldd	r22, Y+7	; 0x07
    36ec:	78 85       	ldd	r23, Y+8	; 0x08
    36ee:	89 85       	ldd	r24, Y+9	; 0x09
    36f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	40 e8       	ldi	r20, 0x80	; 128
    36f8:	5f e3       	ldi	r21, 0x3F	; 63
    36fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36fe:	88 23       	and	r24, r24
    3700:	2c f4       	brge	.+10     	; 0x370c <displayMaxLoginAttemptsReached+0x82>
		__ticks = 1;
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	9e 83       	std	Y+6, r25	; 0x06
    3708:	8d 83       	std	Y+5, r24	; 0x05
    370a:	3f c0       	rjmp	.+126    	; 0x378a <displayMaxLoginAttemptsReached+0x100>
	else if (__tmp > 65535)
    370c:	6f 81       	ldd	r22, Y+7	; 0x07
    370e:	78 85       	ldd	r23, Y+8	; 0x08
    3710:	89 85       	ldd	r24, Y+9	; 0x09
    3712:	9a 85       	ldd	r25, Y+10	; 0x0a
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	3f ef       	ldi	r19, 0xFF	; 255
    3718:	4f e7       	ldi	r20, 0x7F	; 127
    371a:	57 e4       	ldi	r21, 0x47	; 71
    371c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3720:	18 16       	cp	r1, r24
    3722:	4c f5       	brge	.+82     	; 0x3776 <displayMaxLoginAttemptsReached+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3724:	6b 85       	ldd	r22, Y+11	; 0x0b
    3726:	7c 85       	ldd	r23, Y+12	; 0x0c
    3728:	8d 85       	ldd	r24, Y+13	; 0x0d
    372a:	9e 85       	ldd	r25, Y+14	; 0x0e
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	40 e2       	ldi	r20, 0x20	; 32
    3732:	51 e4       	ldi	r21, 0x41	; 65
    3734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	bc 01       	movw	r22, r24
    373e:	cd 01       	movw	r24, r26
    3740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	9e 83       	std	Y+6, r25	; 0x06
    374a:	8d 83       	std	Y+5, r24	; 0x05
    374c:	0f c0       	rjmp	.+30     	; 0x376c <displayMaxLoginAttemptsReached+0xe2>
    374e:	88 ec       	ldi	r24, 0xC8	; 200
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	9c 83       	std	Y+4, r25	; 0x04
    3754:	8b 83       	std	Y+3, r24	; 0x03
    3756:	8b 81       	ldd	r24, Y+3	; 0x03
    3758:	9c 81       	ldd	r25, Y+4	; 0x04
    375a:	01 97       	sbiw	r24, 0x01	; 1
    375c:	f1 f7       	brne	.-4      	; 0x375a <displayMaxLoginAttemptsReached+0xd0>
    375e:	9c 83       	std	Y+4, r25	; 0x04
    3760:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3762:	8d 81       	ldd	r24, Y+5	; 0x05
    3764:	9e 81       	ldd	r25, Y+6	; 0x06
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	9e 83       	std	Y+6, r25	; 0x06
    376a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    376c:	8d 81       	ldd	r24, Y+5	; 0x05
    376e:	9e 81       	ldd	r25, Y+6	; 0x06
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	69 f7       	brne	.-38     	; 0x374e <displayMaxLoginAttemptsReached+0xc4>
    3774:	14 c0       	rjmp	.+40     	; 0x379e <displayMaxLoginAttemptsReached+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3776:	6f 81       	ldd	r22, Y+7	; 0x07
    3778:	78 85       	ldd	r23, Y+8	; 0x08
    377a:	89 85       	ldd	r24, Y+9	; 0x09
    377c:	9a 85       	ldd	r25, Y+10	; 0x0a
    377e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	9e 83       	std	Y+6, r25	; 0x06
    3788:	8d 83       	std	Y+5, r24	; 0x05
    378a:	8d 81       	ldd	r24, Y+5	; 0x05
    378c:	9e 81       	ldd	r25, Y+6	; 0x06
    378e:	9a 83       	std	Y+2, r25	; 0x02
    3790:	89 83       	std	Y+1, r24	; 0x01
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	9a 81       	ldd	r25, Y+2	; 0x02
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	f1 f7       	brne	.-4      	; 0x3796 <displayMaxLoginAttemptsReached+0x10c>
    379a:	9a 83       	std	Y+2, r25	; 0x02
    379c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
}
    379e:	2e 96       	adiw	r28, 0x0e	; 14
    37a0:	0f b6       	in	r0, 0x3f	; 63
    37a2:	f8 94       	cli
    37a4:	de bf       	out	0x3e, r29	; 62
    37a6:	0f be       	out	0x3f, r0	; 63
    37a8:	cd bf       	out	0x3d, r28	; 61
    37aa:	cf 91       	pop	r28
    37ac:	df 91       	pop	r29
    37ae:	08 95       	ret

000037b0 <displayWelcomeMessage>:


//******************************************************//

void displayWelcomeMessage() {
    37b0:	df 93       	push	r29
    37b2:	cf 93       	push	r28
    37b4:	cd b7       	in	r28, 0x3d	; 61
    37b6:	de b7       	in	r29, 0x3e	; 62
    37b8:	2e 97       	sbiw	r28, 0x0e	; 14
    37ba:	0f b6       	in	r0, 0x3f	; 63
    37bc:	f8 94       	cli
    37be:	de bf       	out	0x3e, r29	; 62
    37c0:	0f be       	out	0x3f, r0	; 63
    37c2:	cd bf       	out	0x3d, r28	; 61
    USART_VoidSendString((u8*)"Welcome\r\n");
    37c4:	86 e3       	ldi	r24, 0x36	; 54
    37c6:	92 e0       	ldi	r25, 0x02	; 2
    37c8:	0e 94 93 06 	call	0xd26	; 0xd26 <USART_VoidSendString>
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	aa ef       	ldi	r26, 0xFA	; 250
    37d2:	b3 e4       	ldi	r27, 0x43	; 67
    37d4:	8b 87       	std	Y+11, r24	; 0x0b
    37d6:	9c 87       	std	Y+12, r25	; 0x0c
    37d8:	ad 87       	std	Y+13, r26	; 0x0d
    37da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    37de:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	4a ef       	ldi	r20, 0xFA	; 250
    37ea:	54 e4       	ldi	r21, 0x44	; 68
    37ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	8f 83       	std	Y+7, r24	; 0x07
    37f6:	98 87       	std	Y+8, r25	; 0x08
    37f8:	a9 87       	std	Y+9, r26	; 0x09
    37fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37fc:	6f 81       	ldd	r22, Y+7	; 0x07
    37fe:	78 85       	ldd	r23, Y+8	; 0x08
    3800:	89 85       	ldd	r24, Y+9	; 0x09
    3802:	9a 85       	ldd	r25, Y+10	; 0x0a
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	40 e8       	ldi	r20, 0x80	; 128
    380a:	5f e3       	ldi	r21, 0x3F	; 63
    380c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3810:	88 23       	and	r24, r24
    3812:	2c f4       	brge	.+10     	; 0x381e <displayWelcomeMessage+0x6e>
		__ticks = 1;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	9e 83       	std	Y+6, r25	; 0x06
    381a:	8d 83       	std	Y+5, r24	; 0x05
    381c:	3f c0       	rjmp	.+126    	; 0x389c <displayWelcomeMessage+0xec>
	else if (__tmp > 65535)
    381e:	6f 81       	ldd	r22, Y+7	; 0x07
    3820:	78 85       	ldd	r23, Y+8	; 0x08
    3822:	89 85       	ldd	r24, Y+9	; 0x09
    3824:	9a 85       	ldd	r25, Y+10	; 0x0a
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	3f ef       	ldi	r19, 0xFF	; 255
    382a:	4f e7       	ldi	r20, 0x7F	; 127
    382c:	57 e4       	ldi	r21, 0x47	; 71
    382e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3832:	18 16       	cp	r1, r24
    3834:	4c f5       	brge	.+82     	; 0x3888 <displayWelcomeMessage+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3836:	6b 85       	ldd	r22, Y+11	; 0x0b
    3838:	7c 85       	ldd	r23, Y+12	; 0x0c
    383a:	8d 85       	ldd	r24, Y+13	; 0x0d
    383c:	9e 85       	ldd	r25, Y+14	; 0x0e
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	40 e2       	ldi	r20, 0x20	; 32
    3844:	51 e4       	ldi	r21, 0x41	; 65
    3846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	bc 01       	movw	r22, r24
    3850:	cd 01       	movw	r24, r26
    3852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	9e 83       	std	Y+6, r25	; 0x06
    385c:	8d 83       	std	Y+5, r24	; 0x05
    385e:	0f c0       	rjmp	.+30     	; 0x387e <displayWelcomeMessage+0xce>
    3860:	88 ec       	ldi	r24, 0xC8	; 200
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	9c 83       	std	Y+4, r25	; 0x04
    3866:	8b 83       	std	Y+3, r24	; 0x03
    3868:	8b 81       	ldd	r24, Y+3	; 0x03
    386a:	9c 81       	ldd	r25, Y+4	; 0x04
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	f1 f7       	brne	.-4      	; 0x386c <displayWelcomeMessage+0xbc>
    3870:	9c 83       	std	Y+4, r25	; 0x04
    3872:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3874:	8d 81       	ldd	r24, Y+5	; 0x05
    3876:	9e 81       	ldd	r25, Y+6	; 0x06
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	9e 83       	std	Y+6, r25	; 0x06
    387c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387e:	8d 81       	ldd	r24, Y+5	; 0x05
    3880:	9e 81       	ldd	r25, Y+6	; 0x06
    3882:	00 97       	sbiw	r24, 0x00	; 0
    3884:	69 f7       	brne	.-38     	; 0x3860 <displayWelcomeMessage+0xb0>
    3886:	14 c0       	rjmp	.+40     	; 0x38b0 <displayWelcomeMessage+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3888:	6f 81       	ldd	r22, Y+7	; 0x07
    388a:	78 85       	ldd	r23, Y+8	; 0x08
    388c:	89 85       	ldd	r24, Y+9	; 0x09
    388e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	9e 83       	std	Y+6, r25	; 0x06
    389a:	8d 83       	std	Y+5, r24	; 0x05
    389c:	8d 81       	ldd	r24, Y+5	; 0x05
    389e:	9e 81       	ldd	r25, Y+6	; 0x06
    38a0:	9a 83       	std	Y+2, r25	; 0x02
    38a2:	89 83       	std	Y+1, r24	; 0x01
    38a4:	89 81       	ldd	r24, Y+1	; 0x01
    38a6:	9a 81       	ldd	r25, Y+2	; 0x02
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	f1 f7       	brne	.-4      	; 0x38a8 <displayWelcomeMessage+0xf8>
    38ac:	9a 83       	std	Y+2, r25	; 0x02
    38ae:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);
}
    38b0:	2e 96       	adiw	r28, 0x0e	; 14
    38b2:	0f b6       	in	r0, 0x3f	; 63
    38b4:	f8 94       	cli
    38b6:	de bf       	out	0x3e, r29	; 62
    38b8:	0f be       	out	0x3f, r0	; 63
    38ba:	cd bf       	out	0x3d, r28	; 61
    38bc:	cf 91       	pop	r28
    38be:	df 91       	pop	r29
    38c0:	08 95       	ret

000038c2 <__prologue_saves__>:
    38c2:	2f 92       	push	r2
    38c4:	3f 92       	push	r3
    38c6:	4f 92       	push	r4
    38c8:	5f 92       	push	r5
    38ca:	6f 92       	push	r6
    38cc:	7f 92       	push	r7
    38ce:	8f 92       	push	r8
    38d0:	9f 92       	push	r9
    38d2:	af 92       	push	r10
    38d4:	bf 92       	push	r11
    38d6:	cf 92       	push	r12
    38d8:	df 92       	push	r13
    38da:	ef 92       	push	r14
    38dc:	ff 92       	push	r15
    38de:	0f 93       	push	r16
    38e0:	1f 93       	push	r17
    38e2:	cf 93       	push	r28
    38e4:	df 93       	push	r29
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62
    38ea:	ca 1b       	sub	r28, r26
    38ec:	db 0b       	sbc	r29, r27
    38ee:	0f b6       	in	r0, 0x3f	; 63
    38f0:	f8 94       	cli
    38f2:	de bf       	out	0x3e, r29	; 62
    38f4:	0f be       	out	0x3f, r0	; 63
    38f6:	cd bf       	out	0x3d, r28	; 61
    38f8:	09 94       	ijmp

000038fa <__epilogue_restores__>:
    38fa:	2a 88       	ldd	r2, Y+18	; 0x12
    38fc:	39 88       	ldd	r3, Y+17	; 0x11
    38fe:	48 88       	ldd	r4, Y+16	; 0x10
    3900:	5f 84       	ldd	r5, Y+15	; 0x0f
    3902:	6e 84       	ldd	r6, Y+14	; 0x0e
    3904:	7d 84       	ldd	r7, Y+13	; 0x0d
    3906:	8c 84       	ldd	r8, Y+12	; 0x0c
    3908:	9b 84       	ldd	r9, Y+11	; 0x0b
    390a:	aa 84       	ldd	r10, Y+10	; 0x0a
    390c:	b9 84       	ldd	r11, Y+9	; 0x09
    390e:	c8 84       	ldd	r12, Y+8	; 0x08
    3910:	df 80       	ldd	r13, Y+7	; 0x07
    3912:	ee 80       	ldd	r14, Y+6	; 0x06
    3914:	fd 80       	ldd	r15, Y+5	; 0x05
    3916:	0c 81       	ldd	r16, Y+4	; 0x04
    3918:	1b 81       	ldd	r17, Y+3	; 0x03
    391a:	aa 81       	ldd	r26, Y+2	; 0x02
    391c:	b9 81       	ldd	r27, Y+1	; 0x01
    391e:	ce 0f       	add	r28, r30
    3920:	d1 1d       	adc	r29, r1
    3922:	0f b6       	in	r0, 0x3f	; 63
    3924:	f8 94       	cli
    3926:	de bf       	out	0x3e, r29	; 62
    3928:	0f be       	out	0x3f, r0	; 63
    392a:	cd bf       	out	0x3d, r28	; 61
    392c:	ed 01       	movw	r28, r26
    392e:	08 95       	ret

00003930 <atoi>:
    3930:	fc 01       	movw	r30, r24
    3932:	88 27       	eor	r24, r24
    3934:	99 27       	eor	r25, r25
    3936:	e8 94       	clt
    3938:	21 91       	ld	r18, Z+
    393a:	20 32       	cpi	r18, 0x20	; 32
    393c:	e9 f3       	breq	.-6      	; 0x3938 <atoi+0x8>
    393e:	29 30       	cpi	r18, 0x09	; 9
    3940:	10 f0       	brcs	.+4      	; 0x3946 <atoi+0x16>
    3942:	2e 30       	cpi	r18, 0x0E	; 14
    3944:	c8 f3       	brcs	.-14     	; 0x3938 <atoi+0x8>
    3946:	2b 32       	cpi	r18, 0x2B	; 43
    3948:	41 f0       	breq	.+16     	; 0x395a <atoi+0x2a>
    394a:	2d 32       	cpi	r18, 0x2D	; 45
    394c:	39 f4       	brne	.+14     	; 0x395c <atoi+0x2c>
    394e:	68 94       	set
    3950:	04 c0       	rjmp	.+8      	; 0x395a <atoi+0x2a>
    3952:	0e 94 e0 1c 	call	0x39c0	; 0x39c0 <__mulhi_const_10>
    3956:	82 0f       	add	r24, r18
    3958:	91 1d       	adc	r25, r1
    395a:	21 91       	ld	r18, Z+
    395c:	20 53       	subi	r18, 0x30	; 48
    395e:	2a 30       	cpi	r18, 0x0A	; 10
    3960:	c0 f3       	brcs	.-16     	; 0x3952 <atoi+0x22>
    3962:	1e f4       	brtc	.+6      	; 0x396a <atoi+0x3a>
    3964:	90 95       	com	r25
    3966:	81 95       	neg	r24
    3968:	9f 4f       	sbci	r25, 0xFF	; 255
    396a:	08 95       	ret

0000396c <strcmp>:
    396c:	fb 01       	movw	r30, r22
    396e:	dc 01       	movw	r26, r24
    3970:	8d 91       	ld	r24, X+
    3972:	01 90       	ld	r0, Z+
    3974:	80 19       	sub	r24, r0
    3976:	01 10       	cpse	r0, r1
    3978:	d9 f3       	breq	.-10     	; 0x3970 <strcmp+0x4>
    397a:	99 0b       	sbc	r25, r25
    397c:	08 95       	ret

0000397e <itoa>:
    397e:	fb 01       	movw	r30, r22
    3980:	9f 01       	movw	r18, r30
    3982:	e8 94       	clt
    3984:	42 30       	cpi	r20, 0x02	; 2
    3986:	c4 f0       	brlt	.+48     	; 0x39b8 <itoa+0x3a>
    3988:	45 32       	cpi	r20, 0x25	; 37
    398a:	b4 f4       	brge	.+44     	; 0x39b8 <itoa+0x3a>
    398c:	4a 30       	cpi	r20, 0x0A	; 10
    398e:	29 f4       	brne	.+10     	; 0x399a <itoa+0x1c>
    3990:	97 fb       	bst	r25, 7
    3992:	1e f4       	brtc	.+6      	; 0x399a <itoa+0x1c>
    3994:	90 95       	com	r25
    3996:	81 95       	neg	r24
    3998:	9f 4f       	sbci	r25, 0xFF	; 255
    399a:	64 2f       	mov	r22, r20
    399c:	77 27       	eor	r23, r23
    399e:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__udivmodhi4>
    39a2:	80 5d       	subi	r24, 0xD0	; 208
    39a4:	8a 33       	cpi	r24, 0x3A	; 58
    39a6:	0c f0       	brlt	.+2      	; 0x39aa <itoa+0x2c>
    39a8:	89 5d       	subi	r24, 0xD9	; 217
    39aa:	81 93       	st	Z+, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	00 97       	sbiw	r24, 0x00	; 0
    39b0:	a1 f7       	brne	.-24     	; 0x399a <itoa+0x1c>
    39b2:	16 f4       	brtc	.+4      	; 0x39b8 <itoa+0x3a>
    39b4:	5d e2       	ldi	r21, 0x2D	; 45
    39b6:	51 93       	st	Z+, r21
    39b8:	10 82       	st	Z, r1
    39ba:	c9 01       	movw	r24, r18
    39bc:	0c 94 30 1f 	jmp	0x3e60	; 0x3e60 <strrev>

000039c0 <__mulhi_const_10>:
    39c0:	7a e0       	ldi	r23, 0x0A	; 10
    39c2:	97 9f       	mul	r25, r23
    39c4:	90 2d       	mov	r25, r0
    39c6:	87 9f       	mul	r24, r23
    39c8:	80 2d       	mov	r24, r0
    39ca:	91 0d       	add	r25, r1
    39cc:	11 24       	eor	r1, r1
    39ce:	08 95       	ret

000039d0 <snprintf>:
    39d0:	ae e0       	ldi	r26, 0x0E	; 14
    39d2:	b0 e0       	ldi	r27, 0x00	; 0
    39d4:	ee ee       	ldi	r30, 0xEE	; 238
    39d6:	fc e1       	ldi	r31, 0x1C	; 28
    39d8:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <__prologue_saves__+0x1c>
    39dc:	0d 89       	ldd	r16, Y+21	; 0x15
    39de:	1e 89       	ldd	r17, Y+22	; 0x16
    39e0:	8f 89       	ldd	r24, Y+23	; 0x17
    39e2:	98 8d       	ldd	r25, Y+24	; 0x18
    39e4:	97 ff       	sbrs	r25, 7
    39e6:	02 c0       	rjmp	.+4      	; 0x39ec <snprintf+0x1c>
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	90 e8       	ldi	r25, 0x80	; 128
    39ec:	01 97       	sbiw	r24, 0x01	; 1
    39ee:	9e 83       	std	Y+6, r25	; 0x06
    39f0:	8d 83       	std	Y+5, r24	; 0x05
    39f2:	1a 83       	std	Y+2, r17	; 0x02
    39f4:	09 83       	std	Y+1, r16	; 0x01
    39f6:	86 e0       	ldi	r24, 0x06	; 6
    39f8:	8c 83       	std	Y+4, r24	; 0x04
    39fa:	9e 01       	movw	r18, r28
    39fc:	25 5e       	subi	r18, 0xE5	; 229
    39fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3a00:	ce 01       	movw	r24, r28
    3a02:	01 96       	adiw	r24, 0x01	; 1
    3a04:	69 8d       	ldd	r22, Y+25	; 0x19
    3a06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a08:	a9 01       	movw	r20, r18
    3a0a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <vfprintf>
    3a0e:	4d 81       	ldd	r20, Y+5	; 0x05
    3a10:	5e 81       	ldd	r21, Y+6	; 0x06
    3a12:	57 fd       	sbrc	r21, 7
    3a14:	0a c0       	rjmp	.+20     	; 0x3a2a <snprintf+0x5a>
    3a16:	2f 81       	ldd	r18, Y+7	; 0x07
    3a18:	38 85       	ldd	r19, Y+8	; 0x08
    3a1a:	42 17       	cp	r20, r18
    3a1c:	53 07       	cpc	r21, r19
    3a1e:	0c f4       	brge	.+2      	; 0x3a22 <snprintf+0x52>
    3a20:	9a 01       	movw	r18, r20
    3a22:	02 0f       	add	r16, r18
    3a24:	13 1f       	adc	r17, r19
    3a26:	f8 01       	movw	r30, r16
    3a28:	10 82       	st	Z, r1
    3a2a:	2e 96       	adiw	r28, 0x0e	; 14
    3a2c:	e4 e0       	ldi	r30, 0x04	; 4
    3a2e:	0c 94 8b 1c 	jmp	0x3916	; 0x3916 <__epilogue_restores__+0x1c>

00003a32 <sprintf>:
    3a32:	ae e0       	ldi	r26, 0x0E	; 14
    3a34:	b0 e0       	ldi	r27, 0x00	; 0
    3a36:	ef e1       	ldi	r30, 0x1F	; 31
    3a38:	fd e1       	ldi	r31, 0x1D	; 29
    3a3a:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <__prologue_saves__+0x1c>
    3a3e:	0d 89       	ldd	r16, Y+21	; 0x15
    3a40:	1e 89       	ldd	r17, Y+22	; 0x16
    3a42:	86 e0       	ldi	r24, 0x06	; 6
    3a44:	8c 83       	std	Y+4, r24	; 0x04
    3a46:	1a 83       	std	Y+2, r17	; 0x02
    3a48:	09 83       	std	Y+1, r16	; 0x01
    3a4a:	8f ef       	ldi	r24, 0xFF	; 255
    3a4c:	9f e7       	ldi	r25, 0x7F	; 127
    3a4e:	9e 83       	std	Y+6, r25	; 0x06
    3a50:	8d 83       	std	Y+5, r24	; 0x05
    3a52:	9e 01       	movw	r18, r28
    3a54:	27 5e       	subi	r18, 0xE7	; 231
    3a56:	3f 4f       	sbci	r19, 0xFF	; 255
    3a58:	ce 01       	movw	r24, r28
    3a5a:	01 96       	adiw	r24, 0x01	; 1
    3a5c:	6f 89       	ldd	r22, Y+23	; 0x17
    3a5e:	78 8d       	ldd	r23, Y+24	; 0x18
    3a60:	a9 01       	movw	r20, r18
    3a62:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <vfprintf>
    3a66:	2f 81       	ldd	r18, Y+7	; 0x07
    3a68:	38 85       	ldd	r19, Y+8	; 0x08
    3a6a:	02 0f       	add	r16, r18
    3a6c:	13 1f       	adc	r17, r19
    3a6e:	f8 01       	movw	r30, r16
    3a70:	10 82       	st	Z, r1
    3a72:	2e 96       	adiw	r28, 0x0e	; 14
    3a74:	e4 e0       	ldi	r30, 0x04	; 4
    3a76:	0c 94 8b 1c 	jmp	0x3916	; 0x3916 <__epilogue_restores__+0x1c>

00003a7a <vfprintf>:
    3a7a:	ab e0       	ldi	r26, 0x0B	; 11
    3a7c:	b0 e0       	ldi	r27, 0x00	; 0
    3a7e:	e3 e4       	ldi	r30, 0x43	; 67
    3a80:	fd e1       	ldi	r31, 0x1D	; 29
    3a82:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__prologue_saves__>
    3a86:	3c 01       	movw	r6, r24
    3a88:	2b 01       	movw	r4, r22
    3a8a:	5a 01       	movw	r10, r20
    3a8c:	fc 01       	movw	r30, r24
    3a8e:	17 82       	std	Z+7, r1	; 0x07
    3a90:	16 82       	std	Z+6, r1	; 0x06
    3a92:	83 81       	ldd	r24, Z+3	; 0x03
    3a94:	81 fd       	sbrc	r24, 1
    3a96:	03 c0       	rjmp	.+6      	; 0x3a9e <vfprintf+0x24>
    3a98:	6f ef       	ldi	r22, 0xFF	; 255
    3a9a:	7f ef       	ldi	r23, 0xFF	; 255
    3a9c:	c6 c1       	rjmp	.+908    	; 0x3e2a <vfprintf+0x3b0>
    3a9e:	9a e0       	ldi	r25, 0x0A	; 10
    3aa0:	89 2e       	mov	r8, r25
    3aa2:	1e 01       	movw	r2, r28
    3aa4:	08 94       	sec
    3aa6:	21 1c       	adc	r2, r1
    3aa8:	31 1c       	adc	r3, r1
    3aaa:	f3 01       	movw	r30, r6
    3aac:	23 81       	ldd	r18, Z+3	; 0x03
    3aae:	f2 01       	movw	r30, r4
    3ab0:	23 fd       	sbrc	r18, 3
    3ab2:	85 91       	lpm	r24, Z+
    3ab4:	23 ff       	sbrs	r18, 3
    3ab6:	81 91       	ld	r24, Z+
    3ab8:	2f 01       	movw	r4, r30
    3aba:	88 23       	and	r24, r24
    3abc:	09 f4       	brne	.+2      	; 0x3ac0 <vfprintf+0x46>
    3abe:	b2 c1       	rjmp	.+868    	; 0x3e24 <vfprintf+0x3aa>
    3ac0:	85 32       	cpi	r24, 0x25	; 37
    3ac2:	39 f4       	brne	.+14     	; 0x3ad2 <vfprintf+0x58>
    3ac4:	23 fd       	sbrc	r18, 3
    3ac6:	85 91       	lpm	r24, Z+
    3ac8:	23 ff       	sbrs	r18, 3
    3aca:	81 91       	ld	r24, Z+
    3acc:	2f 01       	movw	r4, r30
    3ace:	85 32       	cpi	r24, 0x25	; 37
    3ad0:	29 f4       	brne	.+10     	; 0x3adc <vfprintf+0x62>
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	b3 01       	movw	r22, r6
    3ad6:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <fputc>
    3ada:	e7 cf       	rjmp	.-50     	; 0x3aaa <vfprintf+0x30>
    3adc:	98 2f       	mov	r25, r24
    3ade:	ff 24       	eor	r15, r15
    3ae0:	ee 24       	eor	r14, r14
    3ae2:	99 24       	eor	r9, r9
    3ae4:	ff e1       	ldi	r31, 0x1F	; 31
    3ae6:	ff 15       	cp	r31, r15
    3ae8:	d0 f0       	brcs	.+52     	; 0x3b1e <vfprintf+0xa4>
    3aea:	9b 32       	cpi	r25, 0x2B	; 43
    3aec:	69 f0       	breq	.+26     	; 0x3b08 <vfprintf+0x8e>
    3aee:	9c 32       	cpi	r25, 0x2C	; 44
    3af0:	28 f4       	brcc	.+10     	; 0x3afc <vfprintf+0x82>
    3af2:	90 32       	cpi	r25, 0x20	; 32
    3af4:	59 f0       	breq	.+22     	; 0x3b0c <vfprintf+0x92>
    3af6:	93 32       	cpi	r25, 0x23	; 35
    3af8:	91 f4       	brne	.+36     	; 0x3b1e <vfprintf+0xa4>
    3afa:	0e c0       	rjmp	.+28     	; 0x3b18 <vfprintf+0x9e>
    3afc:	9d 32       	cpi	r25, 0x2D	; 45
    3afe:	49 f0       	breq	.+18     	; 0x3b12 <vfprintf+0x98>
    3b00:	90 33       	cpi	r25, 0x30	; 48
    3b02:	69 f4       	brne	.+26     	; 0x3b1e <vfprintf+0xa4>
    3b04:	41 e0       	ldi	r20, 0x01	; 1
    3b06:	24 c0       	rjmp	.+72     	; 0x3b50 <vfprintf+0xd6>
    3b08:	52 e0       	ldi	r21, 0x02	; 2
    3b0a:	f5 2a       	or	r15, r21
    3b0c:	84 e0       	ldi	r24, 0x04	; 4
    3b0e:	f8 2a       	or	r15, r24
    3b10:	28 c0       	rjmp	.+80     	; 0x3b62 <vfprintf+0xe8>
    3b12:	98 e0       	ldi	r25, 0x08	; 8
    3b14:	f9 2a       	or	r15, r25
    3b16:	25 c0       	rjmp	.+74     	; 0x3b62 <vfprintf+0xe8>
    3b18:	e0 e1       	ldi	r30, 0x10	; 16
    3b1a:	fe 2a       	or	r15, r30
    3b1c:	22 c0       	rjmp	.+68     	; 0x3b62 <vfprintf+0xe8>
    3b1e:	f7 fc       	sbrc	r15, 7
    3b20:	29 c0       	rjmp	.+82     	; 0x3b74 <vfprintf+0xfa>
    3b22:	89 2f       	mov	r24, r25
    3b24:	80 53       	subi	r24, 0x30	; 48
    3b26:	8a 30       	cpi	r24, 0x0A	; 10
    3b28:	70 f4       	brcc	.+28     	; 0x3b46 <vfprintf+0xcc>
    3b2a:	f6 fe       	sbrs	r15, 6
    3b2c:	05 c0       	rjmp	.+10     	; 0x3b38 <vfprintf+0xbe>
    3b2e:	98 9c       	mul	r9, r8
    3b30:	90 2c       	mov	r9, r0
    3b32:	11 24       	eor	r1, r1
    3b34:	98 0e       	add	r9, r24
    3b36:	15 c0       	rjmp	.+42     	; 0x3b62 <vfprintf+0xe8>
    3b38:	e8 9c       	mul	r14, r8
    3b3a:	e0 2c       	mov	r14, r0
    3b3c:	11 24       	eor	r1, r1
    3b3e:	e8 0e       	add	r14, r24
    3b40:	f0 e2       	ldi	r31, 0x20	; 32
    3b42:	ff 2a       	or	r15, r31
    3b44:	0e c0       	rjmp	.+28     	; 0x3b62 <vfprintf+0xe8>
    3b46:	9e 32       	cpi	r25, 0x2E	; 46
    3b48:	29 f4       	brne	.+10     	; 0x3b54 <vfprintf+0xda>
    3b4a:	f6 fc       	sbrc	r15, 6
    3b4c:	6b c1       	rjmp	.+726    	; 0x3e24 <vfprintf+0x3aa>
    3b4e:	40 e4       	ldi	r20, 0x40	; 64
    3b50:	f4 2a       	or	r15, r20
    3b52:	07 c0       	rjmp	.+14     	; 0x3b62 <vfprintf+0xe8>
    3b54:	9c 36       	cpi	r25, 0x6C	; 108
    3b56:	19 f4       	brne	.+6      	; 0x3b5e <vfprintf+0xe4>
    3b58:	50 e8       	ldi	r21, 0x80	; 128
    3b5a:	f5 2a       	or	r15, r21
    3b5c:	02 c0       	rjmp	.+4      	; 0x3b62 <vfprintf+0xe8>
    3b5e:	98 36       	cpi	r25, 0x68	; 104
    3b60:	49 f4       	brne	.+18     	; 0x3b74 <vfprintf+0xfa>
    3b62:	f2 01       	movw	r30, r4
    3b64:	23 fd       	sbrc	r18, 3
    3b66:	95 91       	lpm	r25, Z+
    3b68:	23 ff       	sbrs	r18, 3
    3b6a:	91 91       	ld	r25, Z+
    3b6c:	2f 01       	movw	r4, r30
    3b6e:	99 23       	and	r25, r25
    3b70:	09 f0       	breq	.+2      	; 0x3b74 <vfprintf+0xfa>
    3b72:	b8 cf       	rjmp	.-144    	; 0x3ae4 <vfprintf+0x6a>
    3b74:	89 2f       	mov	r24, r25
    3b76:	85 54       	subi	r24, 0x45	; 69
    3b78:	83 30       	cpi	r24, 0x03	; 3
    3b7a:	18 f0       	brcs	.+6      	; 0x3b82 <vfprintf+0x108>
    3b7c:	80 52       	subi	r24, 0x20	; 32
    3b7e:	83 30       	cpi	r24, 0x03	; 3
    3b80:	38 f4       	brcc	.+14     	; 0x3b90 <vfprintf+0x116>
    3b82:	44 e0       	ldi	r20, 0x04	; 4
    3b84:	50 e0       	ldi	r21, 0x00	; 0
    3b86:	a4 0e       	add	r10, r20
    3b88:	b5 1e       	adc	r11, r21
    3b8a:	5f e3       	ldi	r21, 0x3F	; 63
    3b8c:	59 83       	std	Y+1, r21	; 0x01
    3b8e:	0f c0       	rjmp	.+30     	; 0x3bae <vfprintf+0x134>
    3b90:	93 36       	cpi	r25, 0x63	; 99
    3b92:	31 f0       	breq	.+12     	; 0x3ba0 <vfprintf+0x126>
    3b94:	93 37       	cpi	r25, 0x73	; 115
    3b96:	79 f0       	breq	.+30     	; 0x3bb6 <vfprintf+0x13c>
    3b98:	93 35       	cpi	r25, 0x53	; 83
    3b9a:	09 f0       	breq	.+2      	; 0x3b9e <vfprintf+0x124>
    3b9c:	56 c0       	rjmp	.+172    	; 0x3c4a <vfprintf+0x1d0>
    3b9e:	20 c0       	rjmp	.+64     	; 0x3be0 <vfprintf+0x166>
    3ba0:	f5 01       	movw	r30, r10
    3ba2:	80 81       	ld	r24, Z
    3ba4:	89 83       	std	Y+1, r24	; 0x01
    3ba6:	42 e0       	ldi	r20, 0x02	; 2
    3ba8:	50 e0       	ldi	r21, 0x00	; 0
    3baa:	a4 0e       	add	r10, r20
    3bac:	b5 1e       	adc	r11, r21
    3bae:	61 01       	movw	r12, r2
    3bb0:	01 e0       	ldi	r16, 0x01	; 1
    3bb2:	10 e0       	ldi	r17, 0x00	; 0
    3bb4:	12 c0       	rjmp	.+36     	; 0x3bda <vfprintf+0x160>
    3bb6:	f5 01       	movw	r30, r10
    3bb8:	c0 80       	ld	r12, Z
    3bba:	d1 80       	ldd	r13, Z+1	; 0x01
    3bbc:	f6 fc       	sbrc	r15, 6
    3bbe:	03 c0       	rjmp	.+6      	; 0x3bc6 <vfprintf+0x14c>
    3bc0:	6f ef       	ldi	r22, 0xFF	; 255
    3bc2:	7f ef       	ldi	r23, 0xFF	; 255
    3bc4:	02 c0       	rjmp	.+4      	; 0x3bca <vfprintf+0x150>
    3bc6:	69 2d       	mov	r22, r9
    3bc8:	70 e0       	ldi	r23, 0x00	; 0
    3bca:	42 e0       	ldi	r20, 0x02	; 2
    3bcc:	50 e0       	ldi	r21, 0x00	; 0
    3bce:	a4 0e       	add	r10, r20
    3bd0:	b5 1e       	adc	r11, r21
    3bd2:	c6 01       	movw	r24, r12
    3bd4:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <strnlen>
    3bd8:	8c 01       	movw	r16, r24
    3bda:	5f e7       	ldi	r21, 0x7F	; 127
    3bdc:	f5 22       	and	r15, r21
    3bde:	14 c0       	rjmp	.+40     	; 0x3c08 <vfprintf+0x18e>
    3be0:	f5 01       	movw	r30, r10
    3be2:	c0 80       	ld	r12, Z
    3be4:	d1 80       	ldd	r13, Z+1	; 0x01
    3be6:	f6 fc       	sbrc	r15, 6
    3be8:	03 c0       	rjmp	.+6      	; 0x3bf0 <vfprintf+0x176>
    3bea:	6f ef       	ldi	r22, 0xFF	; 255
    3bec:	7f ef       	ldi	r23, 0xFF	; 255
    3bee:	02 c0       	rjmp	.+4      	; 0x3bf4 <vfprintf+0x17a>
    3bf0:	69 2d       	mov	r22, r9
    3bf2:	70 e0       	ldi	r23, 0x00	; 0
    3bf4:	42 e0       	ldi	r20, 0x02	; 2
    3bf6:	50 e0       	ldi	r21, 0x00	; 0
    3bf8:	a4 0e       	add	r10, r20
    3bfa:	b5 1e       	adc	r11, r21
    3bfc:	c6 01       	movw	r24, r12
    3bfe:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <strnlen_P>
    3c02:	8c 01       	movw	r16, r24
    3c04:	50 e8       	ldi	r21, 0x80	; 128
    3c06:	f5 2a       	or	r15, r21
    3c08:	f3 fe       	sbrs	r15, 3
    3c0a:	07 c0       	rjmp	.+14     	; 0x3c1a <vfprintf+0x1a0>
    3c0c:	1a c0       	rjmp	.+52     	; 0x3c42 <vfprintf+0x1c8>
    3c0e:	80 e2       	ldi	r24, 0x20	; 32
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	b3 01       	movw	r22, r6
    3c14:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <fputc>
    3c18:	ea 94       	dec	r14
    3c1a:	8e 2d       	mov	r24, r14
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	08 17       	cp	r16, r24
    3c20:	19 07       	cpc	r17, r25
    3c22:	a8 f3       	brcs	.-22     	; 0x3c0e <vfprintf+0x194>
    3c24:	0e c0       	rjmp	.+28     	; 0x3c42 <vfprintf+0x1c8>
    3c26:	f6 01       	movw	r30, r12
    3c28:	f7 fc       	sbrc	r15, 7
    3c2a:	85 91       	lpm	r24, Z+
    3c2c:	f7 fe       	sbrs	r15, 7
    3c2e:	81 91       	ld	r24, Z+
    3c30:	6f 01       	movw	r12, r30
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	b3 01       	movw	r22, r6
    3c36:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <fputc>
    3c3a:	e1 10       	cpse	r14, r1
    3c3c:	ea 94       	dec	r14
    3c3e:	01 50       	subi	r16, 0x01	; 1
    3c40:	10 40       	sbci	r17, 0x00	; 0
    3c42:	01 15       	cp	r16, r1
    3c44:	11 05       	cpc	r17, r1
    3c46:	79 f7       	brne	.-34     	; 0x3c26 <vfprintf+0x1ac>
    3c48:	ea c0       	rjmp	.+468    	; 0x3e1e <vfprintf+0x3a4>
    3c4a:	94 36       	cpi	r25, 0x64	; 100
    3c4c:	11 f0       	breq	.+4      	; 0x3c52 <vfprintf+0x1d8>
    3c4e:	99 36       	cpi	r25, 0x69	; 105
    3c50:	69 f5       	brne	.+90     	; 0x3cac <vfprintf+0x232>
    3c52:	f7 fe       	sbrs	r15, 7
    3c54:	08 c0       	rjmp	.+16     	; 0x3c66 <vfprintf+0x1ec>
    3c56:	f5 01       	movw	r30, r10
    3c58:	20 81       	ld	r18, Z
    3c5a:	31 81       	ldd	r19, Z+1	; 0x01
    3c5c:	42 81       	ldd	r20, Z+2	; 0x02
    3c5e:	53 81       	ldd	r21, Z+3	; 0x03
    3c60:	84 e0       	ldi	r24, 0x04	; 4
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	0a c0       	rjmp	.+20     	; 0x3c7a <vfprintf+0x200>
    3c66:	f5 01       	movw	r30, r10
    3c68:	80 81       	ld	r24, Z
    3c6a:	91 81       	ldd	r25, Z+1	; 0x01
    3c6c:	9c 01       	movw	r18, r24
    3c6e:	44 27       	eor	r20, r20
    3c70:	37 fd       	sbrc	r19, 7
    3c72:	40 95       	com	r20
    3c74:	54 2f       	mov	r21, r20
    3c76:	82 e0       	ldi	r24, 0x02	; 2
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	a8 0e       	add	r10, r24
    3c7c:	b9 1e       	adc	r11, r25
    3c7e:	9f e6       	ldi	r25, 0x6F	; 111
    3c80:	f9 22       	and	r15, r25
    3c82:	57 ff       	sbrs	r21, 7
    3c84:	09 c0       	rjmp	.+18     	; 0x3c98 <vfprintf+0x21e>
    3c86:	50 95       	com	r21
    3c88:	40 95       	com	r20
    3c8a:	30 95       	com	r19
    3c8c:	21 95       	neg	r18
    3c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c90:	4f 4f       	sbci	r20, 0xFF	; 255
    3c92:	5f 4f       	sbci	r21, 0xFF	; 255
    3c94:	e0 e8       	ldi	r30, 0x80	; 128
    3c96:	fe 2a       	or	r15, r30
    3c98:	ca 01       	movw	r24, r20
    3c9a:	b9 01       	movw	r22, r18
    3c9c:	a1 01       	movw	r20, r2
    3c9e:	2a e0       	ldi	r18, 0x0A	; 10
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <__ultoa_invert>
    3ca6:	d8 2e       	mov	r13, r24
    3ca8:	d2 18       	sub	r13, r2
    3caa:	40 c0       	rjmp	.+128    	; 0x3d2c <vfprintf+0x2b2>
    3cac:	95 37       	cpi	r25, 0x75	; 117
    3cae:	29 f4       	brne	.+10     	; 0x3cba <vfprintf+0x240>
    3cb0:	1f 2d       	mov	r17, r15
    3cb2:	1f 7e       	andi	r17, 0xEF	; 239
    3cb4:	2a e0       	ldi	r18, 0x0A	; 10
    3cb6:	30 e0       	ldi	r19, 0x00	; 0
    3cb8:	1d c0       	rjmp	.+58     	; 0x3cf4 <vfprintf+0x27a>
    3cba:	1f 2d       	mov	r17, r15
    3cbc:	19 7f       	andi	r17, 0xF9	; 249
    3cbe:	9f 36       	cpi	r25, 0x6F	; 111
    3cc0:	61 f0       	breq	.+24     	; 0x3cda <vfprintf+0x260>
    3cc2:	90 37       	cpi	r25, 0x70	; 112
    3cc4:	20 f4       	brcc	.+8      	; 0x3cce <vfprintf+0x254>
    3cc6:	98 35       	cpi	r25, 0x58	; 88
    3cc8:	09 f0       	breq	.+2      	; 0x3ccc <vfprintf+0x252>
    3cca:	ac c0       	rjmp	.+344    	; 0x3e24 <vfprintf+0x3aa>
    3ccc:	0f c0       	rjmp	.+30     	; 0x3cec <vfprintf+0x272>
    3cce:	90 37       	cpi	r25, 0x70	; 112
    3cd0:	39 f0       	breq	.+14     	; 0x3ce0 <vfprintf+0x266>
    3cd2:	98 37       	cpi	r25, 0x78	; 120
    3cd4:	09 f0       	breq	.+2      	; 0x3cd8 <vfprintf+0x25e>
    3cd6:	a6 c0       	rjmp	.+332    	; 0x3e24 <vfprintf+0x3aa>
    3cd8:	04 c0       	rjmp	.+8      	; 0x3ce2 <vfprintf+0x268>
    3cda:	28 e0       	ldi	r18, 0x08	; 8
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	0a c0       	rjmp	.+20     	; 0x3cf4 <vfprintf+0x27a>
    3ce0:	10 61       	ori	r17, 0x10	; 16
    3ce2:	14 fd       	sbrc	r17, 4
    3ce4:	14 60       	ori	r17, 0x04	; 4
    3ce6:	20 e1       	ldi	r18, 0x10	; 16
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	04 c0       	rjmp	.+8      	; 0x3cf4 <vfprintf+0x27a>
    3cec:	14 fd       	sbrc	r17, 4
    3cee:	16 60       	ori	r17, 0x06	; 6
    3cf0:	20 e1       	ldi	r18, 0x10	; 16
    3cf2:	32 e0       	ldi	r19, 0x02	; 2
    3cf4:	17 ff       	sbrs	r17, 7
    3cf6:	08 c0       	rjmp	.+16     	; 0x3d08 <vfprintf+0x28e>
    3cf8:	f5 01       	movw	r30, r10
    3cfa:	60 81       	ld	r22, Z
    3cfc:	71 81       	ldd	r23, Z+1	; 0x01
    3cfe:	82 81       	ldd	r24, Z+2	; 0x02
    3d00:	93 81       	ldd	r25, Z+3	; 0x03
    3d02:	44 e0       	ldi	r20, 0x04	; 4
    3d04:	50 e0       	ldi	r21, 0x00	; 0
    3d06:	08 c0       	rjmp	.+16     	; 0x3d18 <vfprintf+0x29e>
    3d08:	f5 01       	movw	r30, r10
    3d0a:	80 81       	ld	r24, Z
    3d0c:	91 81       	ldd	r25, Z+1	; 0x01
    3d0e:	bc 01       	movw	r22, r24
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	42 e0       	ldi	r20, 0x02	; 2
    3d16:	50 e0       	ldi	r21, 0x00	; 0
    3d18:	a4 0e       	add	r10, r20
    3d1a:	b5 1e       	adc	r11, r21
    3d1c:	a1 01       	movw	r20, r2
    3d1e:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <__ultoa_invert>
    3d22:	d8 2e       	mov	r13, r24
    3d24:	d2 18       	sub	r13, r2
    3d26:	8f e7       	ldi	r24, 0x7F	; 127
    3d28:	f8 2e       	mov	r15, r24
    3d2a:	f1 22       	and	r15, r17
    3d2c:	f6 fe       	sbrs	r15, 6
    3d2e:	0b c0       	rjmp	.+22     	; 0x3d46 <vfprintf+0x2cc>
    3d30:	5e ef       	ldi	r21, 0xFE	; 254
    3d32:	f5 22       	and	r15, r21
    3d34:	d9 14       	cp	r13, r9
    3d36:	38 f4       	brcc	.+14     	; 0x3d46 <vfprintf+0x2cc>
    3d38:	f4 fe       	sbrs	r15, 4
    3d3a:	07 c0       	rjmp	.+14     	; 0x3d4a <vfprintf+0x2d0>
    3d3c:	f2 fc       	sbrc	r15, 2
    3d3e:	05 c0       	rjmp	.+10     	; 0x3d4a <vfprintf+0x2d0>
    3d40:	8f ee       	ldi	r24, 0xEF	; 239
    3d42:	f8 22       	and	r15, r24
    3d44:	02 c0       	rjmp	.+4      	; 0x3d4a <vfprintf+0x2d0>
    3d46:	1d 2d       	mov	r17, r13
    3d48:	01 c0       	rjmp	.+2      	; 0x3d4c <vfprintf+0x2d2>
    3d4a:	19 2d       	mov	r17, r9
    3d4c:	f4 fe       	sbrs	r15, 4
    3d4e:	0d c0       	rjmp	.+26     	; 0x3d6a <vfprintf+0x2f0>
    3d50:	fe 01       	movw	r30, r28
    3d52:	ed 0d       	add	r30, r13
    3d54:	f1 1d       	adc	r31, r1
    3d56:	80 81       	ld	r24, Z
    3d58:	80 33       	cpi	r24, 0x30	; 48
    3d5a:	19 f4       	brne	.+6      	; 0x3d62 <vfprintf+0x2e8>
    3d5c:	99 ee       	ldi	r25, 0xE9	; 233
    3d5e:	f9 22       	and	r15, r25
    3d60:	08 c0       	rjmp	.+16     	; 0x3d72 <vfprintf+0x2f8>
    3d62:	1f 5f       	subi	r17, 0xFF	; 255
    3d64:	f2 fe       	sbrs	r15, 2
    3d66:	05 c0       	rjmp	.+10     	; 0x3d72 <vfprintf+0x2f8>
    3d68:	03 c0       	rjmp	.+6      	; 0x3d70 <vfprintf+0x2f6>
    3d6a:	8f 2d       	mov	r24, r15
    3d6c:	86 78       	andi	r24, 0x86	; 134
    3d6e:	09 f0       	breq	.+2      	; 0x3d72 <vfprintf+0x2f8>
    3d70:	1f 5f       	subi	r17, 0xFF	; 255
    3d72:	0f 2d       	mov	r16, r15
    3d74:	f3 fc       	sbrc	r15, 3
    3d76:	14 c0       	rjmp	.+40     	; 0x3da0 <vfprintf+0x326>
    3d78:	f0 fe       	sbrs	r15, 0
    3d7a:	0f c0       	rjmp	.+30     	; 0x3d9a <vfprintf+0x320>
    3d7c:	1e 15       	cp	r17, r14
    3d7e:	10 f0       	brcs	.+4      	; 0x3d84 <vfprintf+0x30a>
    3d80:	9d 2c       	mov	r9, r13
    3d82:	0b c0       	rjmp	.+22     	; 0x3d9a <vfprintf+0x320>
    3d84:	9d 2c       	mov	r9, r13
    3d86:	9e 0c       	add	r9, r14
    3d88:	91 1a       	sub	r9, r17
    3d8a:	1e 2d       	mov	r17, r14
    3d8c:	06 c0       	rjmp	.+12     	; 0x3d9a <vfprintf+0x320>
    3d8e:	80 e2       	ldi	r24, 0x20	; 32
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	b3 01       	movw	r22, r6
    3d94:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <fputc>
    3d98:	1f 5f       	subi	r17, 0xFF	; 255
    3d9a:	1e 15       	cp	r17, r14
    3d9c:	c0 f3       	brcs	.-16     	; 0x3d8e <vfprintf+0x314>
    3d9e:	04 c0       	rjmp	.+8      	; 0x3da8 <vfprintf+0x32e>
    3da0:	1e 15       	cp	r17, r14
    3da2:	10 f4       	brcc	.+4      	; 0x3da8 <vfprintf+0x32e>
    3da4:	e1 1a       	sub	r14, r17
    3da6:	01 c0       	rjmp	.+2      	; 0x3daa <vfprintf+0x330>
    3da8:	ee 24       	eor	r14, r14
    3daa:	04 ff       	sbrs	r16, 4
    3dac:	0f c0       	rjmp	.+30     	; 0x3dcc <vfprintf+0x352>
    3dae:	80 e3       	ldi	r24, 0x30	; 48
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	b3 01       	movw	r22, r6
    3db4:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <fputc>
    3db8:	02 ff       	sbrs	r16, 2
    3dba:	1d c0       	rjmp	.+58     	; 0x3df6 <vfprintf+0x37c>
    3dbc:	01 fd       	sbrc	r16, 1
    3dbe:	03 c0       	rjmp	.+6      	; 0x3dc6 <vfprintf+0x34c>
    3dc0:	88 e7       	ldi	r24, 0x78	; 120
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	0e c0       	rjmp	.+28     	; 0x3de2 <vfprintf+0x368>
    3dc6:	88 e5       	ldi	r24, 0x58	; 88
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	0b c0       	rjmp	.+22     	; 0x3de2 <vfprintf+0x368>
    3dcc:	80 2f       	mov	r24, r16
    3dce:	86 78       	andi	r24, 0x86	; 134
    3dd0:	91 f0       	breq	.+36     	; 0x3df6 <vfprintf+0x37c>
    3dd2:	01 ff       	sbrs	r16, 1
    3dd4:	02 c0       	rjmp	.+4      	; 0x3dda <vfprintf+0x360>
    3dd6:	8b e2       	ldi	r24, 0x2B	; 43
    3dd8:	01 c0       	rjmp	.+2      	; 0x3ddc <vfprintf+0x362>
    3dda:	80 e2       	ldi	r24, 0x20	; 32
    3ddc:	f7 fc       	sbrc	r15, 7
    3dde:	8d e2       	ldi	r24, 0x2D	; 45
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	b3 01       	movw	r22, r6
    3de4:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <fputc>
    3de8:	06 c0       	rjmp	.+12     	; 0x3df6 <vfprintf+0x37c>
    3dea:	80 e3       	ldi	r24, 0x30	; 48
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	b3 01       	movw	r22, r6
    3df0:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <fputc>
    3df4:	9a 94       	dec	r9
    3df6:	d9 14       	cp	r13, r9
    3df8:	c0 f3       	brcs	.-16     	; 0x3dea <vfprintf+0x370>
    3dfa:	da 94       	dec	r13
    3dfc:	f1 01       	movw	r30, r2
    3dfe:	ed 0d       	add	r30, r13
    3e00:	f1 1d       	adc	r31, r1
    3e02:	80 81       	ld	r24, Z
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	b3 01       	movw	r22, r6
    3e08:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <fputc>
    3e0c:	dd 20       	and	r13, r13
    3e0e:	a9 f7       	brne	.-22     	; 0x3dfa <vfprintf+0x380>
    3e10:	06 c0       	rjmp	.+12     	; 0x3e1e <vfprintf+0x3a4>
    3e12:	80 e2       	ldi	r24, 0x20	; 32
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	b3 01       	movw	r22, r6
    3e18:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <fputc>
    3e1c:	ea 94       	dec	r14
    3e1e:	ee 20       	and	r14, r14
    3e20:	c1 f7       	brne	.-16     	; 0x3e12 <vfprintf+0x398>
    3e22:	43 ce       	rjmp	.-890    	; 0x3aaa <vfprintf+0x30>
    3e24:	f3 01       	movw	r30, r6
    3e26:	66 81       	ldd	r22, Z+6	; 0x06
    3e28:	77 81       	ldd	r23, Z+7	; 0x07
    3e2a:	cb 01       	movw	r24, r22
    3e2c:	2b 96       	adiw	r28, 0x0b	; 11
    3e2e:	e2 e1       	ldi	r30, 0x12	; 18
    3e30:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <__epilogue_restores__>

00003e34 <strnlen_P>:
    3e34:	fc 01       	movw	r30, r24
    3e36:	05 90       	lpm	r0, Z+
    3e38:	61 50       	subi	r22, 0x01	; 1
    3e3a:	70 40       	sbci	r23, 0x00	; 0
    3e3c:	01 10       	cpse	r0, r1
    3e3e:	d8 f7       	brcc	.-10     	; 0x3e36 <strnlen_P+0x2>
    3e40:	80 95       	com	r24
    3e42:	90 95       	com	r25
    3e44:	8e 0f       	add	r24, r30
    3e46:	9f 1f       	adc	r25, r31
    3e48:	08 95       	ret

00003e4a <strnlen>:
    3e4a:	fc 01       	movw	r30, r24
    3e4c:	61 50       	subi	r22, 0x01	; 1
    3e4e:	70 40       	sbci	r23, 0x00	; 0
    3e50:	01 90       	ld	r0, Z+
    3e52:	01 10       	cpse	r0, r1
    3e54:	d8 f7       	brcc	.-10     	; 0x3e4c <strnlen+0x2>
    3e56:	80 95       	com	r24
    3e58:	90 95       	com	r25
    3e5a:	8e 0f       	add	r24, r30
    3e5c:	9f 1f       	adc	r25, r31
    3e5e:	08 95       	ret

00003e60 <strrev>:
    3e60:	dc 01       	movw	r26, r24
    3e62:	fc 01       	movw	r30, r24
    3e64:	67 2f       	mov	r22, r23
    3e66:	71 91       	ld	r23, Z+
    3e68:	77 23       	and	r23, r23
    3e6a:	e1 f7       	brne	.-8      	; 0x3e64 <strrev+0x4>
    3e6c:	32 97       	sbiw	r30, 0x02	; 2
    3e6e:	04 c0       	rjmp	.+8      	; 0x3e78 <strrev+0x18>
    3e70:	7c 91       	ld	r23, X
    3e72:	6d 93       	st	X+, r22
    3e74:	70 83       	st	Z, r23
    3e76:	62 91       	ld	r22, -Z
    3e78:	ae 17       	cp	r26, r30
    3e7a:	bf 07       	cpc	r27, r31
    3e7c:	c8 f3       	brcs	.-14     	; 0x3e70 <strrev+0x10>
    3e7e:	08 95       	ret

00003e80 <fputc>:
    3e80:	0f 93       	push	r16
    3e82:	1f 93       	push	r17
    3e84:	cf 93       	push	r28
    3e86:	df 93       	push	r29
    3e88:	8c 01       	movw	r16, r24
    3e8a:	eb 01       	movw	r28, r22
    3e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8e:	81 ff       	sbrs	r24, 1
    3e90:	1b c0       	rjmp	.+54     	; 0x3ec8 <fputc+0x48>
    3e92:	82 ff       	sbrs	r24, 2
    3e94:	0d c0       	rjmp	.+26     	; 0x3eb0 <fputc+0x30>
    3e96:	2e 81       	ldd	r18, Y+6	; 0x06
    3e98:	3f 81       	ldd	r19, Y+7	; 0x07
    3e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e9e:	28 17       	cp	r18, r24
    3ea0:	39 07       	cpc	r19, r25
    3ea2:	64 f4       	brge	.+24     	; 0x3ebc <fputc+0x3c>
    3ea4:	e8 81       	ld	r30, Y
    3ea6:	f9 81       	ldd	r31, Y+1	; 0x01
    3ea8:	01 93       	st	Z+, r16
    3eaa:	f9 83       	std	Y+1, r31	; 0x01
    3eac:	e8 83       	st	Y, r30
    3eae:	06 c0       	rjmp	.+12     	; 0x3ebc <fputc+0x3c>
    3eb0:	e8 85       	ldd	r30, Y+8	; 0x08
    3eb2:	f9 85       	ldd	r31, Y+9	; 0x09
    3eb4:	80 2f       	mov	r24, r16
    3eb6:	09 95       	icall
    3eb8:	89 2b       	or	r24, r25
    3eba:	31 f4       	brne	.+12     	; 0x3ec8 <fputc+0x48>
    3ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ebe:	9f 81       	ldd	r25, Y+7	; 0x07
    3ec0:	01 96       	adiw	r24, 0x01	; 1
    3ec2:	9f 83       	std	Y+7, r25	; 0x07
    3ec4:	8e 83       	std	Y+6, r24	; 0x06
    3ec6:	02 c0       	rjmp	.+4      	; 0x3ecc <fputc+0x4c>
    3ec8:	0f ef       	ldi	r16, 0xFF	; 255
    3eca:	1f ef       	ldi	r17, 0xFF	; 255
    3ecc:	c8 01       	movw	r24, r16
    3ece:	df 91       	pop	r29
    3ed0:	cf 91       	pop	r28
    3ed2:	1f 91       	pop	r17
    3ed4:	0f 91       	pop	r16
    3ed6:	08 95       	ret

00003ed8 <__ultoa_invert>:
    3ed8:	fa 01       	movw	r30, r20
    3eda:	aa 27       	eor	r26, r26
    3edc:	28 30       	cpi	r18, 0x08	; 8
    3ede:	51 f1       	breq	.+84     	; 0x3f34 <__ultoa_invert+0x5c>
    3ee0:	20 31       	cpi	r18, 0x10	; 16
    3ee2:	81 f1       	breq	.+96     	; 0x3f44 <__ultoa_invert+0x6c>
    3ee4:	e8 94       	clt
    3ee6:	6f 93       	push	r22
    3ee8:	6e 7f       	andi	r22, 0xFE	; 254
    3eea:	6e 5f       	subi	r22, 0xFE	; 254
    3eec:	7f 4f       	sbci	r23, 0xFF	; 255
    3eee:	8f 4f       	sbci	r24, 0xFF	; 255
    3ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef2:	af 4f       	sbci	r26, 0xFF	; 255
    3ef4:	b1 e0       	ldi	r27, 0x01	; 1
    3ef6:	3e d0       	rcall	.+124    	; 0x3f74 <__ultoa_invert+0x9c>
    3ef8:	b4 e0       	ldi	r27, 0x04	; 4
    3efa:	3c d0       	rcall	.+120    	; 0x3f74 <__ultoa_invert+0x9c>
    3efc:	67 0f       	add	r22, r23
    3efe:	78 1f       	adc	r23, r24
    3f00:	89 1f       	adc	r24, r25
    3f02:	9a 1f       	adc	r25, r26
    3f04:	a1 1d       	adc	r26, r1
    3f06:	68 0f       	add	r22, r24
    3f08:	79 1f       	adc	r23, r25
    3f0a:	8a 1f       	adc	r24, r26
    3f0c:	91 1d       	adc	r25, r1
    3f0e:	a1 1d       	adc	r26, r1
    3f10:	6a 0f       	add	r22, r26
    3f12:	71 1d       	adc	r23, r1
    3f14:	81 1d       	adc	r24, r1
    3f16:	91 1d       	adc	r25, r1
    3f18:	a1 1d       	adc	r26, r1
    3f1a:	20 d0       	rcall	.+64     	; 0x3f5c <__ultoa_invert+0x84>
    3f1c:	09 f4       	brne	.+2      	; 0x3f20 <__ultoa_invert+0x48>
    3f1e:	68 94       	set
    3f20:	3f 91       	pop	r19
    3f22:	2a e0       	ldi	r18, 0x0A	; 10
    3f24:	26 9f       	mul	r18, r22
    3f26:	11 24       	eor	r1, r1
    3f28:	30 19       	sub	r19, r0
    3f2a:	30 5d       	subi	r19, 0xD0	; 208
    3f2c:	31 93       	st	Z+, r19
    3f2e:	de f6       	brtc	.-74     	; 0x3ee6 <__ultoa_invert+0xe>
    3f30:	cf 01       	movw	r24, r30
    3f32:	08 95       	ret
    3f34:	46 2f       	mov	r20, r22
    3f36:	47 70       	andi	r20, 0x07	; 7
    3f38:	40 5d       	subi	r20, 0xD0	; 208
    3f3a:	41 93       	st	Z+, r20
    3f3c:	b3 e0       	ldi	r27, 0x03	; 3
    3f3e:	0f d0       	rcall	.+30     	; 0x3f5e <__ultoa_invert+0x86>
    3f40:	c9 f7       	brne	.-14     	; 0x3f34 <__ultoa_invert+0x5c>
    3f42:	f6 cf       	rjmp	.-20     	; 0x3f30 <__ultoa_invert+0x58>
    3f44:	46 2f       	mov	r20, r22
    3f46:	4f 70       	andi	r20, 0x0F	; 15
    3f48:	40 5d       	subi	r20, 0xD0	; 208
    3f4a:	4a 33       	cpi	r20, 0x3A	; 58
    3f4c:	18 f0       	brcs	.+6      	; 0x3f54 <__ultoa_invert+0x7c>
    3f4e:	49 5d       	subi	r20, 0xD9	; 217
    3f50:	31 fd       	sbrc	r19, 1
    3f52:	40 52       	subi	r20, 0x20	; 32
    3f54:	41 93       	st	Z+, r20
    3f56:	02 d0       	rcall	.+4      	; 0x3f5c <__ultoa_invert+0x84>
    3f58:	a9 f7       	brne	.-22     	; 0x3f44 <__ultoa_invert+0x6c>
    3f5a:	ea cf       	rjmp	.-44     	; 0x3f30 <__ultoa_invert+0x58>
    3f5c:	b4 e0       	ldi	r27, 0x04	; 4
    3f5e:	a6 95       	lsr	r26
    3f60:	97 95       	ror	r25
    3f62:	87 95       	ror	r24
    3f64:	77 95       	ror	r23
    3f66:	67 95       	ror	r22
    3f68:	ba 95       	dec	r27
    3f6a:	c9 f7       	brne	.-14     	; 0x3f5e <__ultoa_invert+0x86>
    3f6c:	00 97       	sbiw	r24, 0x00	; 0
    3f6e:	61 05       	cpc	r22, r1
    3f70:	71 05       	cpc	r23, r1
    3f72:	08 95       	ret
    3f74:	9b 01       	movw	r18, r22
    3f76:	ac 01       	movw	r20, r24
    3f78:	0a 2e       	mov	r0, r26
    3f7a:	06 94       	lsr	r0
    3f7c:	57 95       	ror	r21
    3f7e:	47 95       	ror	r20
    3f80:	37 95       	ror	r19
    3f82:	27 95       	ror	r18
    3f84:	ba 95       	dec	r27
    3f86:	c9 f7       	brne	.-14     	; 0x3f7a <__ultoa_invert+0xa2>
    3f88:	62 0f       	add	r22, r18
    3f8a:	73 1f       	adc	r23, r19
    3f8c:	84 1f       	adc	r24, r20
    3f8e:	95 1f       	adc	r25, r21
    3f90:	a0 1d       	adc	r26, r0
    3f92:	08 95       	ret

00003f94 <__udivmodhi4>:
    3f94:	aa 1b       	sub	r26, r26
    3f96:	bb 1b       	sub	r27, r27
    3f98:	51 e1       	ldi	r21, 0x11	; 17
    3f9a:	07 c0       	rjmp	.+14     	; 0x3faa <__udivmodhi4_ep>

00003f9c <__udivmodhi4_loop>:
    3f9c:	aa 1f       	adc	r26, r26
    3f9e:	bb 1f       	adc	r27, r27
    3fa0:	a6 17       	cp	r26, r22
    3fa2:	b7 07       	cpc	r27, r23
    3fa4:	10 f0       	brcs	.+4      	; 0x3faa <__udivmodhi4_ep>
    3fa6:	a6 1b       	sub	r26, r22
    3fa8:	b7 0b       	sbc	r27, r23

00003faa <__udivmodhi4_ep>:
    3faa:	88 1f       	adc	r24, r24
    3fac:	99 1f       	adc	r25, r25
    3fae:	5a 95       	dec	r21
    3fb0:	a9 f7       	brne	.-22     	; 0x3f9c <__udivmodhi4_loop>
    3fb2:	80 95       	com	r24
    3fb4:	90 95       	com	r25
    3fb6:	bc 01       	movw	r22, r24
    3fb8:	cd 01       	movw	r24, r26
    3fba:	08 95       	ret

00003fbc <_exit>:
    3fbc:	f8 94       	cli

00003fbe <__stop_program>:
    3fbe:	ff cf       	rjmp	.-2      	; 0x3fbe <__stop_program>
