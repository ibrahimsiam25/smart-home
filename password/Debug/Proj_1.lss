
Proj_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fa  00800060  00003a02  00003a96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080015a  0080015a  00003b90  2**0
                  ALLOC
  3 .stab         0000330c  00000000  00000000  00003b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001733  00000000  00000000  00006e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000085cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000870f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000887f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b3b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c160  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c54d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cd1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 35       	cpi	r26, 0x5A	; 90
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e5       	ldi	r26, 0x5A	; 90
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 36       	cpi	r26, 0x6F	; 111
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fd 13 	call	0x27fa	; 0x27fa <main>
      8a:	0c 94 ff 1c 	jmp	0x39fe	; 0x39fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e3       	ldi	r26, 0x31	; 49
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e3       	ldi	r24, 0x31	; 49
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_voidINIT>:
#include"../../Library/STD.h"

#include"../../Library/BIT_MATH.h"
#include "USART_privet.h"
#include "../REG.h"
void USART_voidINIT(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/**/
	UCSRA=0b00100000;
     b4e:	eb e2       	ldi	r30, 0x2B	; 43
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 e2       	ldi	r24, 0x20	; 32
     b54:	80 83       	st	Z, r24
	 *bit4---->enable tx
	 *bit3---->enable rx
	 *bit2---->0--->8bit size
	 *bit0---->init 0
	 *bit1---->init 0   */
	UCSRB=0b00111000;
     b56:	ea e2       	ldi	r30, 0x2A	; 42
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	88 e3       	ldi	r24, 0x38	; 56
     b5c:	80 83       	st	Z, r24
	 * bit4------->0 disable parity
	 * bit3-------->1 bit stop
	 * bit2-------->
	 * bit1--------->8 bit size
	 * */
	UCSRC=0b10000110;
     b5e:	e0 e4       	ldi	r30, 0x40	; 64
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	86 e8       	ldi	r24, 0x86	; 134
     b64:	80 83       	st	Z, r24
	/*buad rate=51-------->9600*/
	UBRRL=51;
     b66:	e9 e2       	ldi	r30, 0x29	; 41
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	83 e3       	ldi	r24, 0x33	; 51
     b6c:	80 83       	st	Z, r24
	UBRRH=0;
     b6e:	e0 e4       	ldi	r30, 0x40	; 64
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	10 82       	st	Z, r1
}
     b74:	cf 91       	pop	r28
     b76:	df 91       	pop	r29
     b78:	08 95       	ret

00000b7a <USART_voidTRANSMITR>:
void USART_voidTRANSMITR(u8 DATA){
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	0f 92       	push	r0
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	89 83       	std	Y+1, r24	; 0x01
	UDR=DATA;
     b86:	ec e2       	ldi	r30, 0x2C	; 44
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	80 83       	st	Z, r24
	while(GET_BIT(UCSRA,5)==0){};
     b8e:	eb e2       	ldi	r30, 0x2B	; 43
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	82 95       	swap	r24
     b96:	86 95       	lsr	r24
     b98:	87 70       	andi	r24, 0x07	; 7
     b9a:	88 2f       	mov	r24, r24
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	81 70       	andi	r24, 0x01	; 1
     ba0:	90 70       	andi	r25, 0x00	; 0
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	a1 f3       	breq	.-24     	; 0xb8e <USART_voidTRANSMITR+0x14>

}
     ba6:	0f 90       	pop	r0
     ba8:	cf 91       	pop	r28
     baa:	df 91       	pop	r29
     bac:	08 95       	ret

00000bae <USART_u8RECIVER>:

u8   USART_u8RECIVER(void){
     bae:	df 93       	push	r29
     bb0:	cf 93       	push	r28
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
	//u8 DATA=UDR;
	while(GET_BIT(UCSRA,7)==0){};
     bb6:	eb e2       	ldi	r30, 0x2B	; 43
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	88 23       	and	r24, r24
     bbe:	dc f7       	brge	.-10     	; 0xbb6 <USART_u8RECIVER+0x8>
	return UDR;
     bc0:	ec e2       	ldi	r30, 0x2C	; 44
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
}
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <USART_VoidSendString>:

void USART_VoidSendString(u8 *COPYu8StringPtr){
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <USART_VoidSendString+0x6>
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	9b 83       	std	Y+3, r25	; 0x03
     bda:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8Itterator=0;
     bdc:	19 82       	std	Y+1, r1	; 0x01
     bde:	0e c0       	rjmp	.+28     	; 0xbfc <USART_VoidSendString+0x30>
	while(COPYu8StringPtr[LOC_u8Itterator]!='\0'){

		USART_voidTRANSMITR(COPYu8StringPtr[LOC_u8Itterator]);
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	28 2f       	mov	r18, r24
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	9b 81       	ldd	r25, Y+3	; 0x03
     bea:	fc 01       	movw	r30, r24
     bec:	e2 0f       	add	r30, r18
     bee:	f3 1f       	adc	r31, r19
     bf0:	80 81       	ld	r24, Z
     bf2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <USART_voidTRANSMITR>
		LOC_u8Itterator=LOC_u8Itterator+1;
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void USART_VoidSendString(u8 *COPYu8StringPtr){
	u8 LOC_u8Itterator=0;
	while(COPYu8StringPtr[LOC_u8Itterator]!='\0'){
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	28 2f       	mov	r18, r24
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	9b 81       	ldd	r25, Y+3	; 0x03
     c06:	fc 01       	movw	r30, r24
     c08:	e2 0f       	add	r30, r18
     c0a:	f3 1f       	adc	r31, r19
     c0c:	80 81       	ld	r24, Z
     c0e:	88 23       	and	r24, r24
     c10:	39 f7       	brne	.-50     	; 0xbe0 <USART_VoidSendString+0x14>

		USART_voidTRANSMITR(COPYu8StringPtr[LOC_u8Itterator]);
		LOC_u8Itterator=LOC_u8Itterator+1;
	}

}
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <USART_PtrRecieveString>:

u8 STRING[20];
u8 *USART_PtrRecieveString(void){
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	00 d0       	rcall	.+0      	; 0xc24 <USART_PtrRecieveString+0x6>
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
	u8 i=0;
     c28:	1a 82       	std	Y+2, r1	; 0x02
     c2a:	0b c0       	rjmp	.+22     	; 0xc42 <USART_PtrRecieveString+0x24>
	u8 x;
	while((x=USART_u8RECIVER())!=13){
		STRING[i++]=x;
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	88 2f       	mov	r24, r24
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	fc 01       	movw	r30, r24
     c34:	e5 5a       	subi	r30, 0xA5	; 165
     c36:	fe 4f       	sbci	r31, 0xFE	; 254
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	80 83       	st	Z, r24
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	8f 5f       	subi	r24, 0xFF	; 255
     c40:	8a 83       	std	Y+2, r24	; 0x02

u8 STRING[20];
u8 *USART_PtrRecieveString(void){
	u8 i=0;
	u8 x;
	while((x=USART_u8RECIVER())!=13){
     c42:	0e 94 d7 05 	call	0xbae	; 0xbae <USART_u8RECIVER>
     c46:	89 83       	std	Y+1, r24	; 0x01
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	8d 30       	cpi	r24, 0x0D	; 13
     c4c:	79 f7       	brne	.-34     	; 0xc2c <USART_PtrRecieveString+0xe>
		STRING[i++]=x;

	}
	STRING[i]='\0';
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	88 2f       	mov	r24, r24
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	fc 01       	movw	r30, r24
     c56:	e5 5a       	subi	r30, 0xA5	; 165
     c58:	fe 4f       	sbci	r31, 0xFE	; 254
     c5a:	10 82       	st	Z, r1

	return STRING;
     c5c:	8b e5       	ldi	r24, 0x5B	; 91
     c5e:	91 e0       	ldi	r25, 0x01	; 1
}
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	cf 91       	pop	r28
     c66:	df 91       	pop	r29
     c68:	08 95       	ret

00000c6a <DIO_init>:

#include "DIO.h"


void DIO_init (u8 portNumber, u8 pinNumber, u8 pinDirection)
{
     c6a:	df 93       	push	r29
     c6c:	cf 93       	push	r28
     c6e:	00 d0       	rcall	.+0      	; 0xc70 <DIO_init+0x6>
     c70:	00 d0       	rcall	.+0      	; 0xc72 <DIO_init+0x8>
     c72:	0f 92       	push	r0
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	89 83       	std	Y+1, r24	; 0x01
     c7a:	6a 83       	std	Y+2, r22	; 0x02
     c7c:	4b 83       	std	Y+3, r20	; 0x03
	switch (portNumber)
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	3d 83       	std	Y+5, r19	; 0x05
     c86:	2c 83       	std	Y+4, r18	; 0x04
     c88:	8c 81       	ldd	r24, Y+4	; 0x04
     c8a:	9d 81       	ldd	r25, Y+5	; 0x05
     c8c:	82 34       	cpi	r24, 0x42	; 66
     c8e:	91 05       	cpc	r25, r1
     c90:	09 f4       	brne	.+2      	; 0xc94 <DIO_init+0x2a>
     c92:	48 c0       	rjmp	.+144    	; 0xd24 <DIO_init+0xba>
     c94:	2c 81       	ldd	r18, Y+4	; 0x04
     c96:	3d 81       	ldd	r19, Y+5	; 0x05
     c98:	23 34       	cpi	r18, 0x43	; 67
     c9a:	31 05       	cpc	r19, r1
     c9c:	34 f4       	brge	.+12     	; 0xcaa <DIO_init+0x40>
     c9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ca0:	9d 81       	ldd	r25, Y+5	; 0x05
     ca2:	81 34       	cpi	r24, 0x41	; 65
     ca4:	91 05       	cpc	r25, r1
     ca6:	71 f0       	breq	.+28     	; 0xcc4 <DIO_init+0x5a>
     ca8:	cb c0       	rjmp	.+406    	; 0xe40 <DIO_init+0x1d6>
     caa:	2c 81       	ldd	r18, Y+4	; 0x04
     cac:	3d 81       	ldd	r19, Y+5	; 0x05
     cae:	23 34       	cpi	r18, 0x43	; 67
     cb0:	31 05       	cpc	r19, r1
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <DIO_init+0x4c>
     cb4:	67 c0       	rjmp	.+206    	; 0xd84 <DIO_init+0x11a>
     cb6:	8c 81       	ldd	r24, Y+4	; 0x04
     cb8:	9d 81       	ldd	r25, Y+5	; 0x05
     cba:	84 34       	cpi	r24, 0x44	; 68
     cbc:	91 05       	cpc	r25, r1
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <DIO_init+0x58>
     cc0:	91 c0       	rjmp	.+290    	; 0xde4 <DIO_init+0x17a>
     cc2:	be c0       	rjmp	.+380    	; 0xe40 <DIO_init+0x1d6>
	{
		case PORT_A:
			if (pinDirection == OUT)
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	a1 f4       	brne	.+40     	; 0xcf2 <DIO_init+0x88>
			{
				SET_BIT(DDRA, pinNumber);
     cca:	aa e3       	ldi	r26, 0x3A	; 58
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	ea e3       	ldi	r30, 0x3A	; 58
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <DIO_init+0x7e>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <DIO_init+0x7a>
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	a7 c0       	rjmp	.+334    	; 0xe40 <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	88 23       	and	r24, r24
     cf6:	09 f0       	breq	.+2      	; 0xcfa <DIO_init+0x90>
     cf8:	a3 c0       	rjmp	.+326    	; 0xe40 <DIO_init+0x1d6>
			{
				CLR_BIT(DDRA, pinNumber);
     cfa:	aa e3       	ldi	r26, 0x3A	; 58
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ea e3       	ldi	r30, 0x3A	; 58
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	48 2f       	mov	r20, r24
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 2e       	mov	r0, r18
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <DIO_init+0xae>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	0a 94       	dec	r0
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <DIO_init+0xaa>
     d1c:	80 95       	com	r24
     d1e:	84 23       	and	r24, r20
     d20:	8c 93       	st	X, r24
     d22:	8e c0       	rjmp	.+284    	; 0xe40 <DIO_init+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_B:
			if (pinDirection == OUT)
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	a1 f4       	brne	.+40     	; 0xd52 <DIO_init+0xe8>
			{
				SET_BIT(DDRB, pinNumber);
     d2a:	a7 e3       	ldi	r26, 0x37	; 55
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e3       	ldi	r30, 0x37	; 55
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_init+0xde>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_init+0xda>
     d4c:	84 2b       	or	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	77 c0       	rjmp	.+238    	; 0xe40 <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	88 23       	and	r24, r24
     d56:	09 f0       	breq	.+2      	; 0xd5a <DIO_init+0xf0>
     d58:	73 c0       	rjmp	.+230    	; 0xe40 <DIO_init+0x1d6>
			{
				CLR_BIT(DDRB, pinNumber);
     d5a:	a7 e3       	ldi	r26, 0x37	; 55
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e7 e3       	ldi	r30, 0x37	; 55
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_init+0x10e>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_init+0x10a>
     d7c:	80 95       	com	r24
     d7e:	84 23       	and	r24, r20
     d80:	8c 93       	st	X, r24
     d82:	5e c0       	rjmp	.+188    	; 0xe40 <DIO_init+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_C:
			if (pinDirection == OUT)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <DIO_init+0x148>
			{
				SET_BIT(DDRC, pinNumber);
     d8a:	a4 e3       	ldi	r26, 0x34	; 52
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e4 e3       	ldi	r30, 0x34	; 52
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_init+0x13e>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_init+0x13a>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	47 c0       	rjmp	.+142    	; 0xe40 <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	88 23       	and	r24, r24
     db6:	09 f0       	breq	.+2      	; 0xdba <DIO_init+0x150>
     db8:	43 c0       	rjmp	.+134    	; 0xe40 <DIO_init+0x1d6>
			{
				CLR_BIT(DDRC, pinNumber);
     dba:	a4 e3       	ldi	r26, 0x34	; 52
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e4 e3       	ldi	r30, 0x34	; 52
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_init+0x16e>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_init+0x16a>
     ddc:	80 95       	com	r24
     dde:	84 23       	and	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	2e c0       	rjmp	.+92     	; 0xe40 <DIO_init+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_D:
			if (pinDirection == OUT)
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	a1 f4       	brne	.+40     	; 0xe12 <DIO_init+0x1a8>
			{
				SET_BIT(DDRD, pinNumber);
     dea:	a1 e3       	ldi	r26, 0x31	; 49
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e1 e3       	ldi	r30, 0x31	; 49
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_init+0x19e>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_init+0x19a>
     e0c:	84 2b       	or	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	17 c0       	rjmp	.+46     	; 0xe40 <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	88 23       	and	r24, r24
     e16:	a1 f4       	brne	.+40     	; 0xe40 <DIO_init+0x1d6>
			{
				CLR_BIT(DDRD, pinNumber);
     e18:	a1 e3       	ldi	r26, 0x31	; 49
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e1 e3       	ldi	r30, 0x31	; 49
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_init+0x1cc>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_init+0x1c8>
     e3a:	80 95       	com	r24
     e3c:	84 23       	and	r24, r20
     e3e:	8c 93       	st	X, r24
			{
				// ERR
			}
			break;
	}
}
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <DIO_write>:

void DIO_write (u8 portNumber, u8 pinNumber, u8 pinValue)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	00 d0       	rcall	.+0      	; 0xe56 <DIO_write+0x6>
     e56:	00 d0       	rcall	.+0      	; 0xe58 <DIO_write+0x8>
     e58:	0f 92       	push	r0
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	6a 83       	std	Y+2, r22	; 0x02
     e62:	4b 83       	std	Y+3, r20	; 0x03
	switch (portNumber)
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	3d 83       	std	Y+5, r19	; 0x05
     e6c:	2c 83       	std	Y+4, r18	; 0x04
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	9d 81       	ldd	r25, Y+5	; 0x05
     e72:	82 34       	cpi	r24, 0x42	; 66
     e74:	91 05       	cpc	r25, r1
     e76:	09 f4       	brne	.+2      	; 0xe7a <DIO_write+0x2a>
     e78:	48 c0       	rjmp	.+144    	; 0xf0a <DIO_write+0xba>
     e7a:	2c 81       	ldd	r18, Y+4	; 0x04
     e7c:	3d 81       	ldd	r19, Y+5	; 0x05
     e7e:	23 34       	cpi	r18, 0x43	; 67
     e80:	31 05       	cpc	r19, r1
     e82:	34 f4       	brge	.+12     	; 0xe90 <DIO_write+0x40>
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	9d 81       	ldd	r25, Y+5	; 0x05
     e88:	81 34       	cpi	r24, 0x41	; 65
     e8a:	91 05       	cpc	r25, r1
     e8c:	71 f0       	breq	.+28     	; 0xeaa <DIO_write+0x5a>
     e8e:	cb c0       	rjmp	.+406    	; 0x1026 <DIO_write+0x1d6>
     e90:	2c 81       	ldd	r18, Y+4	; 0x04
     e92:	3d 81       	ldd	r19, Y+5	; 0x05
     e94:	23 34       	cpi	r18, 0x43	; 67
     e96:	31 05       	cpc	r19, r1
     e98:	09 f4       	brne	.+2      	; 0xe9c <DIO_write+0x4c>
     e9a:	67 c0       	rjmp	.+206    	; 0xf6a <DIO_write+0x11a>
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ea0:	84 34       	cpi	r24, 0x44	; 68
     ea2:	91 05       	cpc	r25, r1
     ea4:	09 f4       	brne	.+2      	; 0xea8 <DIO_write+0x58>
     ea6:	91 c0       	rjmp	.+290    	; 0xfca <DIO_write+0x17a>
     ea8:	be c0       	rjmp	.+380    	; 0x1026 <DIO_write+0x1d6>
	{
		case PORT_A:
			if (pinValue == HIGH)
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	a1 f4       	brne	.+40     	; 0xed8 <DIO_write+0x88>
			{
				SET_BIT(PORTA, pinNumber);
     eb0:	ab e3       	ldi	r26, 0x3B	; 59
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	eb e3       	ldi	r30, 0x3B	; 59
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_write+0x7e>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_write+0x7a>
     ed2:	84 2b       	or	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	a7 c0       	rjmp	.+334    	; 0x1026 <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	88 23       	and	r24, r24
     edc:	09 f0       	breq	.+2      	; 0xee0 <DIO_write+0x90>
     ede:	a3 c0       	rjmp	.+326    	; 0x1026 <DIO_write+0x1d6>
			{
				CLR_BIT(PORTA, pinNumber);
     ee0:	ab e3       	ldi	r26, 0x3B	; 59
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	eb e3       	ldi	r30, 0x3B	; 59
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	48 2f       	mov	r20, r24
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 2e       	mov	r0, r18
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_write+0xae>
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	0a 94       	dec	r0
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_write+0xaa>
     f02:	80 95       	com	r24
     f04:	84 23       	and	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	8e c0       	rjmp	.+284    	; 0x1026 <DIO_write+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_B:
			if (pinValue == HIGH)
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	a1 f4       	brne	.+40     	; 0xf38 <DIO_write+0xe8>
			{
				SET_BIT(PORTB, pinNumber);
     f10:	a8 e3       	ldi	r26, 0x38	; 56
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e8 e3       	ldi	r30, 0x38	; 56
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_write+0xde>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_write+0xda>
     f32:	84 2b       	or	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	77 c0       	rjmp	.+238    	; 0x1026 <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	88 23       	and	r24, r24
     f3c:	09 f0       	breq	.+2      	; 0xf40 <DIO_write+0xf0>
     f3e:	73 c0       	rjmp	.+230    	; 0x1026 <DIO_write+0x1d6>
			{
				CLR_BIT(PORTB, pinNumber);
     f40:	a8 e3       	ldi	r26, 0x38	; 56
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e8 e3       	ldi	r30, 0x38	; 56
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_write+0x10e>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_write+0x10a>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	5e c0       	rjmp	.+188    	; 0x1026 <DIO_write+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_C:
			if (pinValue == HIGH)
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	a1 f4       	brne	.+40     	; 0xf98 <DIO_write+0x148>
			{
				SET_BIT(PORTC, pinNumber);
     f70:	a5 e3       	ldi	r26, 0x35	; 53
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e5 e3       	ldi	r30, 0x35	; 53
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_write+0x13e>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_write+0x13a>
     f92:	84 2b       	or	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	47 c0       	rjmp	.+142    	; 0x1026 <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	88 23       	and	r24, r24
     f9c:	09 f0       	breq	.+2      	; 0xfa0 <DIO_write+0x150>
     f9e:	43 c0       	rjmp	.+134    	; 0x1026 <DIO_write+0x1d6>
			{
				CLR_BIT(PORTC, pinNumber);
     fa0:	a5 e3       	ldi	r26, 0x35	; 53
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e5 e3       	ldi	r30, 0x35	; 53
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_write+0x16e>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_write+0x16a>
     fc2:	80 95       	com	r24
     fc4:	84 23       	and	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	2e c0       	rjmp	.+92     	; 0x1026 <DIO_write+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_D:
			if (pinValue == HIGH)
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	a1 f4       	brne	.+40     	; 0xff8 <DIO_write+0x1a8>
			{
				SET_BIT(PORTD, pinNumber);
     fd0:	a2 e3       	ldi	r26, 0x32	; 50
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e2 e3       	ldi	r30, 0x32	; 50
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_write+0x19e>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_write+0x19a>
     ff2:	84 2b       	or	r24, r20
     ff4:	8c 93       	st	X, r24
     ff6:	17 c0       	rjmp	.+46     	; 0x1026 <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	88 23       	and	r24, r24
     ffc:	a1 f4       	brne	.+40     	; 0x1026 <DIO_write+0x1d6>
			{
				CLR_BIT(PORTD, pinNumber);
     ffe:	a2 e3       	ldi	r26, 0x32	; 50
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e2 e3       	ldi	r30, 0x32	; 50
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_write+0x1cc>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_write+0x1c8>
    1020:	80 95       	com	r24
    1022:	84 23       	and	r24, r20
    1024:	8c 93       	st	X, r24
			{
				// ERR
			}
			break;
	}
}
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <DIO_toggle>:

void DIO_toggle (u8 portNumber, u8 pinNumber)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	00 d0       	rcall	.+0      	; 0x103c <DIO_toggle+0x6>
    103c:	00 d0       	rcall	.+0      	; 0x103e <DIO_toggle+0x8>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	6a 83       	std	Y+2, r22	; 0x02
	switch (portNumber)
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3c 83       	std	Y+4, r19	; 0x04
    104e:	2b 83       	std	Y+3, r18	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	82 34       	cpi	r24, 0x42	; 66
    1056:	91 05       	cpc	r25, r1
    1058:	51 f1       	breq	.+84     	; 0x10ae <DIO_toggle+0x78>
    105a:	2b 81       	ldd	r18, Y+3	; 0x03
    105c:	3c 81       	ldd	r19, Y+4	; 0x04
    105e:	23 34       	cpi	r18, 0x43	; 67
    1060:	31 05       	cpc	r19, r1
    1062:	34 f4       	brge	.+12     	; 0x1070 <DIO_toggle+0x3a>
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	81 34       	cpi	r24, 0x41	; 65
    106a:	91 05       	cpc	r25, r1
    106c:	61 f0       	breq	.+24     	; 0x1086 <DIO_toggle+0x50>
    106e:	5a c0       	rjmp	.+180    	; 0x1124 <DIO_toggle+0xee>
    1070:	2b 81       	ldd	r18, Y+3	; 0x03
    1072:	3c 81       	ldd	r19, Y+4	; 0x04
    1074:	23 34       	cpi	r18, 0x43	; 67
    1076:	31 05       	cpc	r19, r1
    1078:	71 f1       	breq	.+92     	; 0x10d6 <DIO_toggle+0xa0>
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	9c 81       	ldd	r25, Y+4	; 0x04
    107e:	84 34       	cpi	r24, 0x44	; 68
    1080:	91 05       	cpc	r25, r1
    1082:	e9 f1       	breq	.+122    	; 0x10fe <DIO_toggle+0xc8>
    1084:	4f c0       	rjmp	.+158    	; 0x1124 <DIO_toggle+0xee>
	{
		case PORT_A:
			TOG_BIT(PORTA, pinNumber);
    1086:	ab e3       	ldi	r26, 0x3B	; 59
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	eb e3       	ldi	r30, 0x3B	; 59
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_toggle+0x6e>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_toggle+0x6a>
    10a8:	84 27       	eor	r24, r20
    10aa:	8c 93       	st	X, r24
    10ac:	3b c0       	rjmp	.+118    	; 0x1124 <DIO_toggle+0xee>
			break;
		case PORT_B:
			TOG_BIT(PORTB, pinNumber);
    10ae:	a8 e3       	ldi	r26, 0x38	; 56
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e8 e3       	ldi	r30, 0x38	; 56
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_toggle+0x96>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_toggle+0x92>
    10d0:	84 27       	eor	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	27 c0       	rjmp	.+78     	; 0x1124 <DIO_toggle+0xee>
			break;
		case PORT_C:
			TOG_BIT(PORTC, pinNumber);
    10d6:	a5 e3       	ldi	r26, 0x35	; 53
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e3       	ldi	r30, 0x35	; 53
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_toggle+0xbe>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_toggle+0xba>
    10f8:	84 27       	eor	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	13 c0       	rjmp	.+38     	; 0x1124 <DIO_toggle+0xee>
			break;
		case PORT_D:
			TOG_BIT(PORTD, pinNumber);
    10fe:	a2 e3       	ldi	r26, 0x32	; 50
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e2 e3       	ldi	r30, 0x32	; 50
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	48 2f       	mov	r20, r24
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 2e       	mov	r0, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_toggle+0xe6>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	0a 94       	dec	r0
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_toggle+0xe2>
    1120:	84 27       	eor	r24, r20
    1122:	8c 93       	st	X, r24
			break;
		default:
			// ERR
			break;
	}
}
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <DIO_read>:

u8   DIO_read (u8 portNumber, u8 pinNumber)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	00 d0       	rcall	.+0      	; 0x1138 <DIO_read+0x6>
    1138:	00 d0       	rcall	.+0      	; 0x113a <DIO_read+0x8>
    113a:	0f 92       	push	r0
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	8a 83       	std	Y+2, r24	; 0x02
    1142:	6b 83       	std	Y+3, r22	; 0x03
	u8 pinValue = 0;
    1144:	19 82       	std	Y+1, r1	; 0x01
	switch (portNumber)
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	3d 83       	std	Y+5, r19	; 0x05
    114e:	2c 83       	std	Y+4, r18	; 0x04
    1150:	4c 81       	ldd	r20, Y+4	; 0x04
    1152:	5d 81       	ldd	r21, Y+5	; 0x05
    1154:	42 34       	cpi	r20, 0x42	; 66
    1156:	51 05       	cpc	r21, r1
    1158:	41 f1       	breq	.+80     	; 0x11aa <DIO_read+0x78>
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	9d 81       	ldd	r25, Y+5	; 0x05
    115e:	83 34       	cpi	r24, 0x43	; 67
    1160:	91 05       	cpc	r25, r1
    1162:	34 f4       	brge	.+12     	; 0x1170 <DIO_read+0x3e>
    1164:	2c 81       	ldd	r18, Y+4	; 0x04
    1166:	3d 81       	ldd	r19, Y+5	; 0x05
    1168:	21 34       	cpi	r18, 0x41	; 65
    116a:	31 05       	cpc	r19, r1
    116c:	61 f0       	breq	.+24     	; 0x1186 <DIO_read+0x54>
    116e:	52 c0       	rjmp	.+164    	; 0x1214 <DIO_read+0xe2>
    1170:	4c 81       	ldd	r20, Y+4	; 0x04
    1172:	5d 81       	ldd	r21, Y+5	; 0x05
    1174:	43 34       	cpi	r20, 0x43	; 67
    1176:	51 05       	cpc	r21, r1
    1178:	51 f1       	breq	.+84     	; 0x11ce <DIO_read+0x9c>
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	84 34       	cpi	r24, 0x44	; 68
    1180:	91 05       	cpc	r25, r1
    1182:	b9 f1       	breq	.+110    	; 0x11f2 <DIO_read+0xc0>
    1184:	47 c0       	rjmp	.+142    	; 0x1214 <DIO_read+0xe2>
	{
		case PORT_A:
			pinValue = GET_BIT(PINA, pinNumber);
    1186:	e9 e3       	ldi	r30, 0x39	; 57
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	88 2f       	mov	r24, r24
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	a9 01       	movw	r20, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_read+0x6c>
    119a:	55 95       	asr	r21
    119c:	47 95       	ror	r20
    119e:	8a 95       	dec	r24
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_read+0x68>
    11a2:	ca 01       	movw	r24, r20
    11a4:	81 70       	andi	r24, 0x01	; 1
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	35 c0       	rjmp	.+106    	; 0x1214 <DIO_read+0xe2>
			break;
		case PORT_B:
			pinValue = GET_BIT(PINB, pinNumber);
    11aa:	e6 e3       	ldi	r30, 0x36	; 54
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	a9 01       	movw	r20, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_read+0x90>
    11be:	55 95       	asr	r21
    11c0:	47 95       	ror	r20
    11c2:	8a 95       	dec	r24
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_read+0x8c>
    11c6:	ca 01       	movw	r24, r20
    11c8:	81 70       	andi	r24, 0x01	; 1
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	23 c0       	rjmp	.+70     	; 0x1214 <DIO_read+0xe2>
			break;
		case PORT_C:
			pinValue = GET_BIT(PINC, pinNumber);
    11ce:	e3 e3       	ldi	r30, 0x33	; 51
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	a9 01       	movw	r20, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_read+0xb4>
    11e2:	55 95       	asr	r21
    11e4:	47 95       	ror	r20
    11e6:	8a 95       	dec	r24
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <DIO_read+0xb0>
    11ea:	ca 01       	movw	r24, r20
    11ec:	81 70       	andi	r24, 0x01	; 1
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	11 c0       	rjmp	.+34     	; 0x1214 <DIO_read+0xe2>
			break;
		case PORT_D:
			pinValue = GET_BIT(PIND, pinNumber);
    11f2:	e0 e3       	ldi	r30, 0x30	; 48
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	a9 01       	movw	r20, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_read+0xd8>
    1206:	55 95       	asr	r21
    1208:	47 95       	ror	r20
    120a:	8a 95       	dec	r24
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_read+0xd4>
    120e:	ca 01       	movw	r24, r20
    1210:	81 70       	andi	r24, 0x01	; 1
    1212:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			// ERR
			break;
	}
	return pinValue;
    1214:	89 81       	ldd	r24, Y+1	; 0x01
}
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    122e:	ea e3       	ldi	r30, 0x3A	; 58
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	8f e7       	ldi	r24, 0x7F	; 127
    1234:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    1236:	e7 e3       	ldi	r30, 0x37	; 55
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	8d ef       	ldi	r24, 0xFD	; 253
    123c:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    123e:	e4 e3       	ldi	r30, 0x34	; 52
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	83 e1       	ldi	r24, 0x13	; 19
    1244:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    1246:	e1 e3       	ldi	r30, 0x31	; 49
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    124c:	eb e3       	ldi	r30, 0x3B	; 59
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    1252:	e8 e3       	ldi	r30, 0x38	; 56
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	84 ef       	ldi	r24, 0xF4	; 244
    1258:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    125a:	e5 e3       	ldi	r30, 0x35	; 53
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    1260:	e2 e3       	ldi	r30, 0x32	; 50
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	8c e3       	ldi	r24, 0x3C	; 60
    1266:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    1268:	81 e0       	ldi	r24, 0x01	; 1
}
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	2e 97       	sbiw	r28, 0x0e	; 14
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	8a 83       	std	Y+2, r24	; 0x02
    1286:	6b 83       	std	Y+3, r22	; 0x03
    1288:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	84 30       	cpi	r24, 0x04	; 4
    1292:	08 f0       	brcs	.+2      	; 0x1296 <DIO_enu_SetPinDirection+0x26>
    1294:	0c c1       	rjmp	.+536    	; 0x14ae <DIO_enu_SetPinDirection+0x23e>
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	88 30       	cpi	r24, 0x08	; 8
    129a:	08 f0       	brcs	.+2      	; 0x129e <DIO_enu_SetPinDirection+0x2e>
    129c:	08 c1       	rjmp	.+528    	; 0x14ae <DIO_enu_SetPinDirection+0x23e>
    129e:	8c 81       	ldd	r24, Y+4	; 0x04
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	21 f0       	breq	.+8      	; 0x12ac <DIO_enu_SetPinDirection+0x3c>
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	88 23       	and	r24, r24
    12a8:	09 f0       	breq	.+2      	; 0x12ac <DIO_enu_SetPinDirection+0x3c>
    12aa:	01 c1       	rjmp	.+514    	; 0x14ae <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	3e 87       	std	Y+14, r19	; 0x0e
    12b4:	2d 87       	std	Y+13, r18	; 0x0d
    12b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	09 f4       	brne	.+2      	; 0x12c2 <DIO_enu_SetPinDirection+0x52>
    12c0:	4f c0       	rjmp	.+158    	; 0x1360 <DIO_enu_SetPinDirection+0xf0>
    12c2:	2d 85       	ldd	r18, Y+13	; 0x0d
    12c4:	3e 85       	ldd	r19, Y+14	; 0x0e
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <DIO_enu_SetPinDirection+0x66>
    12cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	71 f0       	breq	.+28     	; 0x12f0 <DIO_enu_SetPinDirection+0x80>
    12d4:	ed c0       	rjmp	.+474    	; 0x14b0 <DIO_enu_SetPinDirection+0x240>
    12d6:	2d 85       	ldd	r18, Y+13	; 0x0d
    12d8:	3e 85       	ldd	r19, Y+14	; 0x0e
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	31 05       	cpc	r19, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <DIO_enu_SetPinDirection+0x72>
    12e0:	77 c0       	rjmp	.+238    	; 0x13d0 <DIO_enu_SetPinDirection+0x160>
    12e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e6:	83 30       	cpi	r24, 0x03	; 3
    12e8:	91 05       	cpc	r25, r1
    12ea:	09 f4       	brne	.+2      	; 0x12ee <DIO_enu_SetPinDirection+0x7e>
    12ec:	a9 c0       	rjmp	.+338    	; 0x1440 <DIO_enu_SetPinDirection+0x1d0>
    12ee:	e0 c0       	rjmp	.+448    	; 0x14b0 <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3c 87       	std	Y+12, r19	; 0x0c
    12f8:	2b 87       	std	Y+11, r18	; 0x0b
    12fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    12fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	d1 f0       	breq	.+52     	; 0x1336 <DIO_enu_SetPinDirection+0xc6>
    1302:	2b 85       	ldd	r18, Y+11	; 0x0b
    1304:	3c 85       	ldd	r19, Y+12	; 0x0c
    1306:	21 30       	cpi	r18, 0x01	; 1
    1308:	31 05       	cpc	r19, r1
    130a:	09 f0       	breq	.+2      	; 0x130e <DIO_enu_SetPinDirection+0x9e>
    130c:	d1 c0       	rjmp	.+418    	; 0x14b0 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    130e:	aa e3       	ldi	r26, 0x3A	; 58
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	ea e3       	ldi	r30, 0x3A	; 58
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_enu_SetPinDirection+0xbc>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_enu_SetPinDirection+0xb8>
    1330:	84 2b       	or	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	bd c0       	rjmp	.+378    	; 0x14b0 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    1336:	aa e3       	ldi	r26, 0x3A	; 58
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	ea e3       	ldi	r30, 0x3A	; 58
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_enu_SetPinDirection+0xe4>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_enu_SetPinDirection+0xe0>
    1358:	80 95       	com	r24
    135a:	84 23       	and	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	a8 c0       	rjmp	.+336    	; 0x14b0 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	3a 87       	std	Y+10, r19	; 0x0a
    1368:	29 87       	std	Y+9, r18	; 0x09
    136a:	89 85       	ldd	r24, Y+9	; 0x09
    136c:	9a 85       	ldd	r25, Y+10	; 0x0a
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	d1 f0       	breq	.+52     	; 0x13a6 <DIO_enu_SetPinDirection+0x136>
    1372:	29 85       	ldd	r18, Y+9	; 0x09
    1374:	3a 85       	ldd	r19, Y+10	; 0x0a
    1376:	21 30       	cpi	r18, 0x01	; 1
    1378:	31 05       	cpc	r19, r1
    137a:	09 f0       	breq	.+2      	; 0x137e <DIO_enu_SetPinDirection+0x10e>
    137c:	99 c0       	rjmp	.+306    	; 0x14b0 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    137e:	a7 e3       	ldi	r26, 0x37	; 55
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e7 e3       	ldi	r30, 0x37	; 55
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_enu_SetPinDirection+0x12c>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_enu_SetPinDirection+0x128>
    13a0:	84 2b       	or	r24, r20
    13a2:	8c 93       	st	X, r24
    13a4:	85 c0       	rjmp	.+266    	; 0x14b0 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    13a6:	a7 e3       	ldi	r26, 0x37	; 55
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e7 e3       	ldi	r30, 0x37	; 55
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	48 2f       	mov	r20, r24
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	02 2e       	mov	r0, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <DIO_enu_SetPinDirection+0x154>
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	0a 94       	dec	r0
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <DIO_enu_SetPinDirection+0x150>
    13c8:	80 95       	com	r24
    13ca:	84 23       	and	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	70 c0       	rjmp	.+224    	; 0x14b0 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	38 87       	std	Y+8, r19	; 0x08
    13d8:	2f 83       	std	Y+7, r18	; 0x07
    13da:	8f 81       	ldd	r24, Y+7	; 0x07
    13dc:	98 85       	ldd	r25, Y+8	; 0x08
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	d1 f0       	breq	.+52     	; 0x1416 <DIO_enu_SetPinDirection+0x1a6>
    13e2:	2f 81       	ldd	r18, Y+7	; 0x07
    13e4:	38 85       	ldd	r19, Y+8	; 0x08
    13e6:	21 30       	cpi	r18, 0x01	; 1
    13e8:	31 05       	cpc	r19, r1
    13ea:	09 f0       	breq	.+2      	; 0x13ee <DIO_enu_SetPinDirection+0x17e>
    13ec:	61 c0       	rjmp	.+194    	; 0x14b0 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    13ee:	a4 e3       	ldi	r26, 0x34	; 52
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e4 e3       	ldi	r30, 0x34	; 52
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	48 2f       	mov	r20, r24
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	02 2e       	mov	r0, r18
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_enu_SetPinDirection+0x19c>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_enu_SetPinDirection+0x198>
    1410:	84 2b       	or	r24, r20
    1412:	8c 93       	st	X, r24
    1414:	4d c0       	rjmp	.+154    	; 0x14b0 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    1416:	a4 e3       	ldi	r26, 0x34	; 52
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e4 e3       	ldi	r30, 0x34	; 52
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	48 2f       	mov	r20, r24
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 2e       	mov	r0, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_enu_SetPinDirection+0x1c4>
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	0a 94       	dec	r0
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_enu_SetPinDirection+0x1c0>
    1438:	80 95       	com	r24
    143a:	84 23       	and	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	38 c0       	rjmp	.+112    	; 0x14b0 <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3e 83       	std	Y+6, r19	; 0x06
    1448:	2d 83       	std	Y+5, r18	; 0x05
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	c9 f0       	breq	.+50     	; 0x1484 <DIO_enu_SetPinDirection+0x214>
    1452:	2d 81       	ldd	r18, Y+5	; 0x05
    1454:	3e 81       	ldd	r19, Y+6	; 0x06
    1456:	21 30       	cpi	r18, 0x01	; 1
    1458:	31 05       	cpc	r19, r1
    145a:	51 f5       	brne	.+84     	; 0x14b0 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    145c:	a1 e3       	ldi	r26, 0x31	; 49
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e1 e3       	ldi	r30, 0x31	; 49
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <DIO_enu_SetPinDirection+0x20a>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <DIO_enu_SetPinDirection+0x206>
    147e:	84 2b       	or	r24, r20
    1480:	8c 93       	st	X, r24
    1482:	16 c0       	rjmp	.+44     	; 0x14b0 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    1484:	a1 e3       	ldi	r26, 0x31	; 49
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e1 e3       	ldi	r30, 0x31	; 49
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_enu_SetPinDirection+0x232>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_enu_SetPinDirection+0x22e>
    14a6:	80 95       	com	r24
    14a8:	84 23       	and	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    14ae:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b2:	2e 96       	adiw	r28, 0x0e	; 14
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
    14cc:	2e 97       	sbiw	r28, 0x0e	; 14
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	f8 94       	cli
    14d2:	de bf       	out	0x3e, r29	; 62
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	cd bf       	out	0x3d, r28	; 61
    14d8:	8a 83       	std	Y+2, r24	; 0x02
    14da:	6b 83       	std	Y+3, r22	; 0x03
    14dc:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	84 30       	cpi	r24, 0x04	; 4
    14e6:	08 f0       	brcs	.+2      	; 0x14ea <DIO_enu_SetPinValue+0x26>
    14e8:	0c c1       	rjmp	.+536    	; 0x1702 <DIO_enu_SetPinValue+0x23e>
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	88 30       	cpi	r24, 0x08	; 8
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <DIO_enu_SetPinValue+0x2e>
    14f0:	08 c1       	rjmp	.+528    	; 0x1702 <DIO_enu_SetPinValue+0x23e>
    14f2:	8c 81       	ldd	r24, Y+4	; 0x04
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	21 f0       	breq	.+8      	; 0x1500 <DIO_enu_SetPinValue+0x3c>
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	88 23       	and	r24, r24
    14fc:	09 f0       	breq	.+2      	; 0x1500 <DIO_enu_SetPinValue+0x3c>
    14fe:	01 c1       	rjmp	.+514    	; 0x1702 <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	3e 87       	std	Y+14, r19	; 0x0e
    1508:	2d 87       	std	Y+13, r18	; 0x0d
    150a:	8d 85       	ldd	r24, Y+13	; 0x0d
    150c:	9e 85       	ldd	r25, Y+14	; 0x0e
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	91 05       	cpc	r25, r1
    1512:	09 f4       	brne	.+2      	; 0x1516 <DIO_enu_SetPinValue+0x52>
    1514:	4f c0       	rjmp	.+158    	; 0x15b4 <DIO_enu_SetPinValue+0xf0>
    1516:	2d 85       	ldd	r18, Y+13	; 0x0d
    1518:	3e 85       	ldd	r19, Y+14	; 0x0e
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	2c f4       	brge	.+10     	; 0x152a <DIO_enu_SetPinValue+0x66>
    1520:	8d 85       	ldd	r24, Y+13	; 0x0d
    1522:	9e 85       	ldd	r25, Y+14	; 0x0e
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	71 f0       	breq	.+28     	; 0x1544 <DIO_enu_SetPinValue+0x80>
    1528:	ed c0       	rjmp	.+474    	; 0x1704 <DIO_enu_SetPinValue+0x240>
    152a:	2d 85       	ldd	r18, Y+13	; 0x0d
    152c:	3e 85       	ldd	r19, Y+14	; 0x0e
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	09 f4       	brne	.+2      	; 0x1536 <DIO_enu_SetPinValue+0x72>
    1534:	77 c0       	rjmp	.+238    	; 0x1624 <DIO_enu_SetPinValue+0x160>
    1536:	8d 85       	ldd	r24, Y+13	; 0x0d
    1538:	9e 85       	ldd	r25, Y+14	; 0x0e
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	91 05       	cpc	r25, r1
    153e:	09 f4       	brne	.+2      	; 0x1542 <DIO_enu_SetPinValue+0x7e>
    1540:	a9 c0       	rjmp	.+338    	; 0x1694 <DIO_enu_SetPinValue+0x1d0>
    1542:	e0 c0       	rjmp	.+448    	; 0x1704 <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	3c 87       	std	Y+12, r19	; 0x0c
    154c:	2b 87       	std	Y+11, r18	; 0x0b
    154e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1550:	9c 85       	ldd	r25, Y+12	; 0x0c
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	d1 f0       	breq	.+52     	; 0x158a <DIO_enu_SetPinValue+0xc6>
    1556:	2b 85       	ldd	r18, Y+11	; 0x0b
    1558:	3c 85       	ldd	r19, Y+12	; 0x0c
    155a:	21 30       	cpi	r18, 0x01	; 1
    155c:	31 05       	cpc	r19, r1
    155e:	09 f0       	breq	.+2      	; 0x1562 <DIO_enu_SetPinValue+0x9e>
    1560:	d1 c0       	rjmp	.+418    	; 0x1704 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    1562:	ab e3       	ldi	r26, 0x3B	; 59
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	eb e3       	ldi	r30, 0x3B	; 59
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_enu_SetPinValue+0xbc>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_enu_SetPinValue+0xb8>
    1584:	84 2b       	or	r24, r20
    1586:	8c 93       	st	X, r24
    1588:	bd c0       	rjmp	.+378    	; 0x1704 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    158a:	ab e3       	ldi	r26, 0x3B	; 59
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	eb e3       	ldi	r30, 0x3B	; 59
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_enu_SetPinValue+0xe4>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DIO_enu_SetPinValue+0xe0>
    15ac:	80 95       	com	r24
    15ae:	84 23       	and	r24, r20
    15b0:	8c 93       	st	X, r24
    15b2:	a8 c0       	rjmp	.+336    	; 0x1704 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    15b4:	8c 81       	ldd	r24, Y+4	; 0x04
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	3a 87       	std	Y+10, r19	; 0x0a
    15bc:	29 87       	std	Y+9, r18	; 0x09
    15be:	89 85       	ldd	r24, Y+9	; 0x09
    15c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	d1 f0       	breq	.+52     	; 0x15fa <DIO_enu_SetPinValue+0x136>
    15c6:	29 85       	ldd	r18, Y+9	; 0x09
    15c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    15ca:	21 30       	cpi	r18, 0x01	; 1
    15cc:	31 05       	cpc	r19, r1
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <DIO_enu_SetPinValue+0x10e>
    15d0:	99 c0       	rjmp	.+306    	; 0x1704 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    15d2:	a8 e3       	ldi	r26, 0x38	; 56
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e8 e3       	ldi	r30, 0x38	; 56
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_enu_SetPinValue+0x12c>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <DIO_enu_SetPinValue+0x128>
    15f4:	84 2b       	or	r24, r20
    15f6:	8c 93       	st	X, r24
    15f8:	85 c0       	rjmp	.+266    	; 0x1704 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    15fa:	a8 e3       	ldi	r26, 0x38	; 56
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e8 e3       	ldi	r30, 0x38	; 56
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_enu_SetPinValue+0x154>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_enu_SetPinValue+0x150>
    161c:	80 95       	com	r24
    161e:	84 23       	and	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	70 c0       	rjmp	.+224    	; 0x1704 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    1624:	8c 81       	ldd	r24, Y+4	; 0x04
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	38 87       	std	Y+8, r19	; 0x08
    162c:	2f 83       	std	Y+7, r18	; 0x07
    162e:	8f 81       	ldd	r24, Y+7	; 0x07
    1630:	98 85       	ldd	r25, Y+8	; 0x08
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	d1 f0       	breq	.+52     	; 0x166a <DIO_enu_SetPinValue+0x1a6>
    1636:	2f 81       	ldd	r18, Y+7	; 0x07
    1638:	38 85       	ldd	r19, Y+8	; 0x08
    163a:	21 30       	cpi	r18, 0x01	; 1
    163c:	31 05       	cpc	r19, r1
    163e:	09 f0       	breq	.+2      	; 0x1642 <DIO_enu_SetPinValue+0x17e>
    1640:	61 c0       	rjmp	.+194    	; 0x1704 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    1642:	a5 e3       	ldi	r26, 0x35	; 53
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e5 e3       	ldi	r30, 0x35	; 53
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <DIO_enu_SetPinValue+0x19c>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <DIO_enu_SetPinValue+0x198>
    1664:	84 2b       	or	r24, r20
    1666:	8c 93       	st	X, r24
    1668:	4d c0       	rjmp	.+154    	; 0x1704 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    166a:	a5 e3       	ldi	r26, 0x35	; 53
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e5 e3       	ldi	r30, 0x35	; 53
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 2e       	mov	r0, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <DIO_enu_SetPinValue+0x1c4>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	0a 94       	dec	r0
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <DIO_enu_SetPinValue+0x1c0>
    168c:	80 95       	com	r24
    168e:	84 23       	and	r24, r20
    1690:	8c 93       	st	X, r24
    1692:	38 c0       	rjmp	.+112    	; 0x1704 <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	3e 83       	std	Y+6, r19	; 0x06
    169c:	2d 83       	std	Y+5, r18	; 0x05
    169e:	8d 81       	ldd	r24, Y+5	; 0x05
    16a0:	9e 81       	ldd	r25, Y+6	; 0x06
    16a2:	00 97       	sbiw	r24, 0x00	; 0
    16a4:	c9 f0       	breq	.+50     	; 0x16d8 <DIO_enu_SetPinValue+0x214>
    16a6:	2d 81       	ldd	r18, Y+5	; 0x05
    16a8:	3e 81       	ldd	r19, Y+6	; 0x06
    16aa:	21 30       	cpi	r18, 0x01	; 1
    16ac:	31 05       	cpc	r19, r1
    16ae:	51 f5       	brne	.+84     	; 0x1704 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    16b0:	a2 e3       	ldi	r26, 0x32	; 50
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e2 e3       	ldi	r30, 0x32	; 50
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <DIO_enu_SetPinValue+0x20a>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <DIO_enu_SetPinValue+0x206>
    16d2:	84 2b       	or	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	16 c0       	rjmp	.+44     	; 0x1704 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    16d8:	a2 e3       	ldi	r26, 0x32	; 50
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e2 e3       	ldi	r30, 0x32	; 50
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_enu_SetPinValue+0x232>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_enu_SetPinValue+0x22e>
    16fa:	80 95       	com	r24
    16fc:	84 23       	and	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    1702:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    1704:	89 81       	ldd	r24, Y+1	; 0x01
}
    1706:	2e 96       	adiw	r28, 0x0e	; 14
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	27 97       	sbiw	r28, 0x07	; 7
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	8a 83       	std	Y+2, r24	; 0x02
    172e:	6b 83       	std	Y+3, r22	; 0x03
    1730:	5d 83       	std	Y+5, r21	; 0x05
    1732:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	84 30       	cpi	r24, 0x04	; 4
    173c:	08 f0       	brcs	.+2      	; 0x1740 <DIO_enu_GetPinValue+0x28>
    173e:	7a c0       	rjmp	.+244    	; 0x1834 <DIO_enu_GetPinValue+0x11c>
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	88 30       	cpi	r24, 0x08	; 8
    1744:	08 f0       	brcs	.+2      	; 0x1748 <DIO_enu_GetPinValue+0x30>
    1746:	76 c0       	rjmp	.+236    	; 0x1834 <DIO_enu_GetPinValue+0x11c>
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	9d 81       	ldd	r25, Y+5	; 0x05
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	09 f4       	brne	.+2      	; 0x1752 <DIO_enu_GetPinValue+0x3a>
    1750:	71 c0       	rjmp	.+226    	; 0x1834 <DIO_enu_GetPinValue+0x11c>
    {
        switch (Copy_u8_PortId)
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	3f 83       	std	Y+7, r19	; 0x07
    175a:	2e 83       	std	Y+6, r18	; 0x06
    175c:	4e 81       	ldd	r20, Y+6	; 0x06
    175e:	5f 81       	ldd	r21, Y+7	; 0x07
    1760:	41 30       	cpi	r20, 0x01	; 1
    1762:	51 05       	cpc	r21, r1
    1764:	59 f1       	breq	.+86     	; 0x17bc <DIO_enu_GetPinValue+0xa4>
    1766:	8e 81       	ldd	r24, Y+6	; 0x06
    1768:	9f 81       	ldd	r25, Y+7	; 0x07
    176a:	82 30       	cpi	r24, 0x02	; 2
    176c:	91 05       	cpc	r25, r1
    176e:	34 f4       	brge	.+12     	; 0x177c <DIO_enu_GetPinValue+0x64>
    1770:	2e 81       	ldd	r18, Y+6	; 0x06
    1772:	3f 81       	ldd	r19, Y+7	; 0x07
    1774:	21 15       	cp	r18, r1
    1776:	31 05       	cpc	r19, r1
    1778:	69 f0       	breq	.+26     	; 0x1794 <DIO_enu_GetPinValue+0x7c>
    177a:	5d c0       	rjmp	.+186    	; 0x1836 <DIO_enu_GetPinValue+0x11e>
    177c:	4e 81       	ldd	r20, Y+6	; 0x06
    177e:	5f 81       	ldd	r21, Y+7	; 0x07
    1780:	42 30       	cpi	r20, 0x02	; 2
    1782:	51 05       	cpc	r21, r1
    1784:	79 f1       	breq	.+94     	; 0x17e4 <DIO_enu_GetPinValue+0xcc>
    1786:	8e 81       	ldd	r24, Y+6	; 0x06
    1788:	9f 81       	ldd	r25, Y+7	; 0x07
    178a:	83 30       	cpi	r24, 0x03	; 3
    178c:	91 05       	cpc	r25, r1
    178e:	09 f4       	brne	.+2      	; 0x1792 <DIO_enu_GetPinValue+0x7a>
    1790:	3d c0       	rjmp	.+122    	; 0x180c <DIO_enu_GetPinValue+0xf4>
    1792:	51 c0       	rjmp	.+162    	; 0x1836 <DIO_enu_GetPinValue+0x11e>
        {
            case DIO_U8_PORTA:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);break;
    1794:	e9 e3       	ldi	r30, 0x39	; 57
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	88 2f       	mov	r24, r24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	a9 01       	movw	r20, r18
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <DIO_enu_GetPinValue+0x94>
    17a8:	55 95       	asr	r21
    17aa:	47 95       	ror	r20
    17ac:	8a 95       	dec	r24
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <DIO_enu_GetPinValue+0x90>
    17b0:	ca 01       	movw	r24, r20
    17b2:	81 70       	andi	r24, 0x01	; 1
    17b4:	ec 81       	ldd	r30, Y+4	; 0x04
    17b6:	fd 81       	ldd	r31, Y+5	; 0x05
    17b8:	80 83       	st	Z, r24
    17ba:	3d c0       	rjmp	.+122    	; 0x1836 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTB:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);break;
    17bc:	e6 e3       	ldi	r30, 0x36	; 54
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	a9 01       	movw	r20, r18
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <DIO_enu_GetPinValue+0xbc>
    17d0:	55 95       	asr	r21
    17d2:	47 95       	ror	r20
    17d4:	8a 95       	dec	r24
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <DIO_enu_GetPinValue+0xb8>
    17d8:	ca 01       	movw	r24, r20
    17da:	81 70       	andi	r24, 0x01	; 1
    17dc:	ec 81       	ldd	r30, Y+4	; 0x04
    17de:	fd 81       	ldd	r31, Y+5	; 0x05
    17e0:	80 83       	st	Z, r24
    17e2:	29 c0       	rjmp	.+82     	; 0x1836 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTC:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);break;
    17e4:	e3 e3       	ldi	r30, 0x33	; 51
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	88 2f       	mov	r24, r24
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a9 01       	movw	r20, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <DIO_enu_GetPinValue+0xe4>
    17f8:	55 95       	asr	r21
    17fa:	47 95       	ror	r20
    17fc:	8a 95       	dec	r24
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <DIO_enu_GetPinValue+0xe0>
    1800:	ca 01       	movw	r24, r20
    1802:	81 70       	andi	r24, 0x01	; 1
    1804:	ec 81       	ldd	r30, Y+4	; 0x04
    1806:	fd 81       	ldd	r31, Y+5	; 0x05
    1808:	80 83       	st	Z, r24
    180a:	15 c0       	rjmp	.+42     	; 0x1836 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTD:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);break;
    180c:	e0 e3       	ldi	r30, 0x30	; 48
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	88 2f       	mov	r24, r24
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	a9 01       	movw	r20, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <DIO_enu_GetPinValue+0x10c>
    1820:	55 95       	asr	r21
    1822:	47 95       	ror	r20
    1824:	8a 95       	dec	r24
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <DIO_enu_GetPinValue+0x108>
    1828:	ca 01       	movw	r24, r20
    182a:	81 70       	andi	r24, 0x01	; 1
    182c:	ec 81       	ldd	r30, Y+4	; 0x04
    182e:	fd 81       	ldd	r31, Y+5	; 0x05
    1830:	80 83       	st	Z, r24
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <DIO_enu_GetPinValue+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    1834:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    1836:	89 81       	ldd	r24, Y+1	; 0x01
}
    1838:	27 96       	adiw	r28, 0x07	; 7
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	2d 97       	sbiw	r28, 0x0d	; 13
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	8a 83       	std	Y+2, r24	; 0x02
    1860:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	84 30       	cpi	r24, 0x04	; 4
    186a:	08 f0       	brcs	.+2      	; 0x186e <DIO_enu_SetPortDirection+0x24>
    186c:	84 c0       	rjmp	.+264    	; 0x1976 <DIO_enu_SetPortDirection+0x12c>
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	21 f0       	breq	.+8      	; 0x187c <DIO_enu_SetPortDirection+0x32>
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	88 23       	and	r24, r24
    1878:	09 f0       	breq	.+2      	; 0x187c <DIO_enu_SetPortDirection+0x32>
    187a:	7d c0       	rjmp	.+250    	; 0x1976 <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	3d 87       	std	Y+13, r19	; 0x0d
    1884:	2c 87       	std	Y+12, r18	; 0x0c
    1886:	8c 85       	ldd	r24, Y+12	; 0x0c
    1888:	9d 85       	ldd	r25, Y+13	; 0x0d
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	91 05       	cpc	r25, r1
    188e:	71 f1       	breq	.+92     	; 0x18ec <DIO_enu_SetPortDirection+0xa2>
    1890:	2c 85       	ldd	r18, Y+12	; 0x0c
    1892:	3d 85       	ldd	r19, Y+13	; 0x0d
    1894:	22 30       	cpi	r18, 0x02	; 2
    1896:	31 05       	cpc	r19, r1
    1898:	2c f4       	brge	.+10     	; 0x18a4 <DIO_enu_SetPortDirection+0x5a>
    189a:	8c 85       	ldd	r24, Y+12	; 0x0c
    189c:	9d 85       	ldd	r25, Y+13	; 0x0d
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	69 f0       	breq	.+26     	; 0x18bc <DIO_enu_SetPortDirection+0x72>
    18a2:	6a c0       	rjmp	.+212    	; 0x1978 <DIO_enu_SetPortDirection+0x12e>
    18a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    18a6:	3d 85       	ldd	r19, Y+13	; 0x0d
    18a8:	22 30       	cpi	r18, 0x02	; 2
    18aa:	31 05       	cpc	r19, r1
    18ac:	b1 f1       	breq	.+108    	; 0x191a <DIO_enu_SetPortDirection+0xd0>
    18ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    18b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    18b2:	83 30       	cpi	r24, 0x03	; 3
    18b4:	91 05       	cpc	r25, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <DIO_enu_SetPortDirection+0x70>
    18b8:	47 c0       	rjmp	.+142    	; 0x1948 <DIO_enu_SetPortDirection+0xfe>
    18ba:	5e c0       	rjmp	.+188    	; 0x1978 <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	3b 87       	std	Y+11, r19	; 0x0b
    18c4:	2a 87       	std	Y+10, r18	; 0x0a
    18c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    18c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	59 f0       	breq	.+22     	; 0x18e4 <DIO_enu_SetPortDirection+0x9a>
    18ce:	2a 85       	ldd	r18, Y+10	; 0x0a
    18d0:	3b 85       	ldd	r19, Y+11	; 0x0b
    18d2:	21 30       	cpi	r18, 0x01	; 1
    18d4:	31 05       	cpc	r19, r1
    18d6:	09 f0       	breq	.+2      	; 0x18da <DIO_enu_SetPortDirection+0x90>
    18d8:	4f c0       	rjmp	.+158    	; 0x1978 <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    18da:	ea e3       	ldi	r30, 0x3A	; 58
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	8f ef       	ldi	r24, 0xFF	; 255
    18e0:	80 83       	st	Z, r24
    18e2:	4a c0       	rjmp	.+148    	; 0x1978 <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    18e4:	ea e3       	ldi	r30, 0x3A	; 58
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	10 82       	st	Z, r1
    18ea:	46 c0       	rjmp	.+140    	; 0x1978 <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	39 87       	std	Y+9, r19	; 0x09
    18f4:	28 87       	std	Y+8, r18	; 0x08
    18f6:	88 85       	ldd	r24, Y+8	; 0x08
    18f8:	99 85       	ldd	r25, Y+9	; 0x09
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	51 f0       	breq	.+20     	; 0x1912 <DIO_enu_SetPortDirection+0xc8>
    18fe:	28 85       	ldd	r18, Y+8	; 0x08
    1900:	39 85       	ldd	r19, Y+9	; 0x09
    1902:	21 30       	cpi	r18, 0x01	; 1
    1904:	31 05       	cpc	r19, r1
    1906:	c1 f5       	brne	.+112    	; 0x1978 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    1908:	e7 e3       	ldi	r30, 0x37	; 55
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	8f ef       	ldi	r24, 0xFF	; 255
    190e:	80 83       	st	Z, r24
    1910:	33 c0       	rjmp	.+102    	; 0x1978 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    1912:	e7 e3       	ldi	r30, 0x37	; 55
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	10 82       	st	Z, r1
    1918:	2f c0       	rjmp	.+94     	; 0x1978 <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	3f 83       	std	Y+7, r19	; 0x07
    1922:	2e 83       	std	Y+6, r18	; 0x06
    1924:	8e 81       	ldd	r24, Y+6	; 0x06
    1926:	9f 81       	ldd	r25, Y+7	; 0x07
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	51 f0       	breq	.+20     	; 0x1940 <DIO_enu_SetPortDirection+0xf6>
    192c:	2e 81       	ldd	r18, Y+6	; 0x06
    192e:	3f 81       	ldd	r19, Y+7	; 0x07
    1930:	21 30       	cpi	r18, 0x01	; 1
    1932:	31 05       	cpc	r19, r1
    1934:	09 f5       	brne	.+66     	; 0x1978 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    1936:	e4 e3       	ldi	r30, 0x34	; 52
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	8f ef       	ldi	r24, 0xFF	; 255
    193c:	80 83       	st	Z, r24
    193e:	1c c0       	rjmp	.+56     	; 0x1978 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    1940:	e4 e3       	ldi	r30, 0x34	; 52
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	10 82       	st	Z, r1
    1946:	18 c0       	rjmp	.+48     	; 0x1978 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	3d 83       	std	Y+5, r19	; 0x05
    1950:	2c 83       	std	Y+4, r18	; 0x04
    1952:	8c 81       	ldd	r24, Y+4	; 0x04
    1954:	9d 81       	ldd	r25, Y+5	; 0x05
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	51 f0       	breq	.+20     	; 0x196e <DIO_enu_SetPortDirection+0x124>
    195a:	2c 81       	ldd	r18, Y+4	; 0x04
    195c:	3d 81       	ldd	r19, Y+5	; 0x05
    195e:	21 30       	cpi	r18, 0x01	; 1
    1960:	31 05       	cpc	r19, r1
    1962:	51 f4       	brne	.+20     	; 0x1978 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    1964:	e1 e3       	ldi	r30, 0x31	; 49
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	8f ef       	ldi	r24, 0xFF	; 255
    196a:	80 83       	st	Z, r24
    196c:	05 c0       	rjmp	.+10     	; 0x1978 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    196e:	e1 e3       	ldi	r30, 0x31	; 49
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	10 82       	st	Z, r1
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    1976:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    1978:	89 81       	ldd	r24, Y+1	; 0x01
}
    197a:	2d 96       	adiw	r28, 0x0d	; 13
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	00 d0       	rcall	.+0      	; 0x1992 <DIO_enu_SetPortValue+0x6>
    1992:	00 d0       	rcall	.+0      	; 0x1994 <DIO_enu_SetPortValue+0x8>
    1994:	0f 92       	push	r0
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	8a 83       	std	Y+2, r24	; 0x02
    199c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	84 30       	cpi	r24, 0x04	; 4
    19a6:	98 f5       	brcc	.+102    	; 0x1a0e <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	3d 83       	std	Y+5, r19	; 0x05
    19b0:	2c 83       	std	Y+4, r18	; 0x04
    19b2:	8c 81       	ldd	r24, Y+4	; 0x04
    19b4:	9d 81       	ldd	r25, Y+5	; 0x05
    19b6:	81 30       	cpi	r24, 0x01	; 1
    19b8:	91 05       	cpc	r25, r1
    19ba:	d1 f0       	breq	.+52     	; 0x19f0 <DIO_enu_SetPortValue+0x64>
    19bc:	2c 81       	ldd	r18, Y+4	; 0x04
    19be:	3d 81       	ldd	r19, Y+5	; 0x05
    19c0:	22 30       	cpi	r18, 0x02	; 2
    19c2:	31 05       	cpc	r19, r1
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <DIO_enu_SetPortValue+0x44>
    19c6:	8c 81       	ldd	r24, Y+4	; 0x04
    19c8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	61 f0       	breq	.+24     	; 0x19e6 <DIO_enu_SetPortValue+0x5a>
    19ce:	20 c0       	rjmp	.+64     	; 0x1a10 <DIO_enu_SetPortValue+0x84>
    19d0:	2c 81       	ldd	r18, Y+4	; 0x04
    19d2:	3d 81       	ldd	r19, Y+5	; 0x05
    19d4:	22 30       	cpi	r18, 0x02	; 2
    19d6:	31 05       	cpc	r19, r1
    19d8:	81 f0       	breq	.+32     	; 0x19fa <DIO_enu_SetPortValue+0x6e>
    19da:	8c 81       	ldd	r24, Y+4	; 0x04
    19dc:	9d 81       	ldd	r25, Y+5	; 0x05
    19de:	83 30       	cpi	r24, 0x03	; 3
    19e0:	91 05       	cpc	r25, r1
    19e2:	81 f0       	breq	.+32     	; 0x1a04 <DIO_enu_SetPortValue+0x78>
    19e4:	15 c0       	rjmp	.+42     	; 0x1a10 <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    19e6:	eb e3       	ldi	r30, 0x3B	; 59
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	80 83       	st	Z, r24
    19ee:	10 c0       	rjmp	.+32     	; 0x1a10 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    19f0:	e8 e3       	ldi	r30, 0x38	; 56
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	80 83       	st	Z, r24
    19f8:	0b c0       	rjmp	.+22     	; 0x1a10 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    19fa:	e5 e3       	ldi	r30, 0x35	; 53
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	80 83       	st	Z, r24
    1a02:	06 c0       	rjmp	.+12     	; 0x1a10 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    1a04:	e2 e3       	ldi	r30, 0x32	; 50
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	80 83       	st	Z, r24
    1a0c:	01 c0       	rjmp	.+2      	; 0x1a10 <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    1a0e:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	00 d0       	rcall	.+0      	; 0x1a28 <DIO_enu_GetPortValue+0x6>
    1a28:	00 d0       	rcall	.+0      	; 0x1a2a <DIO_enu_GetPortValue+0x8>
    1a2a:	00 d0       	rcall	.+0      	; 0x1a2c <DIO_enu_GetPortValue+0xa>
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	8a 83       	std	Y+2, r24	; 0x02
    1a32:	7c 83       	std	Y+4, r23	; 0x04
    1a34:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	84 30       	cpi	r24, 0x04	; 4
    1a3e:	08 f0       	brcs	.+2      	; 0x1a42 <DIO_enu_GetPortValue+0x20>
    1a40:	3f c0       	rjmp	.+126    	; 0x1ac0 <DIO_enu_GetPortValue+0x9e>
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	9c 81       	ldd	r25, Y+4	; 0x04
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	d9 f1       	breq	.+118    	; 0x1ac0 <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	3e 83       	std	Y+6, r19	; 0x06
    1a52:	2d 83       	std	Y+5, r18	; 0x05
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	9e 81       	ldd	r25, Y+6	; 0x06
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	e1 f0       	breq	.+56     	; 0x1a96 <DIO_enu_GetPortValue+0x74>
    1a5e:	2d 81       	ldd	r18, Y+5	; 0x05
    1a60:	3e 81       	ldd	r19, Y+6	; 0x06
    1a62:	22 30       	cpi	r18, 0x02	; 2
    1a64:	31 05       	cpc	r19, r1
    1a66:	2c f4       	brge	.+10     	; 0x1a72 <DIO_enu_GetPortValue+0x50>
    1a68:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	61 f0       	breq	.+24     	; 0x1a88 <DIO_enu_GetPortValue+0x66>
    1a70:	28 c0       	rjmp	.+80     	; 0x1ac2 <DIO_enu_GetPortValue+0xa0>
    1a72:	2d 81       	ldd	r18, Y+5	; 0x05
    1a74:	3e 81       	ldd	r19, Y+6	; 0x06
    1a76:	22 30       	cpi	r18, 0x02	; 2
    1a78:	31 05       	cpc	r19, r1
    1a7a:	a1 f0       	breq	.+40     	; 0x1aa4 <DIO_enu_GetPortValue+0x82>
    1a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a80:	83 30       	cpi	r24, 0x03	; 3
    1a82:	91 05       	cpc	r25, r1
    1a84:	b1 f0       	breq	.+44     	; 0x1ab2 <DIO_enu_GetPortValue+0x90>
    1a86:	1d c0       	rjmp	.+58     	; 0x1ac2 <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    1a88:	e9 e3       	ldi	r30, 0x39	; 57
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a90:	fc 81       	ldd	r31, Y+4	; 0x04
    1a92:	80 83       	st	Z, r24
    1a94:	16 c0       	rjmp	.+44     	; 0x1ac2 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    1a96:	e6 e3       	ldi	r30, 0x36	; 54
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa0:	80 83       	st	Z, r24
    1aa2:	0f c0       	rjmp	.+30     	; 0x1ac2 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    1aa4:	e3 e3       	ldi	r30, 0x33	; 51
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	eb 81       	ldd	r30, Y+3	; 0x03
    1aac:	fc 81       	ldd	r31, Y+4	; 0x04
    1aae:	80 83       	st	Z, r24
    1ab0:	08 c0       	rjmp	.+16     	; 0x1ac2 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    1ab2:	e0 e3       	ldi	r30, 0x30	; 48
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	eb 81       	ldd	r30, Y+3	; 0x03
    1aba:	fc 81       	ldd	r31, Y+4	; 0x04
    1abc:	80 83       	st	Z, r24
    1abe:	01 c0       	rjmp	.+2      	; 0x1ac2 <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    1ac0:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac4:	26 96       	adiw	r28, 0x06	; 6
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <DIO_enu_ToggPin>:
ES_t DIO_enu_ToggPin(u8 Copy_u8_PortId, u8 Copy_u8_PinId){
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	00 d0       	rcall	.+0      	; 0x1adc <DIO_enu_ToggPin+0x6>
    1adc:	00 d0       	rcall	.+0      	; 0x1ade <DIO_enu_ToggPin+0x8>
    1ade:	0f 92       	push	r0
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	8a 83       	std	Y+2, r24	; 0x02
    1ae6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <=DIO_U8_PORTD)&&(Copy_u8_PinId <= DIO_U8_PIN7)){
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	84 30       	cpi	r24, 0x04	; 4
    1af0:	08 f0       	brcs	.+2      	; 0x1af4 <DIO_enu_ToggPin+0x1e>
    1af2:	73 c0       	rjmp	.+230    	; 0x1bda <DIO_enu_ToggPin+0x104>
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	88 30       	cpi	r24, 0x08	; 8
    1af8:	08 f0       	brcs	.+2      	; 0x1afc <DIO_enu_ToggPin+0x26>
    1afa:	6f c0       	rjmp	.+222    	; 0x1bda <DIO_enu_ToggPin+0x104>
        switch (Copy_u8_PortId)
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	3d 83       	std	Y+5, r19	; 0x05
    1b04:	2c 83       	std	Y+4, r18	; 0x04
    1b06:	8c 81       	ldd	r24, Y+4	; 0x04
    1b08:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	49 f1       	breq	.+82     	; 0x1b62 <DIO_enu_ToggPin+0x8c>
    1b10:	2c 81       	ldd	r18, Y+4	; 0x04
    1b12:	3d 81       	ldd	r19, Y+5	; 0x05
    1b14:	22 30       	cpi	r18, 0x02	; 2
    1b16:	31 05       	cpc	r19, r1
    1b18:	2c f4       	brge	.+10     	; 0x1b24 <DIO_enu_ToggPin+0x4e>
    1b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	61 f0       	breq	.+24     	; 0x1b3a <DIO_enu_ToggPin+0x64>
    1b22:	5c c0       	rjmp	.+184    	; 0x1bdc <DIO_enu_ToggPin+0x106>
    1b24:	2c 81       	ldd	r18, Y+4	; 0x04
    1b26:	3d 81       	ldd	r19, Y+5	; 0x05
    1b28:	22 30       	cpi	r18, 0x02	; 2
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	71 f1       	breq	.+92     	; 0x1b8a <DIO_enu_ToggPin+0xb4>
    1b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b30:	9d 81       	ldd	r25, Y+5	; 0x05
    1b32:	83 30       	cpi	r24, 0x03	; 3
    1b34:	91 05       	cpc	r25, r1
    1b36:	e9 f1       	breq	.+122    	; 0x1bb2 <DIO_enu_ToggPin+0xdc>
    1b38:	51 c0       	rjmp	.+162    	; 0x1bdc <DIO_enu_ToggPin+0x106>
	        {
	        case DIO_U8_PORTA:TOG_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    1b3a:	ab e3       	ldi	r26, 0x3B	; 59
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	eb e3       	ldi	r30, 0x3B	; 59
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <DIO_enu_ToggPin+0x82>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <DIO_enu_ToggPin+0x7e>
    1b5c:	84 27       	eor	r24, r20
    1b5e:	8c 93       	st	X, r24
    1b60:	3d c0       	rjmp	.+122    	; 0x1bdc <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTB:TOG_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    1b62:	a8 e3       	ldi	r26, 0x38	; 56
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e8 e3       	ldi	r30, 0x38	; 56
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	48 2f       	mov	r20, r24
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	02 2e       	mov	r0, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <DIO_enu_ToggPin+0xaa>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	0a 94       	dec	r0
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <DIO_enu_ToggPin+0xa6>
    1b84:	84 27       	eor	r24, r20
    1b86:	8c 93       	st	X, r24
    1b88:	29 c0       	rjmp	.+82     	; 0x1bdc <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTC:TOG_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    1b8a:	a5 e3       	ldi	r26, 0x35	; 53
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e5 e3       	ldi	r30, 0x35	; 53
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <DIO_enu_ToggPin+0xd2>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <DIO_enu_ToggPin+0xce>
    1bac:	84 27       	eor	r24, r20
    1bae:	8c 93       	st	X, r24
    1bb0:	15 c0       	rjmp	.+42     	; 0x1bdc <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTD:TOG_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    1bb2:	a2 e3       	ldi	r26, 0x32	; 50
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e2 e3       	ldi	r30, 0x32	; 50
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 2e       	mov	r0, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <DIO_enu_ToggPin+0xfa>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	0a 94       	dec	r0
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <DIO_enu_ToggPin+0xf6>
    1bd4:	84 27       	eor	r24, r20
    1bd6:	8c 93       	st	X, r24
    1bd8:	01 c0       	rjmp	.+2      	; 0x1bdc <DIO_enu_ToggPin+0x106>
	        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    1bda:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01


}
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	08 95       	ret

00001bee <ADC_voidInit>:
#include"ADC_config.h"
#include"ADC_interface.h"
#include"ADC_privet.h"
#include "../REG.h"

void ADC_voidInit(void){
    1bee:	df 93       	push	r29
    1bf0:	cf 93       	push	r28
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
#if ADC_Enable_Status==ADC_ENABLE
    #if ADC_Vref==ADC_AREF_INTERNAL_Vref_TURNED_OFF
	    CLR_BIT(ADMUX,7); CLR_BIT(ADMUX,6);
    #elif ADC_Vref==ADC_AVCC
	    CLR_BIT(ADMUX,7); SET_BIT(ADMUX,6);
    1bf6:	a7 e2       	ldi	r26, 0x27	; 39
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e7 e2       	ldi	r30, 0x27	; 39
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	8f 77       	andi	r24, 0x7F	; 127
    1c02:	8c 93       	st	X, r24
    1c04:	a7 e2       	ldi	r26, 0x27	; 39
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e7 e2       	ldi	r30, 0x27	; 39
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 64       	ori	r24, 0x40	; 64
    1c10:	8c 93       	st	X, r24
    #endif

    #if ADC_Adjustment==ADC_LEFT_ADJUSTMENT
       SET_BIT(ADMUX,5);
    #elif ADC_Adjustment==ADC_RIGHT_ADJUSTMENT
       CLR_BIT(ADMUX,5);
    1c12:	a7 e2       	ldi	r26, 0x27	; 39
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e7 e2       	ldi	r30, 0x27	; 39
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8f 7d       	andi	r24, 0xDF	; 223
    1c1e:	8c 93       	st	X, r24
    #endif

    #if ADC_Channal>=ADC_CHANNAL_0&&ADC_Channal<=ADC_CHANNAL_7
      ADMUX|=ADC_Channal;
    1c20:	a7 e2       	ldi	r26, 0x27	; 39
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e7 e2       	ldi	r30, 0x27	; 39
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	8c 93       	st	X, r24


    #if ADC_Trigger==ADC_SINGLE_CONVERSION
      CLR_BIT(ADCSRA,5);
    #elif ADC_Trigger==ADC_FREE_RUNNING_MODE
      SET_BIT(ADCSRA,5);
    1c2c:	a6 e2       	ldi	r26, 0x26	; 38
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e6 e2       	ldi	r30, 0x26	; 38
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	80 62       	ori	r24, 0x20	; 32
    1c38:	8c 93       	st	X, r24
      CLR_BIT(SFIOR,7); CLR_BIT(SFIOR,6); CLR_BIT(SFIOR,5);
    1c3a:	a0 e5       	ldi	r26, 0x50	; 80
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e0 e5       	ldi	r30, 0x50	; 80
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8f 77       	andi	r24, 0x7F	; 127
    1c46:	8c 93       	st	X, r24
    1c48:	a0 e5       	ldi	r26, 0x50	; 80
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e0 e5       	ldi	r30, 0x50	; 80
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	8f 7b       	andi	r24, 0xBF	; 191
    1c54:	8c 93       	st	X, r24
    1c56:	a0 e5       	ldi	r26, 0x50	; 80
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e0 e5       	ldi	r30, 0x50	; 80
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	8f 7d       	andi	r24, 0xDF	; 223
    1c62:	8c 93       	st	X, r24


    #if ADC_Inturrupt_Mode==ADC_INTERRUPT_ENABLE
      SET_BIT(ADCSRA,3);
    #elif ADC_Inturrupt_Mode==ADC_INTERRUPT_DISABLE
      CLR_BIT(ADCSRA,3);
    1c64:	a6 e2       	ldi	r26, 0x26	; 38
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e6 e2       	ldi	r30, 0x26	; 38
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	87 7f       	andi	r24, 0xF7	; 247
    1c70:	8c 93       	st	X, r24
    #endif

    #if ADC_Prescallur>=ADC_PRESCALLER_2 && ADC_Prescallur<=ADC_PRESCALLER_128
        ADCSRA |= ADC_Prescallur;
    1c72:	a6 e2       	ldi	r26, 0x26	; 38
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e6 e2       	ldi	r30, 0x26	; 38
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	87 60       	ori	r24, 0x07	; 7
    1c7e:	8c 93       	st	X, r24
    #else
          #warning"wrong prescaler"

    #endif

   SET_BIT(ADCSRA,7);
    1c80:	a6 e2       	ldi	r26, 0x26	; 38
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e6 e2       	ldi	r30, 0x26	; 38
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	80 68       	ori	r24, 0x80	; 128
    1c8c:	8c 93       	st	X, r24
#endif
	}
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <ADC_u16GetResult>:
u16  ADC_u16GetResult(void){
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	00 d0       	rcall	.+0      	; 0x1c9a <ADC_u16GetResult+0x6>
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
	u16 LOC_Result=0;
    1c9e:	1a 82       	std	Y+2, r1	; 0x02
    1ca0:	19 82       	std	Y+1, r1	; 0x01
	//SINGL CONVERTION-->Start Conversion
	SET_BIT(ADCSRA,6);
    1ca2:	a6 e2       	ldi	r26, 0x26	; 38
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e6 e2       	ldi	r30, 0x26	; 38
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	80 64       	ori	r24, 0x40	; 64
    1cae:	8c 93       	st	X, r24
	//Read Flag
	while(GET_BIT(ADCSRA,4)==0);
    1cb0:	e6 e2       	ldi	r30, 0x26	; 38
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	82 95       	swap	r24
    1cb8:	8f 70       	andi	r24, 0x0F	; 15
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	81 70       	andi	r24, 0x01	; 1
    1cc0:	90 70       	andi	r25, 0x00	; 0
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	a9 f3       	breq	.-22     	; 0x1cb0 <ADC_u16GetResult+0x1c>
	//Read Counter
    #if ADC_Adjustment==ADC_LEFT_ADJUSTMENT
	    LOC_Result=ADCH;
    #elif ADC_Adjustment==ADC_RIGHT_ADJUSTMENT
	    LOC_Result=ADCL|(ADCH<<8);
    1cc6:	e4 e2       	ldi	r30, 0x24	; 36
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	e5 e2       	ldi	r30, 0x25	; 37
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	88 2f       	mov	r24, r24
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	98 2f       	mov	r25, r24
    1cdc:	88 27       	eor	r24, r24
    1cde:	82 2b       	or	r24, r18
    1ce0:	93 2b       	or	r25, r19
    1ce2:	9a 83       	std	Y+2, r25	; 0x02
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    #endif
	//Clear Flag
	SET_BIT(ADCSRA,4);
    1ce6:	a6 e2       	ldi	r26, 0x26	; 38
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e6 e2       	ldi	r30, 0x26	; 38
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	80 61       	ori	r24, 0x10	; 16
    1cf2:	8c 93       	st	X, r24
	//Return Value
	return LOC_Result;
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	9a 81       	ldd	r25, Y+2	; 0x02

}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <ADC_u16GetChannalResult>:
u16  ADC_u16GetChannalResult(u8 Copy_u8Channal){
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <ADC_u16GetChannalResult+0x6>
    1d08:	0f 92       	push	r0
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	8b 83       	std	Y+3, r24	; 0x03
	u16 LOC_Result=0;
    1d10:	1a 82       	std	Y+2, r1	; 0x02
    1d12:	19 82       	std	Y+1, r1	; 0x01
	//Copy_u8Channal &=0b00000111;
	//Clear Mux
	ADMUX &=0b11100000;
    1d14:	a7 e2       	ldi	r26, 0x27	; 39
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e7 e2       	ldi	r30, 0x27	; 39
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	80 7e       	andi	r24, 0xE0	; 224
    1d20:	8c 93       	st	X, r24
	//Select MUX
	ADMUX|=Copy_u8Channal;
    1d22:	a7 e2       	ldi	r26, 0x27	; 39
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e7 e2       	ldi	r30, 0x27	; 39
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	90 81       	ld	r25, Z
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	89 2b       	or	r24, r25
    1d30:	8c 93       	st	X, r24
	//SINGL CONVERTION-->Start Conversion
	SET_BIT(ADCSRA,6);
    1d32:	a6 e2       	ldi	r26, 0x26	; 38
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e6 e2       	ldi	r30, 0x26	; 38
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	80 64       	ori	r24, 0x40	; 64
    1d3e:	8c 93       	st	X, r24
	//Read Flag
	while(GET_BIT(ADCSRA,4)==0);
    1d40:	e6 e2       	ldi	r30, 0x26	; 38
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	82 95       	swap	r24
    1d48:	8f 70       	andi	r24, 0x0F	; 15
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	81 70       	andi	r24, 0x01	; 1
    1d50:	90 70       	andi	r25, 0x00	; 0
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	a9 f3       	breq	.-22     	; 0x1d40 <ADC_u16GetChannalResult+0x3e>
	//Read Counter
	    #if ADC_Adjustment==ADC_LEFT_ADJUSTMENT
		    LOC_Result=ADCH;
	    #elif ADC_Adjustment==ADC_RIGHT_ADJUSTMENT
		    LOC_Result=ADCL|(ADCH<<8);
    1d56:	e4 e2       	ldi	r30, 0x24	; 36
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	e5 e2       	ldi	r30, 0x25	; 37
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	88 2f       	mov	r24, r24
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	98 2f       	mov	r25, r24
    1d6c:	88 27       	eor	r24, r24
    1d6e:	82 2b       	or	r24, r18
    1d70:	93 2b       	or	r25, r19
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	89 83       	std	Y+1, r24	; 0x01
	    #endif
	//Clear Flag
	SET_BIT(ADCSRA,4);
    1d76:	a6 e2       	ldi	r26, 0x26	; 38
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e6 e2       	ldi	r30, 0x26	; 38
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	80 61       	ori	r24, 0x10	; 16
    1d82:	8c 93       	st	X, r24
	//Return Value
		return LOC_Result;
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <ADC_Enable>:
void ADC_Enable(void){
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA,7);
    1d9c:	a6 e2       	ldi	r26, 0x26	; 38
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e6 e2       	ldi	r30, 0x26	; 38
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	80 68       	ori	r24, 0x80	; 128
    1da8:	8c 93       	st	X, r24
}
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	08 95       	ret

00001db0 <ADC_Disable>:
void ADC_Disable(void){
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA,7);
    1db8:	a6 e2       	ldi	r26, 0x26	; 38
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e6 e2       	ldi	r30, 0x26	; 38
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8f 77       	andi	r24, 0x7F	; 127
    1dc4:	8c 93       	st	X, r24
}
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <LCD_8_bit_init>:
 */

#include "LCD.h"

void LCD_8_bit_init (void) 		/* LCD 8-bit Mode Initialize function */
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	6c 97       	sbiw	r28, 0x1c	; 28
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61

	LCD_CMD_PORT_DIR = 0xFF;		/* Make LCD command port direction as o/p */
    1de0:	e1 e3       	ldi	r30, 0x31	; 49
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	80 83       	st	Z, r24
	LCD_DATA_PORT_DIR = 0xFF;		/* Make LCD data port direction as o/p */
    1de8:	e7 e3       	ldi	r30, 0x37	; 55
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	8f ef       	ldi	r24, 0xFF	; 255
    1dee:	80 83       	st	Z, r24
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	a0 ea       	ldi	r26, 0xA0	; 160
    1df6:	b1 e4       	ldi	r27, 0x41	; 65
    1df8:	89 8f       	std	Y+25, r24	; 0x19
    1dfa:	9a 8f       	std	Y+26, r25	; 0x1a
    1dfc:	ab 8f       	std	Y+27, r26	; 0x1b
    1dfe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e00:	69 8d       	ldd	r22, Y+25	; 0x19
    1e02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	4a ef       	ldi	r20, 0xFA	; 250
    1e0e:	54 e4       	ldi	r21, 0x44	; 68
    1e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	8d 8b       	std	Y+21, r24	; 0x15
    1e1a:	9e 8b       	std	Y+22, r25	; 0x16
    1e1c:	af 8b       	std	Y+23, r26	; 0x17
    1e1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e20:	6d 89       	ldd	r22, Y+21	; 0x15
    1e22:	7e 89       	ldd	r23, Y+22	; 0x16
    1e24:	8f 89       	ldd	r24, Y+23	; 0x17
    1e26:	98 8d       	ldd	r25, Y+24	; 0x18
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	40 e8       	ldi	r20, 0x80	; 128
    1e2e:	5f e3       	ldi	r21, 0x3F	; 63
    1e30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e34:	88 23       	and	r24, r24
    1e36:	2c f4       	brge	.+10     	; 0x1e42 <LCD_8_bit_init+0x76>
		__ticks = 1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	9c 8b       	std	Y+20, r25	; 0x14
    1e3e:	8b 8b       	std	Y+19, r24	; 0x13
    1e40:	3f c0       	rjmp	.+126    	; 0x1ec0 <LCD_8_bit_init+0xf4>
	else if (__tmp > 65535)
    1e42:	6d 89       	ldd	r22, Y+21	; 0x15
    1e44:	7e 89       	ldd	r23, Y+22	; 0x16
    1e46:	8f 89       	ldd	r24, Y+23	; 0x17
    1e48:	98 8d       	ldd	r25, Y+24	; 0x18
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	3f ef       	ldi	r19, 0xFF	; 255
    1e4e:	4f e7       	ldi	r20, 0x7F	; 127
    1e50:	57 e4       	ldi	r21, 0x47	; 71
    1e52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e56:	18 16       	cp	r1, r24
    1e58:	4c f5       	brge	.+82     	; 0x1eac <LCD_8_bit_init+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	40 e2       	ldi	r20, 0x20	; 32
    1e68:	51 e4       	ldi	r21, 0x41	; 65
    1e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	bc 01       	movw	r22, r24
    1e74:	cd 01       	movw	r24, r26
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	9c 8b       	std	Y+20, r25	; 0x14
    1e80:	8b 8b       	std	Y+19, r24	; 0x13
    1e82:	0f c0       	rjmp	.+30     	; 0x1ea2 <LCD_8_bit_init+0xd6>
    1e84:	88 ec       	ldi	r24, 0xC8	; 200
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9a 8b       	std	Y+18, r25	; 0x12
    1e8a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e8c:	89 89       	ldd	r24, Y+17	; 0x11
    1e8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <LCD_8_bit_init+0xc4>
    1e94:	9a 8b       	std	Y+18, r25	; 0x12
    1e96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e98:	8b 89       	ldd	r24, Y+19	; 0x13
    1e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ea0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	69 f7       	brne	.-38     	; 0x1e84 <LCD_8_bit_init+0xb8>
    1eaa:	14 c0       	rjmp	.+40     	; 0x1ed4 <LCD_8_bit_init+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eac:	6d 89       	ldd	r22, Y+21	; 0x15
    1eae:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	9c 8b       	std	Y+20, r25	; 0x14
    1ebe:	8b 8b       	std	Y+19, r24	; 0x13
    1ec0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec4:	98 8b       	std	Y+16, r25	; 0x10
    1ec6:	8f 87       	std	Y+15, r24	; 0x0f
    1ec8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eca:	98 89       	ldd	r25, Y+16	; 0x10
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <LCD_8_bit_init+0x100>
    1ed0:	98 8b       	std	Y+16, r25	; 0x10
    1ed2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(20);					/* LCD Power ON delay always >15ms */

	LCD_8_bit_sendCMD(0x38);		/* Initialization of 16X2 LCD in 8bit mode */
    1ed4:	88 e3       	ldi	r24, 0x38	; 56
    1ed6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0x0C);		/* Display ON Cursor OFF */
    1eda:	8c e0       	ldi	r24, 0x0C	; 12
    1edc:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0x06);		/* Auto Increment cursor */
    1ee0:	86 e0       	ldi	r24, 0x06	; 6
    1ee2:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0x01);		/* clear display */
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_8_bit_sendCMD>
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a0 e0       	ldi	r26, 0x00	; 0
    1ef2:	b0 e4       	ldi	r27, 0x40	; 64
    1ef4:	8b 87       	std	Y+11, r24	; 0x0b
    1ef6:	9c 87       	std	Y+12, r25	; 0x0c
    1ef8:	ad 87       	std	Y+13, r26	; 0x0d
    1efa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4a ef       	ldi	r20, 0xFA	; 250
    1f0a:	54 e4       	ldi	r21, 0x44	; 68
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	8f 83       	std	Y+7, r24	; 0x07
    1f16:	98 87       	std	Y+8, r25	; 0x08
    1f18:	a9 87       	std	Y+9, r26	; 0x09
    1f1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1e:	78 85       	ldd	r23, Y+8	; 0x08
    1f20:	89 85       	ldd	r24, Y+9	; 0x09
    1f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f e3       	ldi	r21, 0x3F	; 63
    1f2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f30:	88 23       	and	r24, r24
    1f32:	2c f4       	brge	.+10     	; 0x1f3e <LCD_8_bit_init+0x172>
		__ticks = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9e 83       	std	Y+6, r25	; 0x06
    1f3a:	8d 83       	std	Y+5, r24	; 0x05
    1f3c:	3f c0       	rjmp	.+126    	; 0x1fbc <LCD_8_bit_init+0x1f0>
	else if (__tmp > 65535)
    1f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f40:	78 85       	ldd	r23, Y+8	; 0x08
    1f42:	89 85       	ldd	r24, Y+9	; 0x09
    1f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f e7       	ldi	r20, 0x7F	; 127
    1f4c:	57 e4       	ldi	r21, 0x47	; 71
    1f4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f52:	18 16       	cp	r1, r24
    1f54:	4c f5       	brge	.+82     	; 0x1fa8 <LCD_8_bit_init+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <LCD_8_bit_init+0x1d2>
    1f80:	88 ec       	ldi	r24, 0xC8	; 200
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	8b 83       	std	Y+3, r24	; 0x03
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <LCD_8_bit_init+0x1c0>
    1f90:	9c 83       	std	Y+4, r25	; 0x04
    1f92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	9e 83       	std	Y+6, r25	; 0x06
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	69 f7       	brne	.-38     	; 0x1f80 <LCD_8_bit_init+0x1b4>
    1fa6:	14 c0       	rjmp	.+40     	; 0x1fd0 <LCD_8_bit_init+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1faa:	78 85       	ldd	r23, Y+8	; 0x08
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9e 83       	std	Y+6, r25	; 0x06
    1fba:	8d 83       	std	Y+5, r24	; 0x05
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	9a 83       	std	Y+2, r25	; 0x02
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <LCD_8_bit_init+0x1fc>
    1fcc:	9a 83       	std	Y+2, r25	; 0x02
    1fce:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);					/* Clear display command delay> 1.63 ms */

	LCD_8_bit_sendCMD(0x80);		/* cursor at home position */
    1fd0:	80 e8       	ldi	r24, 0x80	; 128
    1fd2:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_8_bit_sendCMD>

}
    1fd6:	6c 96       	adiw	r28, 0x1c	; 28
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <LCD_8_bit_sendCMD>:

void LCD_8_bit_sendCMD (u8 cmnd)
{
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	6d 97       	sbiw	r28, 0x1d	; 29
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
    1ffc:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA_PORT = cmnd;
    1ffe:	e8 e3       	ldi	r30, 0x38	; 56
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2004:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<RS);	/* RS=O command register */
    2006:	a2 e3       	ldi	r26, 0x32	; 50
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e2 e3       	ldi	r30, 0x32	; 50
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	8b 7f       	andi	r24, 0xFB	; 251
    2012:	8c 93       	st	X, r24
	LCD_CMD_PORT &= ~(1<<RW);	/* RW=0 Write operation */
    2014:	a2 e3       	ldi	r26, 0x32	; 50
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	e2 e3       	ldi	r30, 0x32	; 50
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	87 7f       	andi	r24, 0xF7	; 247
    2020:	8c 93       	st	X, r24

	/* Enable pulse */
	LCD_CMD_PORT |=  (1<<EN);
    2022:	a2 e3       	ldi	r26, 0x32	; 50
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e2 e3       	ldi	r30, 0x32	; 50
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	80 61       	ori	r24, 0x10	; 16
    202e:	8c 93       	st	X, r24
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a0 e8       	ldi	r26, 0x80	; 128
    2036:	bf e3       	ldi	r27, 0x3F	; 63
    2038:	89 8f       	std	Y+25, r24	; 0x19
    203a:	9a 8f       	std	Y+26, r25	; 0x1a
    203c:	ab 8f       	std	Y+27, r26	; 0x1b
    203e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2040:	69 8d       	ldd	r22, Y+25	; 0x19
    2042:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2044:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2046:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	4a ef       	ldi	r20, 0xFA	; 250
    204e:	54 e4       	ldi	r21, 0x44	; 68
    2050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	8d 8b       	std	Y+21, r24	; 0x15
    205a:	9e 8b       	std	Y+22, r25	; 0x16
    205c:	af 8b       	std	Y+23, r26	; 0x17
    205e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2060:	6d 89       	ldd	r22, Y+21	; 0x15
    2062:	7e 89       	ldd	r23, Y+22	; 0x16
    2064:	8f 89       	ldd	r24, Y+23	; 0x17
    2066:	98 8d       	ldd	r25, Y+24	; 0x18
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e8       	ldi	r20, 0x80	; 128
    206e:	5f e3       	ldi	r21, 0x3F	; 63
    2070:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2074:	88 23       	and	r24, r24
    2076:	2c f4       	brge	.+10     	; 0x2082 <LCD_8_bit_sendCMD+0x9a>
		__ticks = 1;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9c 8b       	std	Y+20, r25	; 0x14
    207e:	8b 8b       	std	Y+19, r24	; 0x13
    2080:	3f c0       	rjmp	.+126    	; 0x2100 <LCD_8_bit_sendCMD+0x118>
	else if (__tmp > 65535)
    2082:	6d 89       	ldd	r22, Y+21	; 0x15
    2084:	7e 89       	ldd	r23, Y+22	; 0x16
    2086:	8f 89       	ldd	r24, Y+23	; 0x17
    2088:	98 8d       	ldd	r25, Y+24	; 0x18
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	3f ef       	ldi	r19, 0xFF	; 255
    208e:	4f e7       	ldi	r20, 0x7F	; 127
    2090:	57 e4       	ldi	r21, 0x47	; 71
    2092:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2096:	18 16       	cp	r1, r24
    2098:	4c f5       	brge	.+82     	; 0x20ec <LCD_8_bit_sendCMD+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209a:	69 8d       	ldd	r22, Y+25	; 0x19
    209c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    209e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e2       	ldi	r20, 0x20	; 32
    20a8:	51 e4       	ldi	r21, 0x41	; 65
    20aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	bc 01       	movw	r22, r24
    20b4:	cd 01       	movw	r24, r26
    20b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	9c 8b       	std	Y+20, r25	; 0x14
    20c0:	8b 8b       	std	Y+19, r24	; 0x13
    20c2:	0f c0       	rjmp	.+30     	; 0x20e2 <LCD_8_bit_sendCMD+0xfa>
    20c4:	88 ec       	ldi	r24, 0xC8	; 200
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9a 8b       	std	Y+18, r25	; 0x12
    20ca:	89 8b       	std	Y+17, r24	; 0x11
    20cc:	89 89       	ldd	r24, Y+17	; 0x11
    20ce:	9a 89       	ldd	r25, Y+18	; 0x12
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <LCD_8_bit_sendCMD+0xe8>
    20d4:	9a 8b       	std	Y+18, r25	; 0x12
    20d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d8:	8b 89       	ldd	r24, Y+19	; 0x13
    20da:	9c 89       	ldd	r25, Y+20	; 0x14
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	9c 8b       	std	Y+20, r25	; 0x14
    20e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e2:	8b 89       	ldd	r24, Y+19	; 0x13
    20e4:	9c 89       	ldd	r25, Y+20	; 0x14
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	69 f7       	brne	.-38     	; 0x20c4 <LCD_8_bit_sendCMD+0xdc>
    20ea:	14 c0       	rjmp	.+40     	; 0x2114 <LCD_8_bit_sendCMD+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ec:	6d 89       	ldd	r22, Y+21	; 0x15
    20ee:	7e 89       	ldd	r23, Y+22	; 0x16
    20f0:	8f 89       	ldd	r24, Y+23	; 0x17
    20f2:	98 8d       	ldd	r25, Y+24	; 0x18
    20f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9c 8b       	std	Y+20, r25	; 0x14
    20fe:	8b 8b       	std	Y+19, r24	; 0x13
    2100:	8b 89       	ldd	r24, Y+19	; 0x13
    2102:	9c 89       	ldd	r25, Y+20	; 0x14
    2104:	98 8b       	std	Y+16, r25	; 0x10
    2106:	8f 87       	std	Y+15, r24	; 0x0f
    2108:	8f 85       	ldd	r24, Y+15	; 0x0f
    210a:	98 89       	ldd	r25, Y+16	; 0x10
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_8_bit_sendCMD+0x124>
    2110:	98 8b       	std	Y+16, r25	; 0x10
    2112:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_CMD_PORT &=  ~(1<<EN);
    2114:	a2 e3       	ldi	r26, 0x32	; 50
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	e2 e3       	ldi	r30, 0x32	; 50
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	8f 7e       	andi	r24, 0xEF	; 239
    2120:	8c 93       	st	X, r24
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a0 ea       	ldi	r26, 0xA0	; 160
    2128:	b0 e4       	ldi	r27, 0x40	; 64
    212a:	8b 87       	std	Y+11, r24	; 0x0b
    212c:	9c 87       	std	Y+12, r25	; 0x0c
    212e:	ad 87       	std	Y+13, r26	; 0x0d
    2130:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2132:	6b 85       	ldd	r22, Y+11	; 0x0b
    2134:	7c 85       	ldd	r23, Y+12	; 0x0c
    2136:	8d 85       	ldd	r24, Y+13	; 0x0d
    2138:	9e 85       	ldd	r25, Y+14	; 0x0e
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	4a ef       	ldi	r20, 0xFA	; 250
    2140:	54 e4       	ldi	r21, 0x44	; 68
    2142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	8f 83       	std	Y+7, r24	; 0x07
    214c:	98 87       	std	Y+8, r25	; 0x08
    214e:	a9 87       	std	Y+9, r26	; 0x09
    2150:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2152:	6f 81       	ldd	r22, Y+7	; 0x07
    2154:	78 85       	ldd	r23, Y+8	; 0x08
    2156:	89 85       	ldd	r24, Y+9	; 0x09
    2158:	9a 85       	ldd	r25, Y+10	; 0x0a
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e8       	ldi	r20, 0x80	; 128
    2160:	5f e3       	ldi	r21, 0x3F	; 63
    2162:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2166:	88 23       	and	r24, r24
    2168:	2c f4       	brge	.+10     	; 0x2174 <LCD_8_bit_sendCMD+0x18c>
		__ticks = 1;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9e 83       	std	Y+6, r25	; 0x06
    2170:	8d 83       	std	Y+5, r24	; 0x05
    2172:	3f c0       	rjmp	.+126    	; 0x21f2 <LCD_8_bit_sendCMD+0x20a>
	else if (__tmp > 65535)
    2174:	6f 81       	ldd	r22, Y+7	; 0x07
    2176:	78 85       	ldd	r23, Y+8	; 0x08
    2178:	89 85       	ldd	r24, Y+9	; 0x09
    217a:	9a 85       	ldd	r25, Y+10	; 0x0a
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2188:	18 16       	cp	r1, r24
    218a:	4c f5       	brge	.+82     	; 0x21de <LCD_8_bit_sendCMD+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218c:	6b 85       	ldd	r22, Y+11	; 0x0b
    218e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2190:	8d 85       	ldd	r24, Y+13	; 0x0d
    2192:	9e 85       	ldd	r25, Y+14	; 0x0e
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e2       	ldi	r20, 0x20	; 32
    219a:	51 e4       	ldi	r21, 0x41	; 65
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	9e 83       	std	Y+6, r25	; 0x06
    21b2:	8d 83       	std	Y+5, r24	; 0x05
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <LCD_8_bit_sendCMD+0x1ec>
    21b6:	88 ec       	ldi	r24, 0xC8	; 200
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	9c 83       	std	Y+4, r25	; 0x04
    21bc:	8b 83       	std	Y+3, r24	; 0x03
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	9c 81       	ldd	r25, Y+4	; 0x04
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <LCD_8_bit_sendCMD+0x1da>
    21c6:	9c 83       	std	Y+4, r25	; 0x04
    21c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ca:	8d 81       	ldd	r24, Y+5	; 0x05
    21cc:	9e 81       	ldd	r25, Y+6	; 0x06
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	9e 83       	std	Y+6, r25	; 0x06
    21d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d4:	8d 81       	ldd	r24, Y+5	; 0x05
    21d6:	9e 81       	ldd	r25, Y+6	; 0x06
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	69 f7       	brne	.-38     	; 0x21b6 <LCD_8_bit_sendCMD+0x1ce>
    21dc:	14 c0       	rjmp	.+40     	; 0x2206 <LCD_8_bit_sendCMD+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21de:	6f 81       	ldd	r22, Y+7	; 0x07
    21e0:	78 85       	ldd	r23, Y+8	; 0x08
    21e2:	89 85       	ldd	r24, Y+9	; 0x09
    21e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9e 83       	std	Y+6, r25	; 0x06
    21f0:	8d 83       	std	Y+5, r24	; 0x05
    21f2:	8d 81       	ldd	r24, Y+5	; 0x05
    21f4:	9e 81       	ldd	r25, Y+6	; 0x06
    21f6:	9a 83       	std	Y+2, r25	; 0x02
    21f8:	89 83       	std	Y+1, r24	; 0x01
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <LCD_8_bit_sendCMD+0x216>
    2202:	9a 83       	std	Y+2, r25	; 0x02
    2204:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
}
    2206:	6d 96       	adiw	r28, 0x1d	; 29
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	08 95       	ret

00002218 <LCD_8_bit_sendChar>:

void LCD_8_bit_sendChar (u8 charData)
{
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	6d 97       	sbiw	r28, 0x1d	; 29
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	de bf       	out	0x3e, r29	; 62
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA_PORT = charData;
    222e:	e8 e3       	ldi	r30, 0x38	; 56
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2234:	80 83       	st	Z, r24
	LCD_CMD_PORT |= (1<<RS);	/* RS=1 data register */
    2236:	a2 e3       	ldi	r26, 0x32	; 50
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e2 e3       	ldi	r30, 0x32	; 50
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	84 60       	ori	r24, 0x04	; 4
    2242:	8c 93       	st	X, r24
	LCD_CMD_PORT &= ~(1<<RW);	/* RW=0 Write operation */
    2244:	a2 e3       	ldi	r26, 0x32	; 50
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e2 e3       	ldi	r30, 0x32	; 50
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	87 7f       	andi	r24, 0xF7	; 247
    2250:	8c 93       	st	X, r24

	/* Enable pulse */
	LCD_CMD_PORT |=  (1<<EN);
    2252:	a2 e3       	ldi	r26, 0x32	; 50
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e2 e3       	ldi	r30, 0x32	; 50
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	80 61       	ori	r24, 0x10	; 16
    225e:	8c 93       	st	X, r24
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	a0 e8       	ldi	r26, 0x80	; 128
    2266:	bf e3       	ldi	r27, 0x3F	; 63
    2268:	89 8f       	std	Y+25, r24	; 0x19
    226a:	9a 8f       	std	Y+26, r25	; 0x1a
    226c:	ab 8f       	std	Y+27, r26	; 0x1b
    226e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2270:	69 8d       	ldd	r22, Y+25	; 0x19
    2272:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2274:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2276:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	4a ef       	ldi	r20, 0xFA	; 250
    227e:	54 e4       	ldi	r21, 0x44	; 68
    2280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	8d 8b       	std	Y+21, r24	; 0x15
    228a:	9e 8b       	std	Y+22, r25	; 0x16
    228c:	af 8b       	std	Y+23, r26	; 0x17
    228e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2290:	6d 89       	ldd	r22, Y+21	; 0x15
    2292:	7e 89       	ldd	r23, Y+22	; 0x16
    2294:	8f 89       	ldd	r24, Y+23	; 0x17
    2296:	98 8d       	ldd	r25, Y+24	; 0x18
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e8       	ldi	r20, 0x80	; 128
    229e:	5f e3       	ldi	r21, 0x3F	; 63
    22a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a4:	88 23       	and	r24, r24
    22a6:	2c f4       	brge	.+10     	; 0x22b2 <LCD_8_bit_sendChar+0x9a>
		__ticks = 1;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9c 8b       	std	Y+20, r25	; 0x14
    22ae:	8b 8b       	std	Y+19, r24	; 0x13
    22b0:	3f c0       	rjmp	.+126    	; 0x2330 <LCD_8_bit_sendChar+0x118>
	else if (__tmp > 65535)
    22b2:	6d 89       	ldd	r22, Y+21	; 0x15
    22b4:	7e 89       	ldd	r23, Y+22	; 0x16
    22b6:	8f 89       	ldd	r24, Y+23	; 0x17
    22b8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	3f ef       	ldi	r19, 0xFF	; 255
    22be:	4f e7       	ldi	r20, 0x7F	; 127
    22c0:	57 e4       	ldi	r21, 0x47	; 71
    22c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22c6:	18 16       	cp	r1, r24
    22c8:	4c f5       	brge	.+82     	; 0x231c <LCD_8_bit_sendChar+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ca:	69 8d       	ldd	r22, Y+25	; 0x19
    22cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e2       	ldi	r20, 0x20	; 32
    22d8:	51 e4       	ldi	r21, 0x41	; 65
    22da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	bc 01       	movw	r22, r24
    22e4:	cd 01       	movw	r24, r26
    22e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	9c 8b       	std	Y+20, r25	; 0x14
    22f0:	8b 8b       	std	Y+19, r24	; 0x13
    22f2:	0f c0       	rjmp	.+30     	; 0x2312 <LCD_8_bit_sendChar+0xfa>
    22f4:	88 ec       	ldi	r24, 0xC8	; 200
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	9a 8b       	std	Y+18, r25	; 0x12
    22fa:	89 8b       	std	Y+17, r24	; 0x11
    22fc:	89 89       	ldd	r24, Y+17	; 0x11
    22fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <LCD_8_bit_sendChar+0xe8>
    2304:	9a 8b       	std	Y+18, r25	; 0x12
    2306:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2308:	8b 89       	ldd	r24, Y+19	; 0x13
    230a:	9c 89       	ldd	r25, Y+20	; 0x14
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	9c 8b       	std	Y+20, r25	; 0x14
    2310:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2312:	8b 89       	ldd	r24, Y+19	; 0x13
    2314:	9c 89       	ldd	r25, Y+20	; 0x14
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	69 f7       	brne	.-38     	; 0x22f4 <LCD_8_bit_sendChar+0xdc>
    231a:	14 c0       	rjmp	.+40     	; 0x2344 <LCD_8_bit_sendChar+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231c:	6d 89       	ldd	r22, Y+21	; 0x15
    231e:	7e 89       	ldd	r23, Y+22	; 0x16
    2320:	8f 89       	ldd	r24, Y+23	; 0x17
    2322:	98 8d       	ldd	r25, Y+24	; 0x18
    2324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	9c 8b       	std	Y+20, r25	; 0x14
    232e:	8b 8b       	std	Y+19, r24	; 0x13
    2330:	8b 89       	ldd	r24, Y+19	; 0x13
    2332:	9c 89       	ldd	r25, Y+20	; 0x14
    2334:	98 8b       	std	Y+16, r25	; 0x10
    2336:	8f 87       	std	Y+15, r24	; 0x0f
    2338:	8f 85       	ldd	r24, Y+15	; 0x0f
    233a:	98 89       	ldd	r25, Y+16	; 0x10
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <LCD_8_bit_sendChar+0x124>
    2340:	98 8b       	std	Y+16, r25	; 0x10
    2342:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_CMD_PORT &=  ~(1<<EN);
    2344:	a2 e3       	ldi	r26, 0x32	; 50
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e2 e3       	ldi	r30, 0x32	; 50
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	8f 7e       	andi	r24, 0xEF	; 239
    2350:	8c 93       	st	X, r24
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	a0 ea       	ldi	r26, 0xA0	; 160
    2358:	b0 e4       	ldi	r27, 0x40	; 64
    235a:	8b 87       	std	Y+11, r24	; 0x0b
    235c:	9c 87       	std	Y+12, r25	; 0x0c
    235e:	ad 87       	std	Y+13, r26	; 0x0d
    2360:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2362:	6b 85       	ldd	r22, Y+11	; 0x0b
    2364:	7c 85       	ldd	r23, Y+12	; 0x0c
    2366:	8d 85       	ldd	r24, Y+13	; 0x0d
    2368:	9e 85       	ldd	r25, Y+14	; 0x0e
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	4a ef       	ldi	r20, 0xFA	; 250
    2370:	54 e4       	ldi	r21, 0x44	; 68
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	8f 83       	std	Y+7, r24	; 0x07
    237c:	98 87       	std	Y+8, r25	; 0x08
    237e:	a9 87       	std	Y+9, r26	; 0x09
    2380:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2382:	6f 81       	ldd	r22, Y+7	; 0x07
    2384:	78 85       	ldd	r23, Y+8	; 0x08
    2386:	89 85       	ldd	r24, Y+9	; 0x09
    2388:	9a 85       	ldd	r25, Y+10	; 0x0a
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e8       	ldi	r20, 0x80	; 128
    2390:	5f e3       	ldi	r21, 0x3F	; 63
    2392:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2396:	88 23       	and	r24, r24
    2398:	2c f4       	brge	.+10     	; 0x23a4 <LCD_8_bit_sendChar+0x18c>
		__ticks = 1;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
    23a2:	3f c0       	rjmp	.+126    	; 0x2422 <LCD_8_bit_sendChar+0x20a>
	else if (__tmp > 65535)
    23a4:	6f 81       	ldd	r22, Y+7	; 0x07
    23a6:	78 85       	ldd	r23, Y+8	; 0x08
    23a8:	89 85       	ldd	r24, Y+9	; 0x09
    23aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	3f ef       	ldi	r19, 0xFF	; 255
    23b0:	4f e7       	ldi	r20, 0x7F	; 127
    23b2:	57 e4       	ldi	r21, 0x47	; 71
    23b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b8:	18 16       	cp	r1, r24
    23ba:	4c f5       	brge	.+82     	; 0x240e <LCD_8_bit_sendChar+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23be:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e2       	ldi	r20, 0x20	; 32
    23ca:	51 e4       	ldi	r21, 0x41	; 65
    23cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	bc 01       	movw	r22, r24
    23d6:	cd 01       	movw	r24, r26
    23d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	9e 83       	std	Y+6, r25	; 0x06
    23e2:	8d 83       	std	Y+5, r24	; 0x05
    23e4:	0f c0       	rjmp	.+30     	; 0x2404 <LCD_8_bit_sendChar+0x1ec>
    23e6:	88 ec       	ldi	r24, 0xC8	; 200
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	9c 83       	std	Y+4, r25	; 0x04
    23ec:	8b 83       	std	Y+3, r24	; 0x03
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	9c 81       	ldd	r25, Y+4	; 0x04
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <LCD_8_bit_sendChar+0x1da>
    23f6:	9c 83       	std	Y+4, r25	; 0x04
    23f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fa:	8d 81       	ldd	r24, Y+5	; 0x05
    23fc:	9e 81       	ldd	r25, Y+6	; 0x06
    23fe:	01 97       	sbiw	r24, 0x01	; 1
    2400:	9e 83       	std	Y+6, r25	; 0x06
    2402:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	9e 81       	ldd	r25, Y+6	; 0x06
    2408:	00 97       	sbiw	r24, 0x00	; 0
    240a:	69 f7       	brne	.-38     	; 0x23e6 <LCD_8_bit_sendChar+0x1ce>
    240c:	14 c0       	rjmp	.+40     	; 0x2436 <LCD_8_bit_sendChar+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240e:	6f 81       	ldd	r22, Y+7	; 0x07
    2410:	78 85       	ldd	r23, Y+8	; 0x08
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	9a 85       	ldd	r25, Y+10	; 0x0a
    2416:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	9e 83       	std	Y+6, r25	; 0x06
    2420:	8d 83       	std	Y+5, r24	; 0x05
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	9e 81       	ldd	r25, Y+6	; 0x06
    2426:	9a 83       	std	Y+2, r25	; 0x02
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <LCD_8_bit_sendChar+0x216>
    2432:	9a 83       	std	Y+2, r25	; 0x02
    2434:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
}
    2436:	6d 96       	adiw	r28, 0x1d	; 29
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	cd bf       	out	0x3d, r28	; 61
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <LCD_8_bit_sendString>:

void LCD_8_bit_sendString (u8 *str)
{
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	00 d0       	rcall	.+0      	; 0x244e <LCD_8_bit_sendString+0x6>
    244e:	0f 92       	push	r0
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	9b 83       	std	Y+3, r25	; 0x03
    2456:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2458:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; str[i] != 0; i++)
    245a:	19 82       	std	Y+1, r1	; 0x01
    245c:	0e c0       	rjmp	.+28     	; 0x247a <LCD_8_bit_sendString+0x32>
	{
		LCD_8_bit_sendChar(str[i]);
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	28 2f       	mov	r18, r24
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	9b 81       	ldd	r25, Y+3	; 0x03
    2468:	fc 01       	movw	r30, r24
    246a:	e2 0f       	add	r30, r18
    246c:	f3 1f       	adc	r31, r19
    246e:	80 81       	ld	r24, Z
    2470:	0e 94 0c 11 	call	0x2218	; 0x2218 <LCD_8_bit_sendChar>
}

void LCD_8_bit_sendString (u8 *str)
{
	u8 i = 0;
	for (i = 0; str[i] != 0; i++)
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	8f 5f       	subi	r24, 0xFF	; 255
    2478:	89 83       	std	Y+1, r24	; 0x01
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	28 2f       	mov	r18, r24
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	9b 81       	ldd	r25, Y+3	; 0x03
    2484:	fc 01       	movw	r30, r24
    2486:	e2 0f       	add	r30, r18
    2488:	f3 1f       	adc	r31, r19
    248a:	80 81       	ld	r24, Z
    248c:	88 23       	and	r24, r24
    248e:	39 f7       	brne	.-50     	; 0x245e <LCD_8_bit_sendString+0x16>
	{
		LCD_8_bit_sendChar(str[i]);
	}
}
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <LCD_8_bit_GoToPos>:

void LCD_8_bit_GoToPos (u8 row, u8 col)
{
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <LCD_8_bit_GoToPos+0x6>
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <LCD_8_bit_GoToPos+0x8>
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62
    24a8:	8b 83       	std	Y+3, r24	; 0x03
    24aa:	6c 83       	std	Y+4, r22	; 0x04
	u8 Loc[2] = {0x80 , 0xc0};
    24ac:	80 e8       	ldi	r24, 0x80	; 128
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	80 ec       	ldi	r24, 0xC0	; 192
    24b2:	8a 83       	std	Y+2, r24	; 0x02
	LCD_8_bit_sendCMD(Loc[row]+col);
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	ce 01       	movw	r24, r28
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	fc 01       	movw	r30, r24
    24c0:	e2 0f       	add	r30, r18
    24c2:	f3 1f       	adc	r31, r19
    24c4:	90 81       	ld	r25, Z
    24c6:	8c 81       	ldd	r24, Y+4	; 0x04
    24c8:	89 0f       	add	r24, r25
    24ca:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_8_bit_sendCMD>
}
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <LCD_createCustomCharacter>:

void LCD_createCustomCharacter (u8 *pattern, u8 location)
{
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <LCD_createCustomCharacter+0x6>
    24e2:	00 d0       	rcall	.+0      	; 0x24e4 <LCD_createCustomCharacter+0x8>
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	9b 83       	std	Y+3, r25	; 0x03
    24ea:	8a 83       	std	Y+2, r24	; 0x02
    24ec:	6c 83       	std	Y+4, r22	; 0x04
	u8 i = 0;
    24ee:	19 82       	std	Y+1, r1	; 0x01

	LCD_8_bit_sendCMD(0x40 + (location * 8));	/* Send the Address of CGRAM */
    24f0:	8c 81       	ldd	r24, Y+4	; 0x04
    24f2:	88 2f       	mov	r24, r24
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	08 96       	adiw	r24, 0x08	; 8
    24f8:	88 0f       	add	r24, r24
    24fa:	99 1f       	adc	r25, r25
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	88 0f       	add	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_8_bit_sendCMD>

	for(i = 0; i < 8; i++)
    2508:	19 82       	std	Y+1, r1	; 0x01
    250a:	0e c0       	rjmp	.+28     	; 0x2528 <LCD_createCustomCharacter+0x4c>
	{
		LCD_8_bit_sendChar(pattern[i]);			/* Pass the Bytes of pattern on LCD */
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	28 2f       	mov	r18, r24
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	8a 81       	ldd	r24, Y+2	; 0x02
    2514:	9b 81       	ldd	r25, Y+3	; 0x03
    2516:	fc 01       	movw	r30, r24
    2518:	e2 0f       	add	r30, r18
    251a:	f3 1f       	adc	r31, r19
    251c:	80 81       	ld	r24, Z
    251e:	0e 94 0c 11 	call	0x2218	; 0x2218 <LCD_8_bit_sendChar>
{
	u8 i = 0;

	LCD_8_bit_sendCMD(0x40 + (location * 8));	/* Send the Address of CGRAM */

	for(i = 0; i < 8; i++)
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	8f 5f       	subi	r24, 0xFF	; 255
    2526:	89 83       	std	Y+1, r24	; 0x01
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	88 30       	cpi	r24, 0x08	; 8
    252c:	78 f3       	brcs	.-34     	; 0x250c <LCD_createCustomCharacter+0x30>
	{
		LCD_8_bit_sendChar(pattern[i]);			/* Pass the Bytes of pattern on LCD */
	}
}
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	08 95       	ret

0000253c <LCD_CLR>:

void LCD_CLR (void)
{
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
	LCD_8_bit_sendCMD(0X01);			/* clear display */
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0X80);			/* cursor at home position */
    254a:	80 e8       	ldi	r24, 0x80	; 128
    254c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_8_bit_sendCMD>
}
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][4] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	0f 92       	push	r0
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    2560:	19 82       	std	Y+1, r1	; 0x01
    2562:	33 c0       	rjmp	.+102    	; 0x25ca <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	88 2f       	mov	r24, r24
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	fc 01       	movw	r30, r24
    256c:	ef 5a       	subi	r30, 0xAF	; 175
    256e:	fe 4f       	sbci	r31, 0xFE	; 254
    2570:	90 81       	ld	r25, Z
    2572:	82 e0       	ldi	r24, 0x02	; 2
    2574:	69 2f       	mov	r22, r25
    2576:	41 e0       	ldi	r20, 0x01	; 1
    2578:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	88 2f       	mov	r24, r24
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	fc 01       	movw	r30, r24
    2584:	ef 5a       	subi	r30, 0xAF	; 175
    2586:	fe 4f       	sbci	r31, 0xFE	; 254
    2588:	90 81       	ld	r25, Z
    258a:	82 e0       	ldi	r24, 0x02	; 2
    258c:	69 2f       	mov	r22, r25
    258e:	41 e0       	ldi	r20, 0x01	; 1
    2590:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	88 2f       	mov	r24, r24
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	fc 01       	movw	r30, r24
    259c:	eb 5a       	subi	r30, 0xAB	; 171
    259e:	fe 4f       	sbci	r31, 0xFE	; 254
    25a0:	90 81       	ld	r25, Z
    25a2:	82 e0       	ldi	r24, 0x02	; 2
    25a4:	69 2f       	mov	r22, r25
    25a6:	40 e0       	ldi	r20, 0x00	; 0
    25a8:	0e 94 38 09 	call	0x1270	; 0x1270 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	88 2f       	mov	r24, r24
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	fc 01       	movw	r30, r24
    25b4:	eb 5a       	subi	r30, 0xAB	; 171
    25b6:	fe 4f       	sbci	r31, 0xFE	; 254
    25b8:	90 81       	ld	r25, Z
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	69 2f       	mov	r22, r25
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	8f 5f       	subi	r24, 0xFF	; 255
    25c8:	89 83       	std	Y+1, r24	; 0x01
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	84 30       	cpi	r24, 0x04	; 4
    25ce:	50 f2       	brcs	.-108    	; 0x2564 <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
}
    25d2:	0f 90       	pop	r0
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	65 97       	sbiw	r28, 0x15	; 21
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	9d 8b       	std	Y+21, r25	; 0x15
    25f0:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	8a 8b       	std	Y+18, r24	; 0x12
    25f6:	1b 8a       	std	Y+19, r1	; 0x13
    25f8:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    25fa:	8c 89       	ldd	r24, Y+20	; 0x14
    25fc:	9d 89       	ldd	r25, Y+21	; 0x15
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	09 f4       	brne	.+2      	; 0x2604 <Keypad_enu_getKey+0x2a>
    2602:	f0 c0       	rjmp	.+480    	; 0x27e4 <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    2604:	ec 89       	ldd	r30, Y+20	; 0x14
    2606:	fd 89       	ldd	r31, Y+21	; 0x15
    2608:	8f ef       	ldi	r24, 0xFF	; 255
    260a:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    260c:	19 8a       	std	Y+17, r1	; 0x11
    260e:	e5 c0       	rjmp	.+458    	; 0x27da <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    2610:	89 89       	ldd	r24, Y+17	; 0x11
    2612:	88 2f       	mov	r24, r24
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	fc 01       	movw	r30, r24
    2618:	ef 5a       	subi	r30, 0xAF	; 175
    261a:	fe 4f       	sbci	r31, 0xFE	; 254
    261c:	90 81       	ld	r25, Z
    261e:	82 e0       	ldi	r24, 0x02	; 2
    2620:	69 2f       	mov	r22, r25
    2622:	40 e0       	ldi	r20, 0x00	; 0
    2624:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2628:	18 8a       	std	Y+16, r1	; 0x10
    262a:	c1 c0       	rjmp	.+386    	; 0x27ae <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    262c:	88 89       	ldd	r24, Y+16	; 0x10
    262e:	88 2f       	mov	r24, r24
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	fc 01       	movw	r30, r24
    2634:	eb 5a       	subi	r30, 0xAB	; 171
    2636:	fe 4f       	sbci	r31, 0xFE	; 254
    2638:	90 81       	ld	r25, Z
    263a:	9e 01       	movw	r18, r28
    263c:	2d 5e       	subi	r18, 0xED	; 237
    263e:	3f 4f       	sbci	r19, 0xFF	; 255
    2640:	82 e0       	ldi	r24, 0x02	; 2
    2642:	69 2f       	mov	r22, r25
    2644:	a9 01       	movw	r20, r18
    2646:	0e 94 8c 0b 	call	0x1718	; 0x1718 <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    264a:	8b 89       	ldd	r24, Y+19	; 0x13
    264c:	88 23       	and	r24, r24
    264e:	09 f0       	breq	.+2      	; 0x2652 <Keypad_enu_getKey+0x78>
    2650:	ab c0       	rjmp	.+342    	; 0x27a8 <Keypad_enu_getKey+0x1ce>
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	a0 ea       	ldi	r26, 0xA0	; 160
    2658:	b1 e4       	ldi	r27, 0x41	; 65
    265a:	8b 87       	std	Y+11, r24	; 0x0b
    265c:	9c 87       	std	Y+12, r25	; 0x0c
    265e:	ad 87       	std	Y+13, r26	; 0x0d
    2660:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2662:	6b 85       	ldd	r22, Y+11	; 0x0b
    2664:	7c 85       	ldd	r23, Y+12	; 0x0c
    2666:	8d 85       	ldd	r24, Y+13	; 0x0d
    2668:	9e 85       	ldd	r25, Y+14	; 0x0e
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	4a e7       	ldi	r20, 0x7A	; 122
    2670:	55 e4       	ldi	r21, 0x45	; 69
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	8f 83       	std	Y+7, r24	; 0x07
    267c:	98 87       	std	Y+8, r25	; 0x08
    267e:	a9 87       	std	Y+9, r26	; 0x09
    2680:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2682:	6f 81       	ldd	r22, Y+7	; 0x07
    2684:	78 85       	ldd	r23, Y+8	; 0x08
    2686:	89 85       	ldd	r24, Y+9	; 0x09
    2688:	9a 85       	ldd	r25, Y+10	; 0x0a
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	40 e8       	ldi	r20, 0x80	; 128
    2690:	5f e3       	ldi	r21, 0x3F	; 63
    2692:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2696:	88 23       	and	r24, r24
    2698:	2c f4       	brge	.+10     	; 0x26a4 <Keypad_enu_getKey+0xca>
		__ticks = 1;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
    26a2:	3f c0       	rjmp	.+126    	; 0x2722 <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    26a4:	6f 81       	ldd	r22, Y+7	; 0x07
    26a6:	78 85       	ldd	r23, Y+8	; 0x08
    26a8:	89 85       	ldd	r24, Y+9	; 0x09
    26aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	3f ef       	ldi	r19, 0xFF	; 255
    26b0:	4f e7       	ldi	r20, 0x7F	; 127
    26b2:	57 e4       	ldi	r21, 0x47	; 71
    26b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b8:	18 16       	cp	r1, r24
    26ba:	4c f5       	brge	.+82     	; 0x270e <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26be:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e2       	ldi	r20, 0x20	; 32
    26ca:	51 e4       	ldi	r21, 0x41	; 65
    26cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	bc 01       	movw	r22, r24
    26d6:	cd 01       	movw	r24, r26
    26d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	9e 83       	std	Y+6, r25	; 0x06
    26e2:	8d 83       	std	Y+5, r24	; 0x05
    26e4:	0f c0       	rjmp	.+30     	; 0x2704 <Keypad_enu_getKey+0x12a>
    26e6:	80 e9       	ldi	r24, 0x90	; 144
    26e8:	91 e0       	ldi	r25, 0x01	; 1
    26ea:	9c 83       	std	Y+4, r25	; 0x04
    26ec:	8b 83       	std	Y+3, r24	; 0x03
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	9c 81       	ldd	r25, Y+4	; 0x04
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <Keypad_enu_getKey+0x118>
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    26f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fa:	8d 81       	ldd	r24, Y+5	; 0x05
    26fc:	9e 81       	ldd	r25, Y+6	; 0x06
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2704:	8d 81       	ldd	r24, Y+5	; 0x05
    2706:	9e 81       	ldd	r25, Y+6	; 0x06
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	69 f7       	brne	.-38     	; 0x26e6 <Keypad_enu_getKey+0x10c>
    270c:	14 c0       	rjmp	.+40     	; 0x2736 <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270e:	6f 81       	ldd	r22, Y+7	; 0x07
    2710:	78 85       	ldd	r23, Y+8	; 0x08
    2712:	89 85       	ldd	r24, Y+9	; 0x09
    2714:	9a 85       	ldd	r25, Y+10	; 0x0a
    2716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	8d 83       	std	Y+5, r24	; 0x05
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	9e 81       	ldd	r25, Y+6	; 0x06
    2726:	9a 83       	std	Y+2, r25	; 0x02
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <Keypad_enu_getKey+0x154>
    2732:	9a 83       	std	Y+2, r25	; 0x02
    2734:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2736:	88 89       	ldd	r24, Y+16	; 0x10
    2738:	88 2f       	mov	r24, r24
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	fc 01       	movw	r30, r24
    273e:	eb 5a       	subi	r30, 0xAB	; 171
    2740:	fe 4f       	sbci	r31, 0xFE	; 254
    2742:	90 81       	ld	r25, Z
    2744:	9e 01       	movw	r18, r28
    2746:	2d 5e       	subi	r18, 0xED	; 237
    2748:	3f 4f       	sbci	r19, 0xFF	; 255
    274a:	82 e0       	ldi	r24, 0x02	; 2
    274c:	69 2f       	mov	r22, r25
    274e:	a9 01       	movw	r20, r18
    2750:	0e 94 8c 0b 	call	0x1718	; 0x1718 <DIO_enu_GetPinValue>
    2754:	0f c0       	rjmp	.+30     	; 0x2774 <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2756:	88 89       	ldd	r24, Y+16	; 0x10
    2758:	88 2f       	mov	r24, r24
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	fc 01       	movw	r30, r24
    275e:	eb 5a       	subi	r30, 0xAB	; 171
    2760:	fe 4f       	sbci	r31, 0xFE	; 254
    2762:	90 81       	ld	r25, Z
    2764:	9e 01       	movw	r18, r28
    2766:	2d 5e       	subi	r18, 0xED	; 237
    2768:	3f 4f       	sbci	r19, 0xFF	; 255
    276a:	82 e0       	ldi	r24, 0x02	; 2
    276c:	69 2f       	mov	r22, r25
    276e:	a9 01       	movw	r20, r18
    2770:	0e 94 8c 0b 	call	0x1718	; 0x1718 <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    2774:	8b 89       	ldd	r24, Y+19	; 0x13
    2776:	88 23       	and	r24, r24
    2778:	71 f3       	breq	.-36     	; 0x2756 <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    277a:	89 89       	ldd	r24, Y+17	; 0x11
    277c:	48 2f       	mov	r20, r24
    277e:	50 e0       	ldi	r21, 0x00	; 0
    2780:	88 89       	ldd	r24, Y+16	; 0x10
    2782:	28 2f       	mov	r18, r24
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	ca 01       	movw	r24, r20
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	82 0f       	add	r24, r18
    2792:	93 1f       	adc	r25, r19
    2794:	fc 01       	movw	r30, r24
    2796:	ef 5b       	subi	r30, 0xBF	; 191
    2798:	fe 4f       	sbci	r31, 0xFE	; 254
    279a:	80 81       	ld	r24, Z
    279c:	ec 89       	ldd	r30, Y+20	; 0x14
    279e:	fd 89       	ldd	r31, Y+21	; 0x15
    27a0:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	8f 87       	std	Y+15, r24	; 0x0f
    27a6:	07 c0       	rjmp	.+14     	; 0x27b6 <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    27a8:	88 89       	ldd	r24, Y+16	; 0x10
    27aa:	8f 5f       	subi	r24, 0xFF	; 255
    27ac:	88 8b       	std	Y+16, r24	; 0x10
    27ae:	88 89       	ldd	r24, Y+16	; 0x10
    27b0:	84 30       	cpi	r24, 0x04	; 4
    27b2:	08 f4       	brcc	.+2      	; 0x27b6 <Keypad_enu_getKey+0x1dc>
    27b4:	3b cf       	rjmp	.-394    	; 0x262c <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    27b6:	89 89       	ldd	r24, Y+17	; 0x11
    27b8:	88 2f       	mov	r24, r24
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	fc 01       	movw	r30, r24
    27be:	ef 5a       	subi	r30, 0xAF	; 175
    27c0:	fe 4f       	sbci	r31, 0xFE	; 254
    27c2:	90 81       	ld	r25, Z
    27c4:	82 e0       	ldi	r24, 0x02	; 2
    27c6:	69 2f       	mov	r22, r25
    27c8:	41 e0       	ldi	r20, 0x01	; 1
    27ca:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    27ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    27d0:	88 23       	and	r24, r24
    27d2:	49 f4       	brne	.+18     	; 0x27e6 <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    27d4:	89 89       	ldd	r24, Y+17	; 0x11
    27d6:	8f 5f       	subi	r24, 0xFF	; 255
    27d8:	89 8b       	std	Y+17, r24	; 0x11
    27da:	89 89       	ldd	r24, Y+17	; 0x11
    27dc:	84 30       	cpi	r24, 0x04	; 4
    27de:	08 f4       	brcc	.+2      	; 0x27e2 <Keypad_enu_getKey+0x208>
    27e0:	17 cf       	rjmp	.-466    	; 0x2610 <Keypad_enu_getKey+0x36>
    27e2:	01 c0       	rjmp	.+2      	; 0x27e6 <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    27e4:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    27e6:	8a 89       	ldd	r24, Y+18	; 0x12
}
    27e8:	65 96       	adiw	r28, 0x15	; 21
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	f8 94       	cli
    27ee:	de bf       	out	0x3e, r29	; 62
    27f0:	0f be       	out	0x3f, r0	; 63
    27f2:	cd bf       	out	0x3d, r28	; 61
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	08 95       	ret

000027fa <main>:

u8 numberOfLogins = 0;
char id[ID_LENGTH + 1] = "";
    char password[PASSWORD_LENGTH + 1] = "";

int main() {
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    initializeSystem();
    2802:	0e 94 37 14 	call	0x286e	; 0x286e <initializeSystem>
    showTemp();
    2806:	0e 94 81 19 	call	0x3302	; 0x3302 <showTemp>
  //  myAPP();
    return 0;
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	90 e0       	ldi	r25, 0x00	; 0
}
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <myAPP>:



void myAPP(){
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
	if (numberOfLogins >= MAX_LOGIN_ATTEMPTS) {
    281c:	80 91 5a 01 	lds	r24, 0x015A
    2820:	83 30       	cpi	r24, 0x03	; 3
    2822:	18 f0       	brcs	.+6      	; 0x282a <myAPP+0x16>
	    while(1){
	    	 displayMaxLoginAttemptsReached();
    2824:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <displayMaxLoginAttemptsReached>
    2828:	fd cf       	rjmp	.-6      	; 0x2824 <myAPP+0x10>
	    }
	} else{
         displayWelcomeMessage();
    282a:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <displayWelcomeMessage>
         getUserInput(id, ID_LENGTH, "Enter ID", 0);
    282e:	89 e3       	ldi	r24, 0x39	; 57
    2830:	91 e0       	ldi	r25, 0x01	; 1
    2832:	20 e6       	ldi	r18, 0x60	; 96
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	63 e0       	ldi	r22, 0x03	; 3
    2838:	70 e0       	ldi	r23, 0x00	; 0
    283a:	a9 01       	movw	r20, r18
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	0e 94 44 14 	call	0x2888	; 0x2888 <getUserInput>
         getUserInput(password, PASSWORD_LENGTH, "Enter Password", 1);
    2844:	8d e3       	ldi	r24, 0x3D	; 61
    2846:	91 e0       	ldi	r25, 0x01	; 1
    2848:	29 e6       	ldi	r18, 0x69	; 105
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	63 e0       	ldi	r22, 0x03	; 3
    284e:	70 e0       	ldi	r23, 0x00	; 0
    2850:	a9 01       	movw	r20, r18
    2852:	21 e0       	ldi	r18, 0x01	; 1
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	0e 94 44 14 	call	0x2888	; 0x2888 <getUserInput>
         checkCredentials(id, password);}
    285a:	89 e3       	ldi	r24, 0x39	; 57
    285c:	91 e0       	ldi	r25, 0x01	; 1
    285e:	2d e3       	ldi	r18, 0x3D	; 61
    2860:	31 e0       	ldi	r19, 0x01	; 1
    2862:	b9 01       	movw	r22, r18
    2864:	0e 94 7f 15 	call	0x2afe	; 0x2afe <checkCredentials>
}
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <initializeSystem>:

void initializeSystem(void) {
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    LCD_8_bit_init();
    2876:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <LCD_8_bit_init>
    Keypad_enu_Init();
    287a:	0e 94 ab 12 	call	0x2556	; 0x2556 <Keypad_enu_Init>
    // Initialize other peripherals

   // DIO_init(PORT_A, PIN1, OUT);
     ADC_voidInit();
    287e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <ADC_voidInit>
}
    2882:	cf 91       	pop	r28
    2884:	df 91       	pop	r29
    2886:	08 95       	ret

00002888 <getUserInput>:

void getUserInput(char *buffer, u8 maxLength, const char *promptMessage, u8 maskInput) {
    2888:	df 93       	push	r29
    288a:	cf 93       	push	r28
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	a5 97       	sbiw	r28, 0x25	; 37
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	de bf       	out	0x3e, r29	; 62
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	cd bf       	out	0x3d, r28	; 61
    289c:	98 a3       	std	Y+32, r25	; 0x20
    289e:	8f 8f       	std	Y+31, r24	; 0x1f
    28a0:	69 a3       	std	Y+33, r22	; 0x21
    28a2:	5b a3       	std	Y+35, r21	; 0x23
    28a4:	4a a3       	std	Y+34, r20	; 0x22
    28a6:	2c a3       	std	Y+36, r18	; 0x24
    u8 key;
    u8 counter = 0;
    28a8:	1d 8e       	std	Y+29, r1	; 0x1d

    LCD_8_bit_sendString(promptMessage);
    28aa:	8a a1       	ldd	r24, Y+34	; 0x22
    28ac:	9b a1       	ldd	r25, Y+35	; 0x23
    28ae:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a8 ec       	ldi	r26, 0xC8	; 200
    28b8:	b2 e4       	ldi	r27, 0x42	; 66
    28ba:	89 8f       	std	Y+25, r24	; 0x19
    28bc:	9a 8f       	std	Y+26, r25	; 0x1a
    28be:	ab 8f       	std	Y+27, r26	; 0x1b
    28c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c2:	69 8d       	ldd	r22, Y+25	; 0x19
    28c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	4a ef       	ldi	r20, 0xFA	; 250
    28d0:	54 e4       	ldi	r21, 0x44	; 68
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	8d 8b       	std	Y+21, r24	; 0x15
    28dc:	9e 8b       	std	Y+22, r25	; 0x16
    28de:	af 8b       	std	Y+23, r26	; 0x17
    28e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28e2:	6d 89       	ldd	r22, Y+21	; 0x15
    28e4:	7e 89       	ldd	r23, Y+22	; 0x16
    28e6:	8f 89       	ldd	r24, Y+23	; 0x17
    28e8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e8       	ldi	r20, 0x80	; 128
    28f0:	5f e3       	ldi	r21, 0x3F	; 63
    28f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f6:	88 23       	and	r24, r24
    28f8:	2c f4       	brge	.+10     	; 0x2904 <getUserInput+0x7c>
		__ticks = 1;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	9c 8b       	std	Y+20, r25	; 0x14
    2900:	8b 8b       	std	Y+19, r24	; 0x13
    2902:	3f c0       	rjmp	.+126    	; 0x2982 <getUserInput+0xfa>
	else if (__tmp > 65535)
    2904:	6d 89       	ldd	r22, Y+21	; 0x15
    2906:	7e 89       	ldd	r23, Y+22	; 0x16
    2908:	8f 89       	ldd	r24, Y+23	; 0x17
    290a:	98 8d       	ldd	r25, Y+24	; 0x18
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	3f ef       	ldi	r19, 0xFF	; 255
    2910:	4f e7       	ldi	r20, 0x7F	; 127
    2912:	57 e4       	ldi	r21, 0x47	; 71
    2914:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2918:	18 16       	cp	r1, r24
    291a:	4c f5       	brge	.+82     	; 0x296e <getUserInput+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291c:	69 8d       	ldd	r22, Y+25	; 0x19
    291e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2920:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2922:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e2       	ldi	r20, 0x20	; 32
    292a:	51 e4       	ldi	r21, 0x41	; 65
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	bc 01       	movw	r22, r24
    2936:	cd 01       	movw	r24, r26
    2938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	9c 8b       	std	Y+20, r25	; 0x14
    2942:	8b 8b       	std	Y+19, r24	; 0x13
    2944:	0f c0       	rjmp	.+30     	; 0x2964 <getUserInput+0xdc>
    2946:	88 ec       	ldi	r24, 0xC8	; 200
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	9a 8b       	std	Y+18, r25	; 0x12
    294c:	89 8b       	std	Y+17, r24	; 0x11
    294e:	89 89       	ldd	r24, Y+17	; 0x11
    2950:	9a 89       	ldd	r25, Y+18	; 0x12
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <getUserInput+0xca>
    2956:	9a 8b       	std	Y+18, r25	; 0x12
    2958:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295a:	8b 89       	ldd	r24, Y+19	; 0x13
    295c:	9c 89       	ldd	r25, Y+20	; 0x14
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	9c 8b       	std	Y+20, r25	; 0x14
    2962:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2964:	8b 89       	ldd	r24, Y+19	; 0x13
    2966:	9c 89       	ldd	r25, Y+20	; 0x14
    2968:	00 97       	sbiw	r24, 0x00	; 0
    296a:	69 f7       	brne	.-38     	; 0x2946 <getUserInput+0xbe>
    296c:	3e c0       	rjmp	.+124    	; 0x29ea <getUserInput+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296e:	6d 89       	ldd	r22, Y+21	; 0x15
    2970:	7e 89       	ldd	r23, Y+22	; 0x16
    2972:	8f 89       	ldd	r24, Y+23	; 0x17
    2974:	98 8d       	ldd	r25, Y+24	; 0x18
    2976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	9c 8b       	std	Y+20, r25	; 0x14
    2980:	8b 8b       	std	Y+19, r24	; 0x13
    2982:	8b 89       	ldd	r24, Y+19	; 0x13
    2984:	9c 89       	ldd	r25, Y+20	; 0x14
    2986:	98 8b       	std	Y+16, r25	; 0x10
    2988:	8f 87       	std	Y+15, r24	; 0x0f
    298a:	8f 85       	ldd	r24, Y+15	; 0x0f
    298c:	98 89       	ldd	r25, Y+16	; 0x10
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	f1 f7       	brne	.-4      	; 0x298e <getUserInput+0x106>
    2992:	98 8b       	std	Y+16, r25	; 0x10
    2994:	8f 87       	std	Y+15, r24	; 0x0f
    2996:	29 c0       	rjmp	.+82     	; 0x29ea <getUserInput+0x162>
    _delay_ms(100);

    while (counter < maxLength) {
        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    2998:	ce 01       	movw	r24, r28
    299a:	4e 96       	adiw	r24, 0x1e	; 30
    299c:	0e 94 ed 12 	call	0x25da	; 0x25da <Keypad_enu_getKey>
    29a0:	81 30       	cpi	r24, 0x01	; 1
    29a2:	19 f5       	brne	.+70     	; 0x29ea <getUserInput+0x162>
    29a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29a6:	8f 3f       	cpi	r24, 0xFF	; 255
    29a8:	01 f1       	breq	.+64     	; 0x29ea <getUserInput+0x162>
            LCD_8_bit_GoToPos(1, counter);
    29aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29ac:	28 2f       	mov	r18, r24
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	b9 01       	movw	r22, r18
    29b6:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_8_bit_GoToPos>
            LCD_8_bit_sendChar(maskInput ? '*' : key);
    29ba:	8c a1       	ldd	r24, Y+36	; 0x24
    29bc:	88 23       	and	r24, r24
    29be:	19 f4       	brne	.+6      	; 0x29c6 <getUserInput+0x13e>
    29c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29c2:	8d a3       	std	Y+37, r24	; 0x25
    29c4:	02 c0       	rjmp	.+4      	; 0x29ca <getUserInput+0x142>
    29c6:	8a e2       	ldi	r24, 0x2A	; 42
    29c8:	8d a3       	std	Y+37, r24	; 0x25
    29ca:	8d a1       	ldd	r24, Y+37	; 0x25
    29cc:	0e 94 0c 11 	call	0x2218	; 0x2218 <LCD_8_bit_sendChar>
            buffer[counter] = key;
    29d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29d2:	28 2f       	mov	r18, r24
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29d8:	98 a1       	ldd	r25, Y+32	; 0x20
    29da:	fc 01       	movw	r30, r24
    29dc:	e2 0f       	add	r30, r18
    29de:	f3 1f       	adc	r31, r19
    29e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29e2:	80 83       	st	Z, r24
            counter++;
    29e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29e6:	8f 5f       	subi	r24, 0xFF	; 255
    29e8:	8d 8f       	std	Y+29, r24	; 0x1d
    u8 counter = 0;

    LCD_8_bit_sendString(promptMessage);
    _delay_ms(100);

    while (counter < maxLength) {
    29ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    29ec:	89 a1       	ldd	r24, Y+33	; 0x21
    29ee:	98 17       	cp	r25, r24
    29f0:	98 f2       	brcs	.-90     	; 0x2998 <getUserInput+0x110>
            buffer[counter] = key;
            counter++;
        }
    }

    buffer[counter] = '\0';
    29f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29f4:	28 2f       	mov	r18, r24
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29fa:	98 a1       	ldd	r25, Y+32	; 0x20
    29fc:	fc 01       	movw	r30, r24
    29fe:	e2 0f       	add	r30, r18
    2a00:	f3 1f       	adc	r31, r19
    2a02:	10 82       	st	Z, r1
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	a8 e4       	ldi	r26, 0x48	; 72
    2a0a:	b2 e4       	ldi	r27, 0x42	; 66
    2a0c:	8b 87       	std	Y+11, r24	; 0x0b
    2a0e:	9c 87       	std	Y+12, r25	; 0x0c
    2a10:	ad 87       	std	Y+13, r26	; 0x0d
    2a12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	4a ef       	ldi	r20, 0xFA	; 250
    2a22:	54 e4       	ldi	r21, 0x44	; 68
    2a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	8f 83       	std	Y+7, r24	; 0x07
    2a2e:	98 87       	std	Y+8, r25	; 0x08
    2a30:	a9 87       	std	Y+9, r26	; 0x09
    2a32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a34:	6f 81       	ldd	r22, Y+7	; 0x07
    2a36:	78 85       	ldd	r23, Y+8	; 0x08
    2a38:	89 85       	ldd	r24, Y+9	; 0x09
    2a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e8       	ldi	r20, 0x80	; 128
    2a42:	5f e3       	ldi	r21, 0x3F	; 63
    2a44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a48:	88 23       	and	r24, r24
    2a4a:	2c f4       	brge	.+10     	; 0x2a56 <getUserInput+0x1ce>
		__ticks = 1;
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	9e 83       	std	Y+6, r25	; 0x06
    2a52:	8d 83       	std	Y+5, r24	; 0x05
    2a54:	3f c0       	rjmp	.+126    	; 0x2ad4 <getUserInput+0x24c>
	else if (__tmp > 65535)
    2a56:	6f 81       	ldd	r22, Y+7	; 0x07
    2a58:	78 85       	ldd	r23, Y+8	; 0x08
    2a5a:	89 85       	ldd	r24, Y+9	; 0x09
    2a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	3f ef       	ldi	r19, 0xFF	; 255
    2a62:	4f e7       	ldi	r20, 0x7F	; 127
    2a64:	57 e4       	ldi	r21, 0x47	; 71
    2a66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a6a:	18 16       	cp	r1, r24
    2a6c:	4c f5       	brge	.+82     	; 0x2ac0 <getUserInput+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e2       	ldi	r20, 0x20	; 32
    2a7c:	51 e4       	ldi	r21, 0x41	; 65
    2a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	bc 01       	movw	r22, r24
    2a88:	cd 01       	movw	r24, r26
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	9e 83       	std	Y+6, r25	; 0x06
    2a94:	8d 83       	std	Y+5, r24	; 0x05
    2a96:	0f c0       	rjmp	.+30     	; 0x2ab6 <getUserInput+0x22e>
    2a98:	88 ec       	ldi	r24, 0xC8	; 200
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	9c 83       	std	Y+4, r25	; 0x04
    2a9e:	8b 83       	std	Y+3, r24	; 0x03
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	f1 f7       	brne	.-4      	; 0x2aa4 <getUserInput+0x21c>
    2aa8:	9c 83       	std	Y+4, r25	; 0x04
    2aaa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aac:	8d 81       	ldd	r24, Y+5	; 0x05
    2aae:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab0:	01 97       	sbiw	r24, 0x01	; 1
    2ab2:	9e 83       	std	Y+6, r25	; 0x06
    2ab4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	69 f7       	brne	.-38     	; 0x2a98 <getUserInput+0x210>
    2abe:	14 c0       	rjmp	.+40     	; 0x2ae8 <getUserInput+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac2:	78 85       	ldd	r23, Y+8	; 0x08
    2ac4:	89 85       	ldd	r24, Y+9	; 0x09
    2ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	9e 83       	std	Y+6, r25	; 0x06
    2ad2:	8d 83       	std	Y+5, r24	; 0x05
    2ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad8:	9a 83       	std	Y+2, r25	; 0x02
    2ada:	89 83       	std	Y+1, r24	; 0x01
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	f1 f7       	brne	.-4      	; 0x2ae0 <getUserInput+0x258>
    2ae4:	9a 83       	std	Y+2, r25	; 0x02
    2ae6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(50);
    LCD_CLR();
    2ae8:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_CLR>
}
    2aec:	a5 96       	adiw	r28, 0x25	; 37
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
    2af8:	cf 91       	pop	r28
    2afa:	df 91       	pop	r29
    2afc:	08 95       	ret

00002afe <checkCredentials>:

void checkCredentials(const char *id, const char *password) {
    2afe:	df 93       	push	r29
    2b00:	cf 93       	push	r28
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
    2b06:	6c 97       	sbiw	r28, 0x1c	; 28
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
    2b12:	9a 8f       	std	Y+26, r25	; 0x1a
    2b14:	89 8f       	std	Y+25, r24	; 0x19
    2b16:	7c 8f       	std	Y+28, r23	; 0x1c
    2b18:	6b 8f       	std	Y+27, r22	; 0x1b
    LCD_CLR();
    2b1a:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_CLR>

    const char *idArray[] = ID_ARRAY;
    2b1e:	88 e7       	ldi	r24, 0x78	; 120
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	9a 8b       	std	Y+18, r25	; 0x12
    2b24:	89 8b       	std	Y+17, r24	; 0x11
    2b26:	8c e7       	ldi	r24, 0x7C	; 124
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	9c 8b       	std	Y+20, r25	; 0x14
    2b2c:	8b 8b       	std	Y+19, r24	; 0x13
    const char *passwordArray[] = PASSWORD_ARRAY;
    2b2e:	88 e7       	ldi	r24, 0x78	; 120
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	9e 8b       	std	Y+22, r25	; 0x16
    2b34:	8d 8b       	std	Y+21, r24	; 0x15
    2b36:	8c e7       	ldi	r24, 0x7C	; 124
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	98 8f       	std	Y+24, r25	; 0x18
    2b3c:	8f 8b       	std	Y+23, r24	; 0x17

    u8 loginSuccess = 0;
    2b3e:	18 8a       	std	Y+16, r1	; 0x10


        	    for (uint8_t i = 0; i < sizeof(idArray)/sizeof(idArray[0]); i++) {
    2b40:	1f 86       	std	Y+15, r1	; 0x0f
    2b42:	38 c0       	rjmp	.+112    	; 0x2bb4 <checkCredentials+0xb6>
        	        if (strcmp(id, idArray[i]) == 0 && strcmp(password, passwordArray[i]) == 0) {
    2b44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b46:	88 2f       	mov	r24, r24
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	9c 01       	movw	r18, r24
    2b4c:	22 0f       	add	r18, r18
    2b4e:	33 1f       	adc	r19, r19
    2b50:	ce 01       	movw	r24, r28
    2b52:	01 96       	adiw	r24, 0x01	; 1
    2b54:	82 0f       	add	r24, r18
    2b56:	93 1f       	adc	r25, r19
    2b58:	fc 01       	movw	r30, r24
    2b5a:	70 96       	adiw	r30, 0x10	; 16
    2b5c:	20 81       	ld	r18, Z
    2b5e:	31 81       	ldd	r19, Z+1	; 0x01
    2b60:	89 8d       	ldd	r24, Y+25	; 0x19
    2b62:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2b64:	b9 01       	movw	r22, r18
    2b66:	0e 94 03 1a 	call	0x3406	; 0x3406 <strcmp>
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	01 f5       	brne	.+64     	; 0x2bae <checkCredentials+0xb0>
    2b6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b70:	88 2f       	mov	r24, r24
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	9c 01       	movw	r18, r24
    2b76:	22 0f       	add	r18, r18
    2b78:	33 1f       	adc	r19, r19
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	01 96       	adiw	r24, 0x01	; 1
    2b7e:	82 0f       	add	r24, r18
    2b80:	93 1f       	adc	r25, r19
    2b82:	fc 01       	movw	r30, r24
    2b84:	74 96       	adiw	r30, 0x14	; 20
    2b86:	20 81       	ld	r18, Z
    2b88:	31 81       	ldd	r19, Z+1	; 0x01
    2b8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b8e:	b9 01       	movw	r22, r18
    2b90:	0e 94 03 1a 	call	0x3406	; 0x3406 <strcmp>
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	59 f4       	brne	.+22     	; 0x2bae <checkCredentials+0xb0>
        	            // Credentials matched
        	            displayLoginSuccessful(i + 1); // Display the user index (i + 1)
    2b98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b9a:	88 2f       	mov	r24, r24
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	01 96       	adiw	r24, 0x01	; 1
    2ba0:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <displayLoginSuccessful>
        	            showOptions();
    2ba4:	0e 94 45 18 	call	0x308a	; 0x308a <showOptions>
        	            loginSuccess = 1;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	88 8b       	std	Y+16, r24	; 0x10
    2bac:	06 c0       	rjmp	.+12     	; 0x2bba <checkCredentials+0xbc>
    const char *passwordArray[] = PASSWORD_ARRAY;

    u8 loginSuccess = 0;


        	    for (uint8_t i = 0; i < sizeof(idArray)/sizeof(idArray[0]); i++) {
    2bae:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bb0:	8f 5f       	subi	r24, 0xFF	; 255
    2bb2:	8f 87       	std	Y+15, r24	; 0x0f
    2bb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bb6:	82 30       	cpi	r24, 0x02	; 2
    2bb8:	28 f2       	brcs	.-118    	; 0x2b44 <checkCredentials+0x46>
        	            loginSuccess = 1;
        	            break;
        	        }
        	    }

        	    if (!loginSuccess) {
    2bba:	88 89       	ldd	r24, Y+16	; 0x10
    2bbc:	88 23       	and	r24, r24
    2bbe:	09 f0       	breq	.+2      	; 0x2bc2 <checkCredentials+0xc4>
    2bc0:	7f c0       	rjmp	.+254    	; 0x2cc0 <checkCredentials+0x1c2>
        	        numberOfLogins++;
    2bc2:	80 91 5a 01 	lds	r24, 0x015A
    2bc6:	8f 5f       	subi	r24, 0xFF	; 255
    2bc8:	80 93 5a 01 	sts	0x015A, r24
        	        LCD_8_bit_sendString("Login Failed");
    2bcc:	80 e8       	ldi	r24, 0x80	; 128
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	a8 ec       	ldi	r26, 0xC8	; 200
    2bda:	b2 e4       	ldi	r27, 0x42	; 66
    2bdc:	8b 87       	std	Y+11, r24	; 0x0b
    2bde:	9c 87       	std	Y+12, r25	; 0x0c
    2be0:	ad 87       	std	Y+13, r26	; 0x0d
    2be2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	4a ef       	ldi	r20, 0xFA	; 250
    2bf2:	54 e4       	ldi	r21, 0x44	; 68
    2bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	8f 83       	std	Y+7, r24	; 0x07
    2bfe:	98 87       	std	Y+8, r25	; 0x08
    2c00:	a9 87       	std	Y+9, r26	; 0x09
    2c02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c04:	6f 81       	ldd	r22, Y+7	; 0x07
    2c06:	78 85       	ldd	r23, Y+8	; 0x08
    2c08:	89 85       	ldd	r24, Y+9	; 0x09
    2c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	40 e8       	ldi	r20, 0x80	; 128
    2c12:	5f e3       	ldi	r21, 0x3F	; 63
    2c14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c18:	88 23       	and	r24, r24
    2c1a:	2c f4       	brge	.+10     	; 0x2c26 <checkCredentials+0x128>
		__ticks = 1;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	9e 83       	std	Y+6, r25	; 0x06
    2c22:	8d 83       	std	Y+5, r24	; 0x05
    2c24:	3f c0       	rjmp	.+126    	; 0x2ca4 <checkCredentials+0x1a6>
	else if (__tmp > 65535)
    2c26:	6f 81       	ldd	r22, Y+7	; 0x07
    2c28:	78 85       	ldd	r23, Y+8	; 0x08
    2c2a:	89 85       	ldd	r24, Y+9	; 0x09
    2c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	3f ef       	ldi	r19, 0xFF	; 255
    2c32:	4f e7       	ldi	r20, 0x7F	; 127
    2c34:	57 e4       	ldi	r21, 0x47	; 71
    2c36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c3a:	18 16       	cp	r1, r24
    2c3c:	4c f5       	brge	.+82     	; 0x2c90 <checkCredentials+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e2       	ldi	r20, 0x20	; 32
    2c4c:	51 e4       	ldi	r21, 0x41	; 65
    2c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	bc 01       	movw	r22, r24
    2c58:	cd 01       	movw	r24, r26
    2c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	9e 83       	std	Y+6, r25	; 0x06
    2c64:	8d 83       	std	Y+5, r24	; 0x05
    2c66:	0f c0       	rjmp	.+30     	; 0x2c86 <checkCredentials+0x188>
    2c68:	88 ec       	ldi	r24, 0xC8	; 200
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	9c 83       	std	Y+4, r25	; 0x04
    2c6e:	8b 83       	std	Y+3, r24	; 0x03
    2c70:	8b 81       	ldd	r24, Y+3	; 0x03
    2c72:	9c 81       	ldd	r25, Y+4	; 0x04
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	f1 f7       	brne	.-4      	; 0x2c74 <checkCredentials+0x176>
    2c78:	9c 83       	std	Y+4, r25	; 0x04
    2c7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	9e 83       	std	Y+6, r25	; 0x06
    2c84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c86:	8d 81       	ldd	r24, Y+5	; 0x05
    2c88:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8a:	00 97       	sbiw	r24, 0x00	; 0
    2c8c:	69 f7       	brne	.-38     	; 0x2c68 <checkCredentials+0x16a>
    2c8e:	14 c0       	rjmp	.+40     	; 0x2cb8 <checkCredentials+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c90:	6f 81       	ldd	r22, Y+7	; 0x07
    2c92:	78 85       	ldd	r23, Y+8	; 0x08
    2c94:	89 85       	ldd	r24, Y+9	; 0x09
    2c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	9e 83       	std	Y+6, r25	; 0x06
    2ca2:	8d 83       	std	Y+5, r24	; 0x05
    2ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca8:	9a 83       	std	Y+2, r25	; 0x02
    2caa:	89 83       	std	Y+1, r24	; 0x01
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
    2cae:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <checkCredentials+0x1b2>
    2cb4:	9a 83       	std	Y+2, r25	; 0x02
    2cb6:	89 83       	std	Y+1, r24	; 0x01
        	        _delay_ms(100);
        	        LCD_CLR();
    2cb8:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_CLR>
        	        myAPP();
    2cbc:	0e 94 0a 14 	call	0x2814	; 0x2814 <myAPP>

        	    }


    LCD_CLR();
    2cc0:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_CLR>
}
    2cc4:	6c 96       	adiw	r28, 0x1c	; 28
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	cf 91       	pop	r28
    2cd2:	df 91       	pop	r29
    2cd4:	08 95       	ret

00002cd6 <displayLoginSuccessful>:

void displayLoginSuccessful(u8 userIndex) {
    2cd6:	df 93       	push	r29
    2cd8:	cf 93       	push	r28
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
    2cde:	6f 97       	sbiw	r28, 0x1f	; 31
    2ce0:	0f b6       	in	r0, 0x3f	; 63
    2ce2:	f8 94       	cli
    2ce4:	de bf       	out	0x3e, r29	; 62
    2ce6:	0f be       	out	0x3f, r0	; 63
    2ce8:	cd bf       	out	0x3d, r28	; 61
    2cea:	8f 8f       	std	Y+31, r24	; 0x1f
    LCD_8_bit_sendString("Login Successful");
    2cec:	8d e8       	ldi	r24, 0x8D	; 141
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    LCD_8_bit_GoToPos(1, 0);
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	60 e0       	ldi	r22, 0x00	; 0
    2cfa:	70 e0       	ldi	r23, 0x00	; 0
    2cfc:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_8_bit_GoToPos>
    char message[16];
    snprintf(message, sizeof(message), "Hello User %d", userIndex);
    2d00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d02:	28 2f       	mov	r18, r24
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	8d b7       	in	r24, 0x3d	; 61
    2d08:	9e b7       	in	r25, 0x3e	; 62
    2d0a:	08 97       	sbiw	r24, 0x08	; 8
    2d0c:	0f b6       	in	r0, 0x3f	; 63
    2d0e:	f8 94       	cli
    2d10:	9e bf       	out	0x3e, r25	; 62
    2d12:	0f be       	out	0x3f, r0	; 63
    2d14:	8d bf       	out	0x3d, r24	; 61
    2d16:	ed b7       	in	r30, 0x3d	; 61
    2d18:	fe b7       	in	r31, 0x3e	; 62
    2d1a:	31 96       	adiw	r30, 0x01	; 1
    2d1c:	ce 01       	movw	r24, r28
    2d1e:	0f 96       	adiw	r24, 0x0f	; 15
    2d20:	91 83       	std	Z+1, r25	; 0x01
    2d22:	80 83       	st	Z, r24
    2d24:	80 e1       	ldi	r24, 0x10	; 16
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	93 83       	std	Z+3, r25	; 0x03
    2d2a:	82 83       	std	Z+2, r24	; 0x02
    2d2c:	8e e9       	ldi	r24, 0x9E	; 158
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	95 83       	std	Z+5, r25	; 0x05
    2d32:	84 83       	std	Z+4, r24	; 0x04
    2d34:	37 83       	std	Z+7, r19	; 0x07
    2d36:	26 83       	std	Z+6, r18	; 0x06
    2d38:	0e 94 2d 1a 	call	0x345a	; 0x345a <snprintf>
    2d3c:	8d b7       	in	r24, 0x3d	; 61
    2d3e:	9e b7       	in	r25, 0x3e	; 62
    2d40:	08 96       	adiw	r24, 0x08	; 8
    2d42:	0f b6       	in	r0, 0x3f	; 63
    2d44:	f8 94       	cli
    2d46:	9e bf       	out	0x3e, r25	; 62
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	8d bf       	out	0x3d, r24	; 61
    LCD_8_bit_sendString(message);
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	0f 96       	adiw	r24, 0x0f	; 15
    2d50:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	a8 ec       	ldi	r26, 0xC8	; 200
    2d5a:	b2 e4       	ldi	r27, 0x42	; 66
    2d5c:	8b 87       	std	Y+11, r24	; 0x0b
    2d5e:	9c 87       	std	Y+12, r25	; 0x0c
    2d60:	ad 87       	std	Y+13, r26	; 0x0d
    2d62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	4a ef       	ldi	r20, 0xFA	; 250
    2d72:	54 e4       	ldi	r21, 0x44	; 68
    2d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	8f 83       	std	Y+7, r24	; 0x07
    2d7e:	98 87       	std	Y+8, r25	; 0x08
    2d80:	a9 87       	std	Y+9, r26	; 0x09
    2d82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d84:	6f 81       	ldd	r22, Y+7	; 0x07
    2d86:	78 85       	ldd	r23, Y+8	; 0x08
    2d88:	89 85       	ldd	r24, Y+9	; 0x09
    2d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	40 e8       	ldi	r20, 0x80	; 128
    2d92:	5f e3       	ldi	r21, 0x3F	; 63
    2d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d98:	88 23       	and	r24, r24
    2d9a:	2c f4       	brge	.+10     	; 0x2da6 <displayLoginSuccessful+0xd0>
		__ticks = 1;
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	9e 83       	std	Y+6, r25	; 0x06
    2da2:	8d 83       	std	Y+5, r24	; 0x05
    2da4:	3f c0       	rjmp	.+126    	; 0x2e24 <displayLoginSuccessful+0x14e>
	else if (__tmp > 65535)
    2da6:	6f 81       	ldd	r22, Y+7	; 0x07
    2da8:	78 85       	ldd	r23, Y+8	; 0x08
    2daa:	89 85       	ldd	r24, Y+9	; 0x09
    2dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	3f ef       	ldi	r19, 0xFF	; 255
    2db2:	4f e7       	ldi	r20, 0x7F	; 127
    2db4:	57 e4       	ldi	r21, 0x47	; 71
    2db6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dba:	18 16       	cp	r1, r24
    2dbc:	4c f5       	brge	.+82     	; 0x2e10 <displayLoginSuccessful+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e2       	ldi	r20, 0x20	; 32
    2dcc:	51 e4       	ldi	r21, 0x41	; 65
    2dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	bc 01       	movw	r22, r24
    2dd8:	cd 01       	movw	r24, r26
    2dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	9e 83       	std	Y+6, r25	; 0x06
    2de4:	8d 83       	std	Y+5, r24	; 0x05
    2de6:	0f c0       	rjmp	.+30     	; 0x2e06 <displayLoginSuccessful+0x130>
    2de8:	88 ec       	ldi	r24, 0xC8	; 200
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	9c 83       	std	Y+4, r25	; 0x04
    2dee:	8b 83       	std	Y+3, r24	; 0x03
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	9c 81       	ldd	r25, Y+4	; 0x04
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	f1 f7       	brne	.-4      	; 0x2df4 <displayLoginSuccessful+0x11e>
    2df8:	9c 83       	std	Y+4, r25	; 0x04
    2dfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	9e 83       	std	Y+6, r25	; 0x06
    2e04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e06:	8d 81       	ldd	r24, Y+5	; 0x05
    2e08:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0a:	00 97       	sbiw	r24, 0x00	; 0
    2e0c:	69 f7       	brne	.-38     	; 0x2de8 <displayLoginSuccessful+0x112>
    2e0e:	14 c0       	rjmp	.+40     	; 0x2e38 <displayLoginSuccessful+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e10:	6f 81       	ldd	r22, Y+7	; 0x07
    2e12:	78 85       	ldd	r23, Y+8	; 0x08
    2e14:	89 85       	ldd	r24, Y+9	; 0x09
    2e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	9e 83       	std	Y+6, r25	; 0x06
    2e22:	8d 83       	std	Y+5, r24	; 0x05
    2e24:	8d 81       	ldd	r24, Y+5	; 0x05
    2e26:	9e 81       	ldd	r25, Y+6	; 0x06
    2e28:	9a 83       	std	Y+2, r25	; 0x02
    2e2a:	89 83       	std	Y+1, r24	; 0x01
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	f1 f7       	brne	.-4      	; 0x2e30 <displayLoginSuccessful+0x15a>
    2e34:	9a 83       	std	Y+2, r25	; 0x02
    2e36:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
}
    2e38:	6f 96       	adiw	r28, 0x1f	; 31
    2e3a:	0f b6       	in	r0, 0x3f	; 63
    2e3c:	f8 94       	cli
    2e3e:	de bf       	out	0x3e, r29	; 62
    2e40:	0f be       	out	0x3f, r0	; 63
    2e42:	cd bf       	out	0x3d, r28	; 61
    2e44:	cf 91       	pop	r28
    2e46:	df 91       	pop	r29
    2e48:	08 95       	ret

00002e4a <displayMaxLoginAttemptsReached>:

void displayMaxLoginAttemptsReached() {
    2e4a:	df 93       	push	r29
    2e4c:	cf 93       	push	r28
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
    2e52:	2e 97       	sbiw	r28, 0x0e	; 14
    2e54:	0f b6       	in	r0, 0x3f	; 63
    2e56:	f8 94       	cli
    2e58:	de bf       	out	0x3e, r29	; 62
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	cd bf       	out	0x3d, r28	; 61
    LCD_8_bit_sendString("Max Login");
    2e5e:	8c ea       	ldi	r24, 0xAC	; 172
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    LCD_8_bit_GoToPos(1, 0);
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	60 e0       	ldi	r22, 0x00	; 0
    2e6c:	70 e0       	ldi	r23, 0x00	; 0
    2e6e:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_8_bit_GoToPos>
    LCD_8_bit_sendString("Attempts Reached");
    2e72:	86 eb       	ldi	r24, 0xB6	; 182
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	a8 ec       	ldi	r26, 0xC8	; 200
    2e80:	b2 e4       	ldi	r27, 0x42	; 66
    2e82:	8b 87       	std	Y+11, r24	; 0x0b
    2e84:	9c 87       	std	Y+12, r25	; 0x0c
    2e86:	ad 87       	std	Y+13, r26	; 0x0d
    2e88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	4a ef       	ldi	r20, 0xFA	; 250
    2e98:	54 e4       	ldi	r21, 0x44	; 68
    2e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	8f 83       	std	Y+7, r24	; 0x07
    2ea4:	98 87       	std	Y+8, r25	; 0x08
    2ea6:	a9 87       	std	Y+9, r26	; 0x09
    2ea8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2eac:	78 85       	ldd	r23, Y+8	; 0x08
    2eae:	89 85       	ldd	r24, Y+9	; 0x09
    2eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	40 e8       	ldi	r20, 0x80	; 128
    2eb8:	5f e3       	ldi	r21, 0x3F	; 63
    2eba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ebe:	88 23       	and	r24, r24
    2ec0:	2c f4       	brge	.+10     	; 0x2ecc <displayMaxLoginAttemptsReached+0x82>
		__ticks = 1;
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	9e 83       	std	Y+6, r25	; 0x06
    2ec8:	8d 83       	std	Y+5, r24	; 0x05
    2eca:	3f c0       	rjmp	.+126    	; 0x2f4a <displayMaxLoginAttemptsReached+0x100>
	else if (__tmp > 65535)
    2ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ece:	78 85       	ldd	r23, Y+8	; 0x08
    2ed0:	89 85       	ldd	r24, Y+9	; 0x09
    2ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	3f ef       	ldi	r19, 0xFF	; 255
    2ed8:	4f e7       	ldi	r20, 0x7F	; 127
    2eda:	57 e4       	ldi	r21, 0x47	; 71
    2edc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee0:	18 16       	cp	r1, r24
    2ee2:	4c f5       	brge	.+82     	; 0x2f36 <displayMaxLoginAttemptsReached+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e2       	ldi	r20, 0x20	; 32
    2ef2:	51 e4       	ldi	r21, 0x41	; 65
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	bc 01       	movw	r22, r24
    2efe:	cd 01       	movw	r24, r26
    2f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	9e 83       	std	Y+6, r25	; 0x06
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
    2f0c:	0f c0       	rjmp	.+30     	; 0x2f2c <displayMaxLoginAttemptsReached+0xe2>
    2f0e:	88 ec       	ldi	r24, 0xC8	; 200
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	9c 83       	std	Y+4, r25	; 0x04
    2f14:	8b 83       	std	Y+3, r24	; 0x03
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	f1 f7       	brne	.-4      	; 0x2f1a <displayMaxLoginAttemptsReached+0xd0>
    2f1e:	9c 83       	std	Y+4, r25	; 0x04
    2f20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f22:	8d 81       	ldd	r24, Y+5	; 0x05
    2f24:	9e 81       	ldd	r25, Y+6	; 0x06
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	9e 83       	std	Y+6, r25	; 0x06
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	69 f7       	brne	.-38     	; 0x2f0e <displayMaxLoginAttemptsReached+0xc4>
    2f34:	14 c0       	rjmp	.+40     	; 0x2f5e <displayMaxLoginAttemptsReached+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f36:	6f 81       	ldd	r22, Y+7	; 0x07
    2f38:	78 85       	ldd	r23, Y+8	; 0x08
    2f3a:	89 85       	ldd	r24, Y+9	; 0x09
    2f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	9e 83       	std	Y+6, r25	; 0x06
    2f48:	8d 83       	std	Y+5, r24	; 0x05
    2f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4e:	9a 83       	std	Y+2, r25	; 0x02
    2f50:	89 83       	std	Y+1, r24	; 0x01
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	9a 81       	ldd	r25, Y+2	; 0x02
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <displayMaxLoginAttemptsReached+0x10c>
    2f5a:	9a 83       	std	Y+2, r25	; 0x02
    2f5c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
}
    2f5e:	2e 96       	adiw	r28, 0x0e	; 14
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	f8 94       	cli
    2f64:	de bf       	out	0x3e, r29	; 62
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	cd bf       	out	0x3d, r28	; 61
    2f6a:	cf 91       	pop	r28
    2f6c:	df 91       	pop	r29
    2f6e:	08 95       	ret

00002f70 <displayWelcomeMessage>:

void displayWelcomeMessage() {
    2f70:	df 93       	push	r29
    2f72:	cf 93       	push	r28
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
    2f78:	2e 97       	sbiw	r28, 0x0e	; 14
    2f7a:	0f b6       	in	r0, 0x3f	; 63
    2f7c:	f8 94       	cli
    2f7e:	de bf       	out	0x3e, r29	; 62
    2f80:	0f be       	out	0x3f, r0	; 63
    2f82:	cd bf       	out	0x3d, r28	; 61
	 LCD_CLR();
    2f84:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_CLR>
    LCD_8_bit_sendString("Welcome");
    2f88:	87 ec       	ldi	r24, 0xC7	; 199
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	a8 ec       	ldi	r26, 0xC8	; 200
    2f96:	b2 e4       	ldi	r27, 0x42	; 66
    2f98:	8b 87       	std	Y+11, r24	; 0x0b
    2f9a:	9c 87       	std	Y+12, r25	; 0x0c
    2f9c:	ad 87       	std	Y+13, r26	; 0x0d
    2f9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	4a ef       	ldi	r20, 0xFA	; 250
    2fae:	54 e4       	ldi	r21, 0x44	; 68
    2fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	8f 83       	std	Y+7, r24	; 0x07
    2fba:	98 87       	std	Y+8, r25	; 0x08
    2fbc:	a9 87       	std	Y+9, r26	; 0x09
    2fbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc2:	78 85       	ldd	r23, Y+8	; 0x08
    2fc4:	89 85       	ldd	r24, Y+9	; 0x09
    2fc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	40 e8       	ldi	r20, 0x80	; 128
    2fce:	5f e3       	ldi	r21, 0x3F	; 63
    2fd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fd4:	88 23       	and	r24, r24
    2fd6:	2c f4       	brge	.+10     	; 0x2fe2 <displayWelcomeMessage+0x72>
		__ticks = 1;
    2fd8:	81 e0       	ldi	r24, 0x01	; 1
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	9e 83       	std	Y+6, r25	; 0x06
    2fde:	8d 83       	std	Y+5, r24	; 0x05
    2fe0:	3f c0       	rjmp	.+126    	; 0x3060 <displayWelcomeMessage+0xf0>
	else if (__tmp > 65535)
    2fe2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe4:	78 85       	ldd	r23, Y+8	; 0x08
    2fe6:	89 85       	ldd	r24, Y+9	; 0x09
    2fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	3f ef       	ldi	r19, 0xFF	; 255
    2fee:	4f e7       	ldi	r20, 0x7F	; 127
    2ff0:	57 e4       	ldi	r21, 0x47	; 71
    2ff2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ff6:	18 16       	cp	r1, r24
    2ff8:	4c f5       	brge	.+82     	; 0x304c <displayWelcomeMessage+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3000:	9e 85       	ldd	r25, Y+14	; 0x0e
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	40 e2       	ldi	r20, 0x20	; 32
    3008:	51 e4       	ldi	r21, 0x41	; 65
    300a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	bc 01       	movw	r22, r24
    3014:	cd 01       	movw	r24, r26
    3016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	9e 83       	std	Y+6, r25	; 0x06
    3020:	8d 83       	std	Y+5, r24	; 0x05
    3022:	0f c0       	rjmp	.+30     	; 0x3042 <displayWelcomeMessage+0xd2>
    3024:	88 ec       	ldi	r24, 0xC8	; 200
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	9c 83       	std	Y+4, r25	; 0x04
    302a:	8b 83       	std	Y+3, r24	; 0x03
    302c:	8b 81       	ldd	r24, Y+3	; 0x03
    302e:	9c 81       	ldd	r25, Y+4	; 0x04
    3030:	01 97       	sbiw	r24, 0x01	; 1
    3032:	f1 f7       	brne	.-4      	; 0x3030 <displayWelcomeMessage+0xc0>
    3034:	9c 83       	std	Y+4, r25	; 0x04
    3036:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3038:	8d 81       	ldd	r24, Y+5	; 0x05
    303a:	9e 81       	ldd	r25, Y+6	; 0x06
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	9e 83       	std	Y+6, r25	; 0x06
    3040:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3042:	8d 81       	ldd	r24, Y+5	; 0x05
    3044:	9e 81       	ldd	r25, Y+6	; 0x06
    3046:	00 97       	sbiw	r24, 0x00	; 0
    3048:	69 f7       	brne	.-38     	; 0x3024 <displayWelcomeMessage+0xb4>
    304a:	14 c0       	rjmp	.+40     	; 0x3074 <displayWelcomeMessage+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    304c:	6f 81       	ldd	r22, Y+7	; 0x07
    304e:	78 85       	ldd	r23, Y+8	; 0x08
    3050:	89 85       	ldd	r24, Y+9	; 0x09
    3052:	9a 85       	ldd	r25, Y+10	; 0x0a
    3054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	9e 83       	std	Y+6, r25	; 0x06
    305e:	8d 83       	std	Y+5, r24	; 0x05
    3060:	8d 81       	ldd	r24, Y+5	; 0x05
    3062:	9e 81       	ldd	r25, Y+6	; 0x06
    3064:	9a 83       	std	Y+2, r25	; 0x02
    3066:	89 83       	std	Y+1, r24	; 0x01
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	9a 81       	ldd	r25, Y+2	; 0x02
    306c:	01 97       	sbiw	r24, 0x01	; 1
    306e:	f1 f7       	brne	.-4      	; 0x306c <displayWelcomeMessage+0xfc>
    3070:	9a 83       	std	Y+2, r25	; 0x02
    3072:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
    LCD_CLR();
    3074:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_CLR>
}
    3078:	2e 96       	adiw	r28, 0x0e	; 14
    307a:	0f b6       	in	r0, 0x3f	; 63
    307c:	f8 94       	cli
    307e:	de bf       	out	0x3e, r29	; 62
    3080:	0f be       	out	0x3f, r0	; 63
    3082:	cd bf       	out	0x3d, r28	; 61
    3084:	cf 91       	pop	r28
    3086:	df 91       	pop	r29
    3088:	08 95       	ret

0000308a <showOptions>:

void showOptions() {
    308a:	df 93       	push	r29
    308c:	cf 93       	push	r28
    308e:	00 d0       	rcall	.+0      	; 0x3090 <showOptions+0x6>
    3090:	00 d0       	rcall	.+0      	; 0x3092 <showOptions+0x8>
    3092:	cd b7       	in	r28, 0x3d	; 61
    3094:	de b7       	in	r29, 0x3e	; 62
    LCD_CLR();
    3096:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_CLR>
    LCD_8_bit_sendString("1:Temp, ");
    309a:	8f ec       	ldi	r24, 0xCF	; 207
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    LCD_8_bit_sendString("2:Motors");
    30a2:	88 ed       	ldi	r24, 0xD8	; 216
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    LCD_8_bit_GoToPos(1, 0);
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	60 e0       	ldi	r22, 0x00	; 0
    30b0:	70 e0       	ldi	r23, 0x00	; 0
    30b2:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_8_bit_GoToPos>
    LCD_8_bit_sendString("3:LEDs, ");
    30b6:	81 ee       	ldi	r24, 0xE1	; 225
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    LCD_8_bit_sendString("4:Logout");
    30be:	8a ee       	ldi	r24, 0xEA	; 234
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>

    u8 isLoggedOut = 0;
    30c6:	19 82       	std	Y+1, r1	; 0x01
    30c8:	34 c0       	rjmp	.+104    	; 0x3132 <showOptions+0xa8>

    while (!isLoggedOut) {
        u8 key;
        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    30ca:	ce 01       	movw	r24, r28
    30cc:	02 96       	adiw	r24, 0x02	; 2
    30ce:	0e 94 ed 12 	call	0x25da	; 0x25da <Keypad_enu_getKey>
    30d2:	81 30       	cpi	r24, 0x01	; 1
    30d4:	71 f5       	brne	.+92     	; 0x3132 <showOptions+0xa8>
    30d6:	8a 81       	ldd	r24, Y+2	; 0x02
    30d8:	8f 3f       	cpi	r24, 0xFF	; 255
    30da:	59 f1       	breq	.+86     	; 0x3132 <showOptions+0xa8>
            switch (key) {
    30dc:	8a 81       	ldd	r24, Y+2	; 0x02
    30de:	28 2f       	mov	r18, r24
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	3c 83       	std	Y+4, r19	; 0x04
    30e4:	2b 83       	std	Y+3, r18	; 0x03
    30e6:	8b 81       	ldd	r24, Y+3	; 0x03
    30e8:	9c 81       	ldd	r25, Y+4	; 0x04
    30ea:	82 33       	cpi	r24, 0x32	; 50
    30ec:	91 05       	cpc	r25, r1
    30ee:	c9 f0       	breq	.+50     	; 0x3122 <showOptions+0x98>
    30f0:	2b 81       	ldd	r18, Y+3	; 0x03
    30f2:	3c 81       	ldd	r19, Y+4	; 0x04
    30f4:	23 33       	cpi	r18, 0x33	; 51
    30f6:	31 05       	cpc	r19, r1
    30f8:	34 f4       	brge	.+12     	; 0x3106 <showOptions+0x7c>
    30fa:	8b 81       	ldd	r24, Y+3	; 0x03
    30fc:	9c 81       	ldd	r25, Y+4	; 0x04
    30fe:	81 33       	cpi	r24, 0x31	; 49
    3100:	91 05       	cpc	r25, r1
    3102:	61 f0       	breq	.+24     	; 0x311c <showOptions+0x92>
    3104:	16 c0       	rjmp	.+44     	; 0x3132 <showOptions+0xa8>
    3106:	2b 81       	ldd	r18, Y+3	; 0x03
    3108:	3c 81       	ldd	r19, Y+4	; 0x04
    310a:	23 33       	cpi	r18, 0x33	; 51
    310c:	31 05       	cpc	r19, r1
    310e:	61 f0       	breq	.+24     	; 0x3128 <showOptions+0x9e>
    3110:	8b 81       	ldd	r24, Y+3	; 0x03
    3112:	9c 81       	ldd	r25, Y+4	; 0x04
    3114:	84 33       	cpi	r24, 0x34	; 52
    3116:	91 05       	cpc	r25, r1
    3118:	51 f0       	breq	.+20     	; 0x312e <showOptions+0xa4>
    311a:	0b c0       	rjmp	.+22     	; 0x3132 <showOptions+0xa8>
                case '1':
                    showTemp();
    311c:	0e 94 81 19 	call	0x3302	; 0x3302 <showTemp>
    3120:	08 c0       	rjmp	.+16     	; 0x3132 <showOptions+0xa8>
                    break;
                case '2':
                    controlWithMotor();
    3122:	0e 94 0c 19 	call	0x3218	; 0x3218 <controlWithMotor>
    3126:	05 c0       	rjmp	.+10     	; 0x3132 <showOptions+0xa8>
                    break;
                case '3':
                    controlWithLEDs();
    3128:	0e 94 a5 18 	call	0x314a	; 0x314a <controlWithLEDs>
    312c:	02 c0       	rjmp	.+4      	; 0x3132 <showOptions+0xa8>
                    break;
                case '4':
                	myAPP();
    312e:	0e 94 0a 14 	call	0x2814	; 0x2814 <myAPP>
    LCD_8_bit_sendString("3:LEDs, ");
    LCD_8_bit_sendString("4:Logout");

    u8 isLoggedOut = 0;

    while (!isLoggedOut) {
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	88 23       	and	r24, r24
    3136:	49 f2       	breq	.-110    	; 0x30ca <showOptions+0x40>
                    break;
            }
        }
    }

    LCD_CLR();
    3138:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_CLR>
}
    313c:	0f 90       	pop	r0
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	cf 91       	pop	r28
    3146:	df 91       	pop	r29
    3148:	08 95       	ret

0000314a <controlWithLEDs>:

void controlWithLEDs() {
    314a:	df 93       	push	r29
    314c:	cf 93       	push	r28
    314e:	00 d0       	rcall	.+0      	; 0x3150 <controlWithLEDs+0x6>
    3150:	00 d0       	rcall	.+0      	; 0x3152 <controlWithLEDs+0x8>
    3152:	cd b7       	in	r28, 0x3d	; 61
    3154:	de b7       	in	r29, 0x3e	; 62
    LCD_CLR();
    3156:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_CLR>
    LCD_8_bit_sendString("1:Green,");
    315a:	83 ef       	ldi	r24, 0xF3	; 243
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    LCD_8_bit_sendString("2:Red");
    3162:	8c ef       	ldi	r24, 0xFC	; 252
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    LCD_8_bit_GoToPos(1, 0);
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	60 e0       	ldi	r22, 0x00	; 0
    3170:	70 e0       	ldi	r23, 0x00	; 0
    3172:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_8_bit_GoToPos>
    LCD_8_bit_sendString("3:Blue,");
    3176:	82 e0       	ldi	r24, 0x02	; 2
    3178:	91 e0       	ldi	r25, 0x01	; 1
    317a:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    LCD_8_bit_sendString("4:Back");
    317e:	8a e0       	ldi	r24, 0x0A	; 10
    3180:	91 e0       	ldi	r25, 0x01	; 1
    3182:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>

    u8 returnToMain = 0;
    3186:	19 82       	std	Y+1, r1	; 0x01
    3188:	3c c0       	rjmp	.+120    	; 0x3202 <controlWithLEDs+0xb8>

    while (!returnToMain) {
        u8 key;
        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    318a:	ce 01       	movw	r24, r28
    318c:	02 96       	adiw	r24, 0x02	; 2
    318e:	0e 94 ed 12 	call	0x25da	; 0x25da <Keypad_enu_getKey>
    3192:	81 30       	cpi	r24, 0x01	; 1
    3194:	b1 f5       	brne	.+108    	; 0x3202 <controlWithLEDs+0xb8>
    3196:	8a 81       	ldd	r24, Y+2	; 0x02
    3198:	8f 3f       	cpi	r24, 0xFF	; 255
    319a:	99 f1       	breq	.+102    	; 0x3202 <controlWithLEDs+0xb8>
            switch (key) {
    319c:	8a 81       	ldd	r24, Y+2	; 0x02
    319e:	28 2f       	mov	r18, r24
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	3c 83       	std	Y+4, r19	; 0x04
    31a4:	2b 83       	std	Y+3, r18	; 0x03
    31a6:	8b 81       	ldd	r24, Y+3	; 0x03
    31a8:	9c 81       	ldd	r25, Y+4	; 0x04
    31aa:	82 33       	cpi	r24, 0x32	; 50
    31ac:	91 05       	cpc	r25, r1
    31ae:	d9 f0       	breq	.+54     	; 0x31e6 <controlWithLEDs+0x9c>
    31b0:	2b 81       	ldd	r18, Y+3	; 0x03
    31b2:	3c 81       	ldd	r19, Y+4	; 0x04
    31b4:	23 33       	cpi	r18, 0x33	; 51
    31b6:	31 05       	cpc	r19, r1
    31b8:	34 f4       	brge	.+12     	; 0x31c6 <controlWithLEDs+0x7c>
    31ba:	8b 81       	ldd	r24, Y+3	; 0x03
    31bc:	9c 81       	ldd	r25, Y+4	; 0x04
    31be:	81 33       	cpi	r24, 0x31	; 49
    31c0:	91 05       	cpc	r25, r1
    31c2:	61 f0       	breq	.+24     	; 0x31dc <controlWithLEDs+0x92>
    31c4:	1e c0       	rjmp	.+60     	; 0x3202 <controlWithLEDs+0xb8>
    31c6:	2b 81       	ldd	r18, Y+3	; 0x03
    31c8:	3c 81       	ldd	r19, Y+4	; 0x04
    31ca:	23 33       	cpi	r18, 0x33	; 51
    31cc:	31 05       	cpc	r19, r1
    31ce:	81 f0       	breq	.+32     	; 0x31f0 <controlWithLEDs+0xa6>
    31d0:	8b 81       	ldd	r24, Y+3	; 0x03
    31d2:	9c 81       	ldd	r25, Y+4	; 0x04
    31d4:	84 33       	cpi	r24, 0x34	; 52
    31d6:	91 05       	cpc	r25, r1
    31d8:	81 f0       	breq	.+32     	; 0x31fa <controlWithLEDs+0xb0>
    31da:	13 c0       	rjmp	.+38     	; 0x3202 <controlWithLEDs+0xb8>
                case '1':
                    DIO_toggle(PORT_C, PIN3);
    31dc:	83 e4       	ldi	r24, 0x43	; 67
    31de:	63 e0       	ldi	r22, 0x03	; 3
    31e0:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_toggle>
    31e4:	0e c0       	rjmp	.+28     	; 0x3202 <controlWithLEDs+0xb8>
                    break;
                case '2':
                    DIO_toggle(PORT_C, PIN7);
    31e6:	83 e4       	ldi	r24, 0x43	; 67
    31e8:	67 e0       	ldi	r22, 0x07	; 7
    31ea:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_toggle>
    31ee:	09 c0       	rjmp	.+18     	; 0x3202 <controlWithLEDs+0xb8>
                    break;
                case '3':
                    DIO_toggle(PORT_A, PIN1);
    31f0:	81 e4       	ldi	r24, 0x41	; 65
    31f2:	61 e0       	ldi	r22, 0x01	; 1
    31f4:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_toggle>
    31f8:	04 c0       	rjmp	.+8      	; 0x3202 <controlWithLEDs+0xb8>
                    break;
                case '4':
                    returnToMain = 1;
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	89 83       	std	Y+1, r24	; 0x01
                    showOptions();
    31fe:	0e 94 45 18 	call	0x308a	; 0x308a <showOptions>
    LCD_8_bit_sendString("3:Blue,");
    LCD_8_bit_sendString("4:Back");

    u8 returnToMain = 0;

    while (!returnToMain) {
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	88 23       	and	r24, r24
    3206:	09 f4       	brne	.+2      	; 0x320a <controlWithLEDs+0xc0>
    3208:	c0 cf       	rjmp	.-128    	; 0x318a <controlWithLEDs+0x40>
                default:
                    break;
            }
        }
    }
}
    320a:	0f 90       	pop	r0
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	0f 90       	pop	r0
    3212:	cf 91       	pop	r28
    3214:	df 91       	pop	r29
    3216:	08 95       	ret

00003218 <controlWithMotor>:

void controlWithMotor() {
    3218:	df 93       	push	r29
    321a:	cf 93       	push	r28
    321c:	00 d0       	rcall	.+0      	; 0x321e <controlWithMotor+0x6>
    321e:	00 d0       	rcall	.+0      	; 0x3220 <controlWithMotor+0x8>
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
    LCD_CLR();
    3224:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_CLR>

    LCD_8_bit_sendString("1:FAN+, ");
    3228:	81 e1       	ldi	r24, 0x11	; 17
    322a:	91 e0       	ldi	r25, 0x01	; 1
    322c:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    LCD_8_bit_sendString("2:FAN-");
    3230:	8a e1       	ldi	r24, 0x1A	; 26
    3232:	91 e0       	ldi	r25, 0x01	; 1
    3234:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    LCD_8_bit_GoToPos(1, 0);
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	60 e0       	ldi	r22, 0x00	; 0
    323e:	70 e0       	ldi	r23, 0x00	; 0
    3240:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_8_bit_GoToPos>
    LCD_8_bit_sendString("3:Motor,");
    3244:	81 e2       	ldi	r24, 0x21	; 33
    3246:	91 e0       	ldi	r25, 0x01	; 1
    3248:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    LCD_8_bit_sendString("4:Back");
    324c:	8a e0       	ldi	r24, 0x0A	; 10
    324e:	91 e0       	ldi	r25, 0x01	; 1
    3250:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>

    u8 returnToMain = 0;
    3254:	19 82       	std	Y+1, r1	; 0x01
    3256:	4a c0       	rjmp	.+148    	; 0x32ec <controlWithMotor+0xd4>

    while (!returnToMain) {
        u8 key;
        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    3258:	ce 01       	movw	r24, r28
    325a:	02 96       	adiw	r24, 0x02	; 2
    325c:	0e 94 ed 12 	call	0x25da	; 0x25da <Keypad_enu_getKey>
    3260:	81 30       	cpi	r24, 0x01	; 1
    3262:	09 f0       	breq	.+2      	; 0x3266 <controlWithMotor+0x4e>
    3264:	43 c0       	rjmp	.+134    	; 0x32ec <controlWithMotor+0xd4>
    3266:	8a 81       	ldd	r24, Y+2	; 0x02
    3268:	8f 3f       	cpi	r24, 0xFF	; 255
    326a:	09 f4       	brne	.+2      	; 0x326e <controlWithMotor+0x56>
    326c:	3f c0       	rjmp	.+126    	; 0x32ec <controlWithMotor+0xd4>
            switch (key) {
    326e:	8a 81       	ldd	r24, Y+2	; 0x02
    3270:	28 2f       	mov	r18, r24
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	3c 83       	std	Y+4, r19	; 0x04
    3276:	2b 83       	std	Y+3, r18	; 0x03
    3278:	8b 81       	ldd	r24, Y+3	; 0x03
    327a:	9c 81       	ldd	r25, Y+4	; 0x04
    327c:	82 33       	cpi	r24, 0x32	; 50
    327e:	91 05       	cpc	r25, r1
    3280:	09 f1       	breq	.+66     	; 0x32c4 <controlWithMotor+0xac>
    3282:	2b 81       	ldd	r18, Y+3	; 0x03
    3284:	3c 81       	ldd	r19, Y+4	; 0x04
    3286:	23 33       	cpi	r18, 0x33	; 51
    3288:	31 05       	cpc	r19, r1
    328a:	34 f4       	brge	.+12     	; 0x3298 <controlWithMotor+0x80>
    328c:	8b 81       	ldd	r24, Y+3	; 0x03
    328e:	9c 81       	ldd	r25, Y+4	; 0x04
    3290:	81 33       	cpi	r24, 0x31	; 49
    3292:	91 05       	cpc	r25, r1
    3294:	61 f0       	breq	.+24     	; 0x32ae <controlWithMotor+0x96>
    3296:	2a c0       	rjmp	.+84     	; 0x32ec <controlWithMotor+0xd4>
    3298:	2b 81       	ldd	r18, Y+3	; 0x03
    329a:	3c 81       	ldd	r19, Y+4	; 0x04
    329c:	23 33       	cpi	r18, 0x33	; 51
    329e:	31 05       	cpc	r19, r1
    32a0:	e1 f0       	breq	.+56     	; 0x32da <controlWithMotor+0xc2>
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	9c 81       	ldd	r25, Y+4	; 0x04
    32a6:	84 33       	cpi	r24, 0x34	; 52
    32a8:	91 05       	cpc	r25, r1
    32aa:	e1 f0       	breq	.+56     	; 0x32e4 <controlWithMotor+0xcc>
    32ac:	1f c0       	rjmp	.+62     	; 0x32ec <controlWithMotor+0xd4>
                case '1':
                    DIO_write(PORT_C, PIN5, HIGH);
    32ae:	83 e4       	ldi	r24, 0x43	; 67
    32b0:	65 e0       	ldi	r22, 0x05	; 5
    32b2:	41 e0       	ldi	r20, 0x01	; 1
    32b4:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_write>
                    DIO_write(PORT_C, PIN6, LOW);
    32b8:	83 e4       	ldi	r24, 0x43	; 67
    32ba:	66 e0       	ldi	r22, 0x06	; 6
    32bc:	40 e0       	ldi	r20, 0x00	; 0
    32be:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_write>
    32c2:	14 c0       	rjmp	.+40     	; 0x32ec <controlWithMotor+0xd4>
                    break;
                case '2':
                    DIO_write(PORT_C, PIN6, HIGH);
    32c4:	83 e4       	ldi	r24, 0x43	; 67
    32c6:	66 e0       	ldi	r22, 0x06	; 6
    32c8:	41 e0       	ldi	r20, 0x01	; 1
    32ca:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_write>
                    DIO_write(PORT_C, PIN5, LOW);
    32ce:	83 e4       	ldi	r24, 0x43	; 67
    32d0:	65 e0       	ldi	r22, 0x05	; 5
    32d2:	40 e0       	ldi	r20, 0x00	; 0
    32d4:	0e 94 28 07 	call	0xe50	; 0xe50 <DIO_write>
    32d8:	09 c0       	rjmp	.+18     	; 0x32ec <controlWithMotor+0xd4>
                    break;
                case '3':
                    DIO_toggle(PORT_C, PIN4);
    32da:	83 e4       	ldi	r24, 0x43	; 67
    32dc:	64 e0       	ldi	r22, 0x04	; 4
    32de:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_toggle>
    32e2:	04 c0       	rjmp	.+8      	; 0x32ec <controlWithMotor+0xd4>
                    break;
                case '4':
                    returnToMain = 1;
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	89 83       	std	Y+1, r24	; 0x01
                    showOptions();
    32e8:	0e 94 45 18 	call	0x308a	; 0x308a <showOptions>
    LCD_8_bit_sendString("3:Motor,");
    LCD_8_bit_sendString("4:Back");

    u8 returnToMain = 0;

    while (!returnToMain) {
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	88 23       	and	r24, r24
    32f0:	09 f4       	brne	.+2      	; 0x32f4 <controlWithMotor+0xdc>
    32f2:	b2 cf       	rjmp	.-156    	; 0x3258 <controlWithMotor+0x40>
                default:
                    break;
            }
        }
    }
}
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	0f 90       	pop	r0
    32fc:	cf 91       	pop	r28
    32fe:	df 91       	pop	r29
    3300:	08 95       	ret

00003302 <showTemp>:

void showTemp() {
    3302:	df 93       	push	r29
    3304:	cf 93       	push	r28
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	2e 97       	sbiw	r28, 0x0e	; 14
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	cd bf       	out	0x3d, r28	; 61
    LCD_CLR();
    3316:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_CLR>

    u8 returnToMain = 0;
    331a:	1b 82       	std	Y+3, r1	; 0x03
    u16 analog_value;
	char buffer[10];

	LCD_8_bit_GoToPos(1, 0);
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	60 e0       	ldi	r22, 0x00	; 0
    3322:	70 e0       	ldi	r23, 0x00	; 0
    3324:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_8_bit_GoToPos>
	LCD_8_bit_sendString("1:back");
    3328:	8a e2       	ldi	r24, 0x2A	; 42
    332a:	91 e0       	ldi	r25, 0x01	; 1
    332c:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    3330:	27 c0       	rjmp	.+78     	; 0x3380 <showTemp+0x7e>

    while (!returnToMain) {
   	 analog_value = ADC_u16GetChannalResult(2);
    3332:	82 e0       	ldi	r24, 0x02	; 2
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <ADC_u16GetChannalResult>
    333a:	9a 83       	std	Y+2, r25	; 0x02
    333c:	89 83       	std	Y+1, r24	; 0x01
       itoa(analog_value, buffer, 10);
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	9a 81       	ldd	r25, Y+2	; 0x02
    3342:	9e 01       	movw	r18, r28
    3344:	2c 5f       	subi	r18, 0xFC	; 252
    3346:	3f 4f       	sbci	r19, 0xFF	; 255
    3348:	b9 01       	movw	r22, r18
    334a:	4a e0       	ldi	r20, 0x0A	; 10
    334c:	50 e0       	ldi	r21, 0x00	; 0
    334e:	0e 94 0c 1a 	call	0x3418	; 0x3418 <itoa>
   	LCD_8_bit_sendString(buffer);
    3352:	ce 01       	movw	r24, r28
    3354:	04 96       	adiw	r24, 0x04	; 4
    3356:	0e 94 24 12 	call	0x2448	; 0x2448 <LCD_8_bit_sendString>
    LCD_CLR();
    335a:	0e 94 9e 12 	call	0x253c	; 0x253c <LCD_CLR>
        u8 key;
        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    335e:	ce 01       	movw	r24, r28
    3360:	0e 96       	adiw	r24, 0x0e	; 14
    3362:	0e 94 ed 12 	call	0x25da	; 0x25da <Keypad_enu_getKey>
    3366:	81 30       	cpi	r24, 0x01	; 1
    3368:	59 f4       	brne	.+22     	; 0x3380 <showTemp+0x7e>
    336a:	8e 85       	ldd	r24, Y+14	; 0x0e
    336c:	8f 3f       	cpi	r24, 0xFF	; 255
    336e:	41 f0       	breq	.+16     	; 0x3380 <showTemp+0x7e>
            switch (key) {
    3370:	8e 85       	ldd	r24, Y+14	; 0x0e
    3372:	88 2f       	mov	r24, r24
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	81 33       	cpi	r24, 0x31	; 49
    3378:	91 05       	cpc	r25, r1
    337a:	11 f4       	brne	.+4      	; 0x3380 <showTemp+0x7e>
                case '1':
                	showOptions();
    337c:	0e 94 45 18 	call	0x308a	; 0x308a <showOptions>
	char buffer[10];

	LCD_8_bit_GoToPos(1, 0);
	LCD_8_bit_sendString("1:back");

    while (!returnToMain) {
    3380:	8b 81       	ldd	r24, Y+3	; 0x03
    3382:	88 23       	and	r24, r24
    3384:	b1 f2       	breq	.-84     	; 0x3332 <showTemp+0x30>
                default:
                    break;
            }
        }
    }
}
    3386:	2e 96       	adiw	r28, 0x0e	; 14
    3388:	0f b6       	in	r0, 0x3f	; 63
    338a:	f8 94       	cli
    338c:	de bf       	out	0x3e, r29	; 62
    338e:	0f be       	out	0x3f, r0	; 63
    3390:	cd bf       	out	0x3d, r28	; 61
    3392:	cf 91       	pop	r28
    3394:	df 91       	pop	r29
    3396:	08 95       	ret

00003398 <__prologue_saves__>:
    3398:	2f 92       	push	r2
    339a:	3f 92       	push	r3
    339c:	4f 92       	push	r4
    339e:	5f 92       	push	r5
    33a0:	6f 92       	push	r6
    33a2:	7f 92       	push	r7
    33a4:	8f 92       	push	r8
    33a6:	9f 92       	push	r9
    33a8:	af 92       	push	r10
    33aa:	bf 92       	push	r11
    33ac:	cf 92       	push	r12
    33ae:	df 92       	push	r13
    33b0:	ef 92       	push	r14
    33b2:	ff 92       	push	r15
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    33c0:	ca 1b       	sub	r28, r26
    33c2:	db 0b       	sbc	r29, r27
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	f8 94       	cli
    33c8:	de bf       	out	0x3e, r29	; 62
    33ca:	0f be       	out	0x3f, r0	; 63
    33cc:	cd bf       	out	0x3d, r28	; 61
    33ce:	09 94       	ijmp

000033d0 <__epilogue_restores__>:
    33d0:	2a 88       	ldd	r2, Y+18	; 0x12
    33d2:	39 88       	ldd	r3, Y+17	; 0x11
    33d4:	48 88       	ldd	r4, Y+16	; 0x10
    33d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    33d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    33da:	7d 84       	ldd	r7, Y+13	; 0x0d
    33dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    33de:	9b 84       	ldd	r9, Y+11	; 0x0b
    33e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    33e2:	b9 84       	ldd	r11, Y+9	; 0x09
    33e4:	c8 84       	ldd	r12, Y+8	; 0x08
    33e6:	df 80       	ldd	r13, Y+7	; 0x07
    33e8:	ee 80       	ldd	r14, Y+6	; 0x06
    33ea:	fd 80       	ldd	r15, Y+5	; 0x05
    33ec:	0c 81       	ldd	r16, Y+4	; 0x04
    33ee:	1b 81       	ldd	r17, Y+3	; 0x03
    33f0:	aa 81       	ldd	r26, Y+2	; 0x02
    33f2:	b9 81       	ldd	r27, Y+1	; 0x01
    33f4:	ce 0f       	add	r28, r30
    33f6:	d1 1d       	adc	r29, r1
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	f8 94       	cli
    33fc:	de bf       	out	0x3e, r29	; 62
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	cd bf       	out	0x3d, r28	; 61
    3402:	ed 01       	movw	r28, r26
    3404:	08 95       	ret

00003406 <strcmp>:
    3406:	fb 01       	movw	r30, r22
    3408:	dc 01       	movw	r26, r24
    340a:	8d 91       	ld	r24, X+
    340c:	01 90       	ld	r0, Z+
    340e:	80 19       	sub	r24, r0
    3410:	01 10       	cpse	r0, r1
    3412:	d9 f3       	breq	.-10     	; 0x340a <strcmp+0x4>
    3414:	99 0b       	sbc	r25, r25
    3416:	08 95       	ret

00003418 <itoa>:
    3418:	fb 01       	movw	r30, r22
    341a:	9f 01       	movw	r18, r30
    341c:	e8 94       	clt
    341e:	42 30       	cpi	r20, 0x02	; 2
    3420:	c4 f0       	brlt	.+48     	; 0x3452 <itoa+0x3a>
    3422:	45 32       	cpi	r20, 0x25	; 37
    3424:	b4 f4       	brge	.+44     	; 0x3452 <itoa+0x3a>
    3426:	4a 30       	cpi	r20, 0x0A	; 10
    3428:	29 f4       	brne	.+10     	; 0x3434 <itoa+0x1c>
    342a:	97 fb       	bst	r25, 7
    342c:	1e f4       	brtc	.+6      	; 0x3434 <itoa+0x1c>
    342e:	90 95       	com	r25
    3430:	81 95       	neg	r24
    3432:	9f 4f       	sbci	r25, 0xFF	; 255
    3434:	64 2f       	mov	r22, r20
    3436:	77 27       	eor	r23, r23
    3438:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__udivmodhi4>
    343c:	80 5d       	subi	r24, 0xD0	; 208
    343e:	8a 33       	cpi	r24, 0x3A	; 58
    3440:	0c f0       	brlt	.+2      	; 0x3444 <itoa+0x2c>
    3442:	89 5d       	subi	r24, 0xD9	; 217
    3444:	81 93       	st	Z+, r24
    3446:	cb 01       	movw	r24, r22
    3448:	00 97       	sbiw	r24, 0x00	; 0
    344a:	a1 f7       	brne	.-24     	; 0x3434 <itoa+0x1c>
    344c:	16 f4       	brtc	.+4      	; 0x3452 <itoa+0x3a>
    344e:	5d e2       	ldi	r21, 0x2D	; 45
    3450:	51 93       	st	Z+, r21
    3452:	10 82       	st	Z, r1
    3454:	c9 01       	movw	r24, r18
    3456:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <strrev>

0000345a <snprintf>:
    345a:	ae e0       	ldi	r26, 0x0E	; 14
    345c:	b0 e0       	ldi	r27, 0x00	; 0
    345e:	e3 e3       	ldi	r30, 0x33	; 51
    3460:	fa e1       	ldi	r31, 0x1A	; 26
    3462:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <__prologue_saves__+0x1c>
    3466:	0d 89       	ldd	r16, Y+21	; 0x15
    3468:	1e 89       	ldd	r17, Y+22	; 0x16
    346a:	8f 89       	ldd	r24, Y+23	; 0x17
    346c:	98 8d       	ldd	r25, Y+24	; 0x18
    346e:	97 ff       	sbrs	r25, 7
    3470:	02 c0       	rjmp	.+4      	; 0x3476 <snprintf+0x1c>
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	90 e8       	ldi	r25, 0x80	; 128
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	9e 83       	std	Y+6, r25	; 0x06
    347a:	8d 83       	std	Y+5, r24	; 0x05
    347c:	1a 83       	std	Y+2, r17	; 0x02
    347e:	09 83       	std	Y+1, r16	; 0x01
    3480:	86 e0       	ldi	r24, 0x06	; 6
    3482:	8c 83       	std	Y+4, r24	; 0x04
    3484:	9e 01       	movw	r18, r28
    3486:	25 5e       	subi	r18, 0xE5	; 229
    3488:	3f 4f       	sbci	r19, 0xFF	; 255
    348a:	ce 01       	movw	r24, r28
    348c:	01 96       	adiw	r24, 0x01	; 1
    348e:	69 8d       	ldd	r22, Y+25	; 0x19
    3490:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3492:	a9 01       	movw	r20, r18
    3494:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <vfprintf>
    3498:	4d 81       	ldd	r20, Y+5	; 0x05
    349a:	5e 81       	ldd	r21, Y+6	; 0x06
    349c:	57 fd       	sbrc	r21, 7
    349e:	0a c0       	rjmp	.+20     	; 0x34b4 <snprintf+0x5a>
    34a0:	2f 81       	ldd	r18, Y+7	; 0x07
    34a2:	38 85       	ldd	r19, Y+8	; 0x08
    34a4:	42 17       	cp	r20, r18
    34a6:	53 07       	cpc	r21, r19
    34a8:	0c f4       	brge	.+2      	; 0x34ac <snprintf+0x52>
    34aa:	9a 01       	movw	r18, r20
    34ac:	02 0f       	add	r16, r18
    34ae:	13 1f       	adc	r17, r19
    34b0:	f8 01       	movw	r30, r16
    34b2:	10 82       	st	Z, r1
    34b4:	2e 96       	adiw	r28, 0x0e	; 14
    34b6:	e4 e0       	ldi	r30, 0x04	; 4
    34b8:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__epilogue_restores__+0x1c>

000034bc <vfprintf>:
    34bc:	ab e0       	ldi	r26, 0x0B	; 11
    34be:	b0 e0       	ldi	r27, 0x00	; 0
    34c0:	e4 e6       	ldi	r30, 0x64	; 100
    34c2:	fa e1       	ldi	r31, 0x1A	; 26
    34c4:	0c 94 cc 19 	jmp	0x3398	; 0x3398 <__prologue_saves__>
    34c8:	3c 01       	movw	r6, r24
    34ca:	2b 01       	movw	r4, r22
    34cc:	5a 01       	movw	r10, r20
    34ce:	fc 01       	movw	r30, r24
    34d0:	17 82       	std	Z+7, r1	; 0x07
    34d2:	16 82       	std	Z+6, r1	; 0x06
    34d4:	83 81       	ldd	r24, Z+3	; 0x03
    34d6:	81 fd       	sbrc	r24, 1
    34d8:	03 c0       	rjmp	.+6      	; 0x34e0 <vfprintf+0x24>
    34da:	6f ef       	ldi	r22, 0xFF	; 255
    34dc:	7f ef       	ldi	r23, 0xFF	; 255
    34de:	c6 c1       	rjmp	.+908    	; 0x386c <vfprintf+0x3b0>
    34e0:	9a e0       	ldi	r25, 0x0A	; 10
    34e2:	89 2e       	mov	r8, r25
    34e4:	1e 01       	movw	r2, r28
    34e6:	08 94       	sec
    34e8:	21 1c       	adc	r2, r1
    34ea:	31 1c       	adc	r3, r1
    34ec:	f3 01       	movw	r30, r6
    34ee:	23 81       	ldd	r18, Z+3	; 0x03
    34f0:	f2 01       	movw	r30, r4
    34f2:	23 fd       	sbrc	r18, 3
    34f4:	85 91       	lpm	r24, Z+
    34f6:	23 ff       	sbrs	r18, 3
    34f8:	81 91       	ld	r24, Z+
    34fa:	2f 01       	movw	r4, r30
    34fc:	88 23       	and	r24, r24
    34fe:	09 f4       	brne	.+2      	; 0x3502 <vfprintf+0x46>
    3500:	b2 c1       	rjmp	.+868    	; 0x3866 <vfprintf+0x3aa>
    3502:	85 32       	cpi	r24, 0x25	; 37
    3504:	39 f4       	brne	.+14     	; 0x3514 <vfprintf+0x58>
    3506:	23 fd       	sbrc	r18, 3
    3508:	85 91       	lpm	r24, Z+
    350a:	23 ff       	sbrs	r18, 3
    350c:	81 91       	ld	r24, Z+
    350e:	2f 01       	movw	r4, r30
    3510:	85 32       	cpi	r24, 0x25	; 37
    3512:	29 f4       	brne	.+10     	; 0x351e <vfprintf+0x62>
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	b3 01       	movw	r22, r6
    3518:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <fputc>
    351c:	e7 cf       	rjmp	.-50     	; 0x34ec <vfprintf+0x30>
    351e:	98 2f       	mov	r25, r24
    3520:	ff 24       	eor	r15, r15
    3522:	ee 24       	eor	r14, r14
    3524:	99 24       	eor	r9, r9
    3526:	ff e1       	ldi	r31, 0x1F	; 31
    3528:	ff 15       	cp	r31, r15
    352a:	d0 f0       	brcs	.+52     	; 0x3560 <vfprintf+0xa4>
    352c:	9b 32       	cpi	r25, 0x2B	; 43
    352e:	69 f0       	breq	.+26     	; 0x354a <vfprintf+0x8e>
    3530:	9c 32       	cpi	r25, 0x2C	; 44
    3532:	28 f4       	brcc	.+10     	; 0x353e <vfprintf+0x82>
    3534:	90 32       	cpi	r25, 0x20	; 32
    3536:	59 f0       	breq	.+22     	; 0x354e <vfprintf+0x92>
    3538:	93 32       	cpi	r25, 0x23	; 35
    353a:	91 f4       	brne	.+36     	; 0x3560 <vfprintf+0xa4>
    353c:	0e c0       	rjmp	.+28     	; 0x355a <vfprintf+0x9e>
    353e:	9d 32       	cpi	r25, 0x2D	; 45
    3540:	49 f0       	breq	.+18     	; 0x3554 <vfprintf+0x98>
    3542:	90 33       	cpi	r25, 0x30	; 48
    3544:	69 f4       	brne	.+26     	; 0x3560 <vfprintf+0xa4>
    3546:	41 e0       	ldi	r20, 0x01	; 1
    3548:	24 c0       	rjmp	.+72     	; 0x3592 <vfprintf+0xd6>
    354a:	52 e0       	ldi	r21, 0x02	; 2
    354c:	f5 2a       	or	r15, r21
    354e:	84 e0       	ldi	r24, 0x04	; 4
    3550:	f8 2a       	or	r15, r24
    3552:	28 c0       	rjmp	.+80     	; 0x35a4 <vfprintf+0xe8>
    3554:	98 e0       	ldi	r25, 0x08	; 8
    3556:	f9 2a       	or	r15, r25
    3558:	25 c0       	rjmp	.+74     	; 0x35a4 <vfprintf+0xe8>
    355a:	e0 e1       	ldi	r30, 0x10	; 16
    355c:	fe 2a       	or	r15, r30
    355e:	22 c0       	rjmp	.+68     	; 0x35a4 <vfprintf+0xe8>
    3560:	f7 fc       	sbrc	r15, 7
    3562:	29 c0       	rjmp	.+82     	; 0x35b6 <vfprintf+0xfa>
    3564:	89 2f       	mov	r24, r25
    3566:	80 53       	subi	r24, 0x30	; 48
    3568:	8a 30       	cpi	r24, 0x0A	; 10
    356a:	70 f4       	brcc	.+28     	; 0x3588 <vfprintf+0xcc>
    356c:	f6 fe       	sbrs	r15, 6
    356e:	05 c0       	rjmp	.+10     	; 0x357a <vfprintf+0xbe>
    3570:	98 9c       	mul	r9, r8
    3572:	90 2c       	mov	r9, r0
    3574:	11 24       	eor	r1, r1
    3576:	98 0e       	add	r9, r24
    3578:	15 c0       	rjmp	.+42     	; 0x35a4 <vfprintf+0xe8>
    357a:	e8 9c       	mul	r14, r8
    357c:	e0 2c       	mov	r14, r0
    357e:	11 24       	eor	r1, r1
    3580:	e8 0e       	add	r14, r24
    3582:	f0 e2       	ldi	r31, 0x20	; 32
    3584:	ff 2a       	or	r15, r31
    3586:	0e c0       	rjmp	.+28     	; 0x35a4 <vfprintf+0xe8>
    3588:	9e 32       	cpi	r25, 0x2E	; 46
    358a:	29 f4       	brne	.+10     	; 0x3596 <vfprintf+0xda>
    358c:	f6 fc       	sbrc	r15, 6
    358e:	6b c1       	rjmp	.+726    	; 0x3866 <vfprintf+0x3aa>
    3590:	40 e4       	ldi	r20, 0x40	; 64
    3592:	f4 2a       	or	r15, r20
    3594:	07 c0       	rjmp	.+14     	; 0x35a4 <vfprintf+0xe8>
    3596:	9c 36       	cpi	r25, 0x6C	; 108
    3598:	19 f4       	brne	.+6      	; 0x35a0 <vfprintf+0xe4>
    359a:	50 e8       	ldi	r21, 0x80	; 128
    359c:	f5 2a       	or	r15, r21
    359e:	02 c0       	rjmp	.+4      	; 0x35a4 <vfprintf+0xe8>
    35a0:	98 36       	cpi	r25, 0x68	; 104
    35a2:	49 f4       	brne	.+18     	; 0x35b6 <vfprintf+0xfa>
    35a4:	f2 01       	movw	r30, r4
    35a6:	23 fd       	sbrc	r18, 3
    35a8:	95 91       	lpm	r25, Z+
    35aa:	23 ff       	sbrs	r18, 3
    35ac:	91 91       	ld	r25, Z+
    35ae:	2f 01       	movw	r4, r30
    35b0:	99 23       	and	r25, r25
    35b2:	09 f0       	breq	.+2      	; 0x35b6 <vfprintf+0xfa>
    35b4:	b8 cf       	rjmp	.-144    	; 0x3526 <vfprintf+0x6a>
    35b6:	89 2f       	mov	r24, r25
    35b8:	85 54       	subi	r24, 0x45	; 69
    35ba:	83 30       	cpi	r24, 0x03	; 3
    35bc:	18 f0       	brcs	.+6      	; 0x35c4 <vfprintf+0x108>
    35be:	80 52       	subi	r24, 0x20	; 32
    35c0:	83 30       	cpi	r24, 0x03	; 3
    35c2:	38 f4       	brcc	.+14     	; 0x35d2 <vfprintf+0x116>
    35c4:	44 e0       	ldi	r20, 0x04	; 4
    35c6:	50 e0       	ldi	r21, 0x00	; 0
    35c8:	a4 0e       	add	r10, r20
    35ca:	b5 1e       	adc	r11, r21
    35cc:	5f e3       	ldi	r21, 0x3F	; 63
    35ce:	59 83       	std	Y+1, r21	; 0x01
    35d0:	0f c0       	rjmp	.+30     	; 0x35f0 <vfprintf+0x134>
    35d2:	93 36       	cpi	r25, 0x63	; 99
    35d4:	31 f0       	breq	.+12     	; 0x35e2 <vfprintf+0x126>
    35d6:	93 37       	cpi	r25, 0x73	; 115
    35d8:	79 f0       	breq	.+30     	; 0x35f8 <vfprintf+0x13c>
    35da:	93 35       	cpi	r25, 0x53	; 83
    35dc:	09 f0       	breq	.+2      	; 0x35e0 <vfprintf+0x124>
    35de:	56 c0       	rjmp	.+172    	; 0x368c <vfprintf+0x1d0>
    35e0:	20 c0       	rjmp	.+64     	; 0x3622 <vfprintf+0x166>
    35e2:	f5 01       	movw	r30, r10
    35e4:	80 81       	ld	r24, Z
    35e6:	89 83       	std	Y+1, r24	; 0x01
    35e8:	42 e0       	ldi	r20, 0x02	; 2
    35ea:	50 e0       	ldi	r21, 0x00	; 0
    35ec:	a4 0e       	add	r10, r20
    35ee:	b5 1e       	adc	r11, r21
    35f0:	61 01       	movw	r12, r2
    35f2:	01 e0       	ldi	r16, 0x01	; 1
    35f4:	10 e0       	ldi	r17, 0x00	; 0
    35f6:	12 c0       	rjmp	.+36     	; 0x361c <vfprintf+0x160>
    35f8:	f5 01       	movw	r30, r10
    35fa:	c0 80       	ld	r12, Z
    35fc:	d1 80       	ldd	r13, Z+1	; 0x01
    35fe:	f6 fc       	sbrc	r15, 6
    3600:	03 c0       	rjmp	.+6      	; 0x3608 <vfprintf+0x14c>
    3602:	6f ef       	ldi	r22, 0xFF	; 255
    3604:	7f ef       	ldi	r23, 0xFF	; 255
    3606:	02 c0       	rjmp	.+4      	; 0x360c <vfprintf+0x150>
    3608:	69 2d       	mov	r22, r9
    360a:	70 e0       	ldi	r23, 0x00	; 0
    360c:	42 e0       	ldi	r20, 0x02	; 2
    360e:	50 e0       	ldi	r21, 0x00	; 0
    3610:	a4 0e       	add	r10, r20
    3612:	b5 1e       	adc	r11, r21
    3614:	c6 01       	movw	r24, r12
    3616:	0e 94 46 1c 	call	0x388c	; 0x388c <strnlen>
    361a:	8c 01       	movw	r16, r24
    361c:	5f e7       	ldi	r21, 0x7F	; 127
    361e:	f5 22       	and	r15, r21
    3620:	14 c0       	rjmp	.+40     	; 0x364a <vfprintf+0x18e>
    3622:	f5 01       	movw	r30, r10
    3624:	c0 80       	ld	r12, Z
    3626:	d1 80       	ldd	r13, Z+1	; 0x01
    3628:	f6 fc       	sbrc	r15, 6
    362a:	03 c0       	rjmp	.+6      	; 0x3632 <vfprintf+0x176>
    362c:	6f ef       	ldi	r22, 0xFF	; 255
    362e:	7f ef       	ldi	r23, 0xFF	; 255
    3630:	02 c0       	rjmp	.+4      	; 0x3636 <vfprintf+0x17a>
    3632:	69 2d       	mov	r22, r9
    3634:	70 e0       	ldi	r23, 0x00	; 0
    3636:	42 e0       	ldi	r20, 0x02	; 2
    3638:	50 e0       	ldi	r21, 0x00	; 0
    363a:	a4 0e       	add	r10, r20
    363c:	b5 1e       	adc	r11, r21
    363e:	c6 01       	movw	r24, r12
    3640:	0e 94 3b 1c 	call	0x3876	; 0x3876 <strnlen_P>
    3644:	8c 01       	movw	r16, r24
    3646:	50 e8       	ldi	r21, 0x80	; 128
    3648:	f5 2a       	or	r15, r21
    364a:	f3 fe       	sbrs	r15, 3
    364c:	07 c0       	rjmp	.+14     	; 0x365c <vfprintf+0x1a0>
    364e:	1a c0       	rjmp	.+52     	; 0x3684 <vfprintf+0x1c8>
    3650:	80 e2       	ldi	r24, 0x20	; 32
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	b3 01       	movw	r22, r6
    3656:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <fputc>
    365a:	ea 94       	dec	r14
    365c:	8e 2d       	mov	r24, r14
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	08 17       	cp	r16, r24
    3662:	19 07       	cpc	r17, r25
    3664:	a8 f3       	brcs	.-22     	; 0x3650 <vfprintf+0x194>
    3666:	0e c0       	rjmp	.+28     	; 0x3684 <vfprintf+0x1c8>
    3668:	f6 01       	movw	r30, r12
    366a:	f7 fc       	sbrc	r15, 7
    366c:	85 91       	lpm	r24, Z+
    366e:	f7 fe       	sbrs	r15, 7
    3670:	81 91       	ld	r24, Z+
    3672:	6f 01       	movw	r12, r30
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	b3 01       	movw	r22, r6
    3678:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <fputc>
    367c:	e1 10       	cpse	r14, r1
    367e:	ea 94       	dec	r14
    3680:	01 50       	subi	r16, 0x01	; 1
    3682:	10 40       	sbci	r17, 0x00	; 0
    3684:	01 15       	cp	r16, r1
    3686:	11 05       	cpc	r17, r1
    3688:	79 f7       	brne	.-34     	; 0x3668 <vfprintf+0x1ac>
    368a:	ea c0       	rjmp	.+468    	; 0x3860 <vfprintf+0x3a4>
    368c:	94 36       	cpi	r25, 0x64	; 100
    368e:	11 f0       	breq	.+4      	; 0x3694 <vfprintf+0x1d8>
    3690:	99 36       	cpi	r25, 0x69	; 105
    3692:	69 f5       	brne	.+90     	; 0x36ee <vfprintf+0x232>
    3694:	f7 fe       	sbrs	r15, 7
    3696:	08 c0       	rjmp	.+16     	; 0x36a8 <vfprintf+0x1ec>
    3698:	f5 01       	movw	r30, r10
    369a:	20 81       	ld	r18, Z
    369c:	31 81       	ldd	r19, Z+1	; 0x01
    369e:	42 81       	ldd	r20, Z+2	; 0x02
    36a0:	53 81       	ldd	r21, Z+3	; 0x03
    36a2:	84 e0       	ldi	r24, 0x04	; 4
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	0a c0       	rjmp	.+20     	; 0x36bc <vfprintf+0x200>
    36a8:	f5 01       	movw	r30, r10
    36aa:	80 81       	ld	r24, Z
    36ac:	91 81       	ldd	r25, Z+1	; 0x01
    36ae:	9c 01       	movw	r18, r24
    36b0:	44 27       	eor	r20, r20
    36b2:	37 fd       	sbrc	r19, 7
    36b4:	40 95       	com	r20
    36b6:	54 2f       	mov	r21, r20
    36b8:	82 e0       	ldi	r24, 0x02	; 2
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	a8 0e       	add	r10, r24
    36be:	b9 1e       	adc	r11, r25
    36c0:	9f e6       	ldi	r25, 0x6F	; 111
    36c2:	f9 22       	and	r15, r25
    36c4:	57 ff       	sbrs	r21, 7
    36c6:	09 c0       	rjmp	.+18     	; 0x36da <vfprintf+0x21e>
    36c8:	50 95       	com	r21
    36ca:	40 95       	com	r20
    36cc:	30 95       	com	r19
    36ce:	21 95       	neg	r18
    36d0:	3f 4f       	sbci	r19, 0xFF	; 255
    36d2:	4f 4f       	sbci	r20, 0xFF	; 255
    36d4:	5f 4f       	sbci	r21, 0xFF	; 255
    36d6:	e0 e8       	ldi	r30, 0x80	; 128
    36d8:	fe 2a       	or	r15, r30
    36da:	ca 01       	movw	r24, r20
    36dc:	b9 01       	movw	r22, r18
    36de:	a1 01       	movw	r20, r2
    36e0:	2a e0       	ldi	r18, 0x0A	; 10
    36e2:	30 e0       	ldi	r19, 0x00	; 0
    36e4:	0e 94 8d 1c 	call	0x391a	; 0x391a <__ultoa_invert>
    36e8:	d8 2e       	mov	r13, r24
    36ea:	d2 18       	sub	r13, r2
    36ec:	40 c0       	rjmp	.+128    	; 0x376e <vfprintf+0x2b2>
    36ee:	95 37       	cpi	r25, 0x75	; 117
    36f0:	29 f4       	brne	.+10     	; 0x36fc <vfprintf+0x240>
    36f2:	1f 2d       	mov	r17, r15
    36f4:	1f 7e       	andi	r17, 0xEF	; 239
    36f6:	2a e0       	ldi	r18, 0x0A	; 10
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	1d c0       	rjmp	.+58     	; 0x3736 <vfprintf+0x27a>
    36fc:	1f 2d       	mov	r17, r15
    36fe:	19 7f       	andi	r17, 0xF9	; 249
    3700:	9f 36       	cpi	r25, 0x6F	; 111
    3702:	61 f0       	breq	.+24     	; 0x371c <vfprintf+0x260>
    3704:	90 37       	cpi	r25, 0x70	; 112
    3706:	20 f4       	brcc	.+8      	; 0x3710 <vfprintf+0x254>
    3708:	98 35       	cpi	r25, 0x58	; 88
    370a:	09 f0       	breq	.+2      	; 0x370e <vfprintf+0x252>
    370c:	ac c0       	rjmp	.+344    	; 0x3866 <vfprintf+0x3aa>
    370e:	0f c0       	rjmp	.+30     	; 0x372e <vfprintf+0x272>
    3710:	90 37       	cpi	r25, 0x70	; 112
    3712:	39 f0       	breq	.+14     	; 0x3722 <vfprintf+0x266>
    3714:	98 37       	cpi	r25, 0x78	; 120
    3716:	09 f0       	breq	.+2      	; 0x371a <vfprintf+0x25e>
    3718:	a6 c0       	rjmp	.+332    	; 0x3866 <vfprintf+0x3aa>
    371a:	04 c0       	rjmp	.+8      	; 0x3724 <vfprintf+0x268>
    371c:	28 e0       	ldi	r18, 0x08	; 8
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	0a c0       	rjmp	.+20     	; 0x3736 <vfprintf+0x27a>
    3722:	10 61       	ori	r17, 0x10	; 16
    3724:	14 fd       	sbrc	r17, 4
    3726:	14 60       	ori	r17, 0x04	; 4
    3728:	20 e1       	ldi	r18, 0x10	; 16
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	04 c0       	rjmp	.+8      	; 0x3736 <vfprintf+0x27a>
    372e:	14 fd       	sbrc	r17, 4
    3730:	16 60       	ori	r17, 0x06	; 6
    3732:	20 e1       	ldi	r18, 0x10	; 16
    3734:	32 e0       	ldi	r19, 0x02	; 2
    3736:	17 ff       	sbrs	r17, 7
    3738:	08 c0       	rjmp	.+16     	; 0x374a <vfprintf+0x28e>
    373a:	f5 01       	movw	r30, r10
    373c:	60 81       	ld	r22, Z
    373e:	71 81       	ldd	r23, Z+1	; 0x01
    3740:	82 81       	ldd	r24, Z+2	; 0x02
    3742:	93 81       	ldd	r25, Z+3	; 0x03
    3744:	44 e0       	ldi	r20, 0x04	; 4
    3746:	50 e0       	ldi	r21, 0x00	; 0
    3748:	08 c0       	rjmp	.+16     	; 0x375a <vfprintf+0x29e>
    374a:	f5 01       	movw	r30, r10
    374c:	80 81       	ld	r24, Z
    374e:	91 81       	ldd	r25, Z+1	; 0x01
    3750:	bc 01       	movw	r22, r24
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	42 e0       	ldi	r20, 0x02	; 2
    3758:	50 e0       	ldi	r21, 0x00	; 0
    375a:	a4 0e       	add	r10, r20
    375c:	b5 1e       	adc	r11, r21
    375e:	a1 01       	movw	r20, r2
    3760:	0e 94 8d 1c 	call	0x391a	; 0x391a <__ultoa_invert>
    3764:	d8 2e       	mov	r13, r24
    3766:	d2 18       	sub	r13, r2
    3768:	8f e7       	ldi	r24, 0x7F	; 127
    376a:	f8 2e       	mov	r15, r24
    376c:	f1 22       	and	r15, r17
    376e:	f6 fe       	sbrs	r15, 6
    3770:	0b c0       	rjmp	.+22     	; 0x3788 <vfprintf+0x2cc>
    3772:	5e ef       	ldi	r21, 0xFE	; 254
    3774:	f5 22       	and	r15, r21
    3776:	d9 14       	cp	r13, r9
    3778:	38 f4       	brcc	.+14     	; 0x3788 <vfprintf+0x2cc>
    377a:	f4 fe       	sbrs	r15, 4
    377c:	07 c0       	rjmp	.+14     	; 0x378c <vfprintf+0x2d0>
    377e:	f2 fc       	sbrc	r15, 2
    3780:	05 c0       	rjmp	.+10     	; 0x378c <vfprintf+0x2d0>
    3782:	8f ee       	ldi	r24, 0xEF	; 239
    3784:	f8 22       	and	r15, r24
    3786:	02 c0       	rjmp	.+4      	; 0x378c <vfprintf+0x2d0>
    3788:	1d 2d       	mov	r17, r13
    378a:	01 c0       	rjmp	.+2      	; 0x378e <vfprintf+0x2d2>
    378c:	19 2d       	mov	r17, r9
    378e:	f4 fe       	sbrs	r15, 4
    3790:	0d c0       	rjmp	.+26     	; 0x37ac <vfprintf+0x2f0>
    3792:	fe 01       	movw	r30, r28
    3794:	ed 0d       	add	r30, r13
    3796:	f1 1d       	adc	r31, r1
    3798:	80 81       	ld	r24, Z
    379a:	80 33       	cpi	r24, 0x30	; 48
    379c:	19 f4       	brne	.+6      	; 0x37a4 <vfprintf+0x2e8>
    379e:	99 ee       	ldi	r25, 0xE9	; 233
    37a0:	f9 22       	and	r15, r25
    37a2:	08 c0       	rjmp	.+16     	; 0x37b4 <vfprintf+0x2f8>
    37a4:	1f 5f       	subi	r17, 0xFF	; 255
    37a6:	f2 fe       	sbrs	r15, 2
    37a8:	05 c0       	rjmp	.+10     	; 0x37b4 <vfprintf+0x2f8>
    37aa:	03 c0       	rjmp	.+6      	; 0x37b2 <vfprintf+0x2f6>
    37ac:	8f 2d       	mov	r24, r15
    37ae:	86 78       	andi	r24, 0x86	; 134
    37b0:	09 f0       	breq	.+2      	; 0x37b4 <vfprintf+0x2f8>
    37b2:	1f 5f       	subi	r17, 0xFF	; 255
    37b4:	0f 2d       	mov	r16, r15
    37b6:	f3 fc       	sbrc	r15, 3
    37b8:	14 c0       	rjmp	.+40     	; 0x37e2 <vfprintf+0x326>
    37ba:	f0 fe       	sbrs	r15, 0
    37bc:	0f c0       	rjmp	.+30     	; 0x37dc <vfprintf+0x320>
    37be:	1e 15       	cp	r17, r14
    37c0:	10 f0       	brcs	.+4      	; 0x37c6 <vfprintf+0x30a>
    37c2:	9d 2c       	mov	r9, r13
    37c4:	0b c0       	rjmp	.+22     	; 0x37dc <vfprintf+0x320>
    37c6:	9d 2c       	mov	r9, r13
    37c8:	9e 0c       	add	r9, r14
    37ca:	91 1a       	sub	r9, r17
    37cc:	1e 2d       	mov	r17, r14
    37ce:	06 c0       	rjmp	.+12     	; 0x37dc <vfprintf+0x320>
    37d0:	80 e2       	ldi	r24, 0x20	; 32
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	b3 01       	movw	r22, r6
    37d6:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <fputc>
    37da:	1f 5f       	subi	r17, 0xFF	; 255
    37dc:	1e 15       	cp	r17, r14
    37de:	c0 f3       	brcs	.-16     	; 0x37d0 <vfprintf+0x314>
    37e0:	04 c0       	rjmp	.+8      	; 0x37ea <vfprintf+0x32e>
    37e2:	1e 15       	cp	r17, r14
    37e4:	10 f4       	brcc	.+4      	; 0x37ea <vfprintf+0x32e>
    37e6:	e1 1a       	sub	r14, r17
    37e8:	01 c0       	rjmp	.+2      	; 0x37ec <vfprintf+0x330>
    37ea:	ee 24       	eor	r14, r14
    37ec:	04 ff       	sbrs	r16, 4
    37ee:	0f c0       	rjmp	.+30     	; 0x380e <vfprintf+0x352>
    37f0:	80 e3       	ldi	r24, 0x30	; 48
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	b3 01       	movw	r22, r6
    37f6:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <fputc>
    37fa:	02 ff       	sbrs	r16, 2
    37fc:	1d c0       	rjmp	.+58     	; 0x3838 <vfprintf+0x37c>
    37fe:	01 fd       	sbrc	r16, 1
    3800:	03 c0       	rjmp	.+6      	; 0x3808 <vfprintf+0x34c>
    3802:	88 e7       	ldi	r24, 0x78	; 120
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	0e c0       	rjmp	.+28     	; 0x3824 <vfprintf+0x368>
    3808:	88 e5       	ldi	r24, 0x58	; 88
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	0b c0       	rjmp	.+22     	; 0x3824 <vfprintf+0x368>
    380e:	80 2f       	mov	r24, r16
    3810:	86 78       	andi	r24, 0x86	; 134
    3812:	91 f0       	breq	.+36     	; 0x3838 <vfprintf+0x37c>
    3814:	01 ff       	sbrs	r16, 1
    3816:	02 c0       	rjmp	.+4      	; 0x381c <vfprintf+0x360>
    3818:	8b e2       	ldi	r24, 0x2B	; 43
    381a:	01 c0       	rjmp	.+2      	; 0x381e <vfprintf+0x362>
    381c:	80 e2       	ldi	r24, 0x20	; 32
    381e:	f7 fc       	sbrc	r15, 7
    3820:	8d e2       	ldi	r24, 0x2D	; 45
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	b3 01       	movw	r22, r6
    3826:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <fputc>
    382a:	06 c0       	rjmp	.+12     	; 0x3838 <vfprintf+0x37c>
    382c:	80 e3       	ldi	r24, 0x30	; 48
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	b3 01       	movw	r22, r6
    3832:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <fputc>
    3836:	9a 94       	dec	r9
    3838:	d9 14       	cp	r13, r9
    383a:	c0 f3       	brcs	.-16     	; 0x382c <vfprintf+0x370>
    383c:	da 94       	dec	r13
    383e:	f1 01       	movw	r30, r2
    3840:	ed 0d       	add	r30, r13
    3842:	f1 1d       	adc	r31, r1
    3844:	80 81       	ld	r24, Z
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	b3 01       	movw	r22, r6
    384a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <fputc>
    384e:	dd 20       	and	r13, r13
    3850:	a9 f7       	brne	.-22     	; 0x383c <vfprintf+0x380>
    3852:	06 c0       	rjmp	.+12     	; 0x3860 <vfprintf+0x3a4>
    3854:	80 e2       	ldi	r24, 0x20	; 32
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	b3 01       	movw	r22, r6
    385a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <fputc>
    385e:	ea 94       	dec	r14
    3860:	ee 20       	and	r14, r14
    3862:	c1 f7       	brne	.-16     	; 0x3854 <vfprintf+0x398>
    3864:	43 ce       	rjmp	.-890    	; 0x34ec <vfprintf+0x30>
    3866:	f3 01       	movw	r30, r6
    3868:	66 81       	ldd	r22, Z+6	; 0x06
    386a:	77 81       	ldd	r23, Z+7	; 0x07
    386c:	cb 01       	movw	r24, r22
    386e:	2b 96       	adiw	r28, 0x0b	; 11
    3870:	e2 e1       	ldi	r30, 0x12	; 18
    3872:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__epilogue_restores__>

00003876 <strnlen_P>:
    3876:	fc 01       	movw	r30, r24
    3878:	05 90       	lpm	r0, Z+
    387a:	61 50       	subi	r22, 0x01	; 1
    387c:	70 40       	sbci	r23, 0x00	; 0
    387e:	01 10       	cpse	r0, r1
    3880:	d8 f7       	brcc	.-10     	; 0x3878 <strnlen_P+0x2>
    3882:	80 95       	com	r24
    3884:	90 95       	com	r25
    3886:	8e 0f       	add	r24, r30
    3888:	9f 1f       	adc	r25, r31
    388a:	08 95       	ret

0000388c <strnlen>:
    388c:	fc 01       	movw	r30, r24
    388e:	61 50       	subi	r22, 0x01	; 1
    3890:	70 40       	sbci	r23, 0x00	; 0
    3892:	01 90       	ld	r0, Z+
    3894:	01 10       	cpse	r0, r1
    3896:	d8 f7       	brcc	.-10     	; 0x388e <strnlen+0x2>
    3898:	80 95       	com	r24
    389a:	90 95       	com	r25
    389c:	8e 0f       	add	r24, r30
    389e:	9f 1f       	adc	r25, r31
    38a0:	08 95       	ret

000038a2 <strrev>:
    38a2:	dc 01       	movw	r26, r24
    38a4:	fc 01       	movw	r30, r24
    38a6:	67 2f       	mov	r22, r23
    38a8:	71 91       	ld	r23, Z+
    38aa:	77 23       	and	r23, r23
    38ac:	e1 f7       	brne	.-8      	; 0x38a6 <strrev+0x4>
    38ae:	32 97       	sbiw	r30, 0x02	; 2
    38b0:	04 c0       	rjmp	.+8      	; 0x38ba <strrev+0x18>
    38b2:	7c 91       	ld	r23, X
    38b4:	6d 93       	st	X+, r22
    38b6:	70 83       	st	Z, r23
    38b8:	62 91       	ld	r22, -Z
    38ba:	ae 17       	cp	r26, r30
    38bc:	bf 07       	cpc	r27, r31
    38be:	c8 f3       	brcs	.-14     	; 0x38b2 <strrev+0x10>
    38c0:	08 95       	ret

000038c2 <fputc>:
    38c2:	0f 93       	push	r16
    38c4:	1f 93       	push	r17
    38c6:	cf 93       	push	r28
    38c8:	df 93       	push	r29
    38ca:	8c 01       	movw	r16, r24
    38cc:	eb 01       	movw	r28, r22
    38ce:	8b 81       	ldd	r24, Y+3	; 0x03
    38d0:	81 ff       	sbrs	r24, 1
    38d2:	1b c0       	rjmp	.+54     	; 0x390a <fputc+0x48>
    38d4:	82 ff       	sbrs	r24, 2
    38d6:	0d c0       	rjmp	.+26     	; 0x38f2 <fputc+0x30>
    38d8:	2e 81       	ldd	r18, Y+6	; 0x06
    38da:	3f 81       	ldd	r19, Y+7	; 0x07
    38dc:	8c 81       	ldd	r24, Y+4	; 0x04
    38de:	9d 81       	ldd	r25, Y+5	; 0x05
    38e0:	28 17       	cp	r18, r24
    38e2:	39 07       	cpc	r19, r25
    38e4:	64 f4       	brge	.+24     	; 0x38fe <fputc+0x3c>
    38e6:	e8 81       	ld	r30, Y
    38e8:	f9 81       	ldd	r31, Y+1	; 0x01
    38ea:	01 93       	st	Z+, r16
    38ec:	f9 83       	std	Y+1, r31	; 0x01
    38ee:	e8 83       	st	Y, r30
    38f0:	06 c0       	rjmp	.+12     	; 0x38fe <fputc+0x3c>
    38f2:	e8 85       	ldd	r30, Y+8	; 0x08
    38f4:	f9 85       	ldd	r31, Y+9	; 0x09
    38f6:	80 2f       	mov	r24, r16
    38f8:	09 95       	icall
    38fa:	89 2b       	or	r24, r25
    38fc:	31 f4       	brne	.+12     	; 0x390a <fputc+0x48>
    38fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3900:	9f 81       	ldd	r25, Y+7	; 0x07
    3902:	01 96       	adiw	r24, 0x01	; 1
    3904:	9f 83       	std	Y+7, r25	; 0x07
    3906:	8e 83       	std	Y+6, r24	; 0x06
    3908:	02 c0       	rjmp	.+4      	; 0x390e <fputc+0x4c>
    390a:	0f ef       	ldi	r16, 0xFF	; 255
    390c:	1f ef       	ldi	r17, 0xFF	; 255
    390e:	c8 01       	movw	r24, r16
    3910:	df 91       	pop	r29
    3912:	cf 91       	pop	r28
    3914:	1f 91       	pop	r17
    3916:	0f 91       	pop	r16
    3918:	08 95       	ret

0000391a <__ultoa_invert>:
    391a:	fa 01       	movw	r30, r20
    391c:	aa 27       	eor	r26, r26
    391e:	28 30       	cpi	r18, 0x08	; 8
    3920:	51 f1       	breq	.+84     	; 0x3976 <__ultoa_invert+0x5c>
    3922:	20 31       	cpi	r18, 0x10	; 16
    3924:	81 f1       	breq	.+96     	; 0x3986 <__ultoa_invert+0x6c>
    3926:	e8 94       	clt
    3928:	6f 93       	push	r22
    392a:	6e 7f       	andi	r22, 0xFE	; 254
    392c:	6e 5f       	subi	r22, 0xFE	; 254
    392e:	7f 4f       	sbci	r23, 0xFF	; 255
    3930:	8f 4f       	sbci	r24, 0xFF	; 255
    3932:	9f 4f       	sbci	r25, 0xFF	; 255
    3934:	af 4f       	sbci	r26, 0xFF	; 255
    3936:	b1 e0       	ldi	r27, 0x01	; 1
    3938:	3e d0       	rcall	.+124    	; 0x39b6 <__ultoa_invert+0x9c>
    393a:	b4 e0       	ldi	r27, 0x04	; 4
    393c:	3c d0       	rcall	.+120    	; 0x39b6 <__ultoa_invert+0x9c>
    393e:	67 0f       	add	r22, r23
    3940:	78 1f       	adc	r23, r24
    3942:	89 1f       	adc	r24, r25
    3944:	9a 1f       	adc	r25, r26
    3946:	a1 1d       	adc	r26, r1
    3948:	68 0f       	add	r22, r24
    394a:	79 1f       	adc	r23, r25
    394c:	8a 1f       	adc	r24, r26
    394e:	91 1d       	adc	r25, r1
    3950:	a1 1d       	adc	r26, r1
    3952:	6a 0f       	add	r22, r26
    3954:	71 1d       	adc	r23, r1
    3956:	81 1d       	adc	r24, r1
    3958:	91 1d       	adc	r25, r1
    395a:	a1 1d       	adc	r26, r1
    395c:	20 d0       	rcall	.+64     	; 0x399e <__ultoa_invert+0x84>
    395e:	09 f4       	brne	.+2      	; 0x3962 <__ultoa_invert+0x48>
    3960:	68 94       	set
    3962:	3f 91       	pop	r19
    3964:	2a e0       	ldi	r18, 0x0A	; 10
    3966:	26 9f       	mul	r18, r22
    3968:	11 24       	eor	r1, r1
    396a:	30 19       	sub	r19, r0
    396c:	30 5d       	subi	r19, 0xD0	; 208
    396e:	31 93       	st	Z+, r19
    3970:	de f6       	brtc	.-74     	; 0x3928 <__ultoa_invert+0xe>
    3972:	cf 01       	movw	r24, r30
    3974:	08 95       	ret
    3976:	46 2f       	mov	r20, r22
    3978:	47 70       	andi	r20, 0x07	; 7
    397a:	40 5d       	subi	r20, 0xD0	; 208
    397c:	41 93       	st	Z+, r20
    397e:	b3 e0       	ldi	r27, 0x03	; 3
    3980:	0f d0       	rcall	.+30     	; 0x39a0 <__ultoa_invert+0x86>
    3982:	c9 f7       	brne	.-14     	; 0x3976 <__ultoa_invert+0x5c>
    3984:	f6 cf       	rjmp	.-20     	; 0x3972 <__ultoa_invert+0x58>
    3986:	46 2f       	mov	r20, r22
    3988:	4f 70       	andi	r20, 0x0F	; 15
    398a:	40 5d       	subi	r20, 0xD0	; 208
    398c:	4a 33       	cpi	r20, 0x3A	; 58
    398e:	18 f0       	brcs	.+6      	; 0x3996 <__ultoa_invert+0x7c>
    3990:	49 5d       	subi	r20, 0xD9	; 217
    3992:	31 fd       	sbrc	r19, 1
    3994:	40 52       	subi	r20, 0x20	; 32
    3996:	41 93       	st	Z+, r20
    3998:	02 d0       	rcall	.+4      	; 0x399e <__ultoa_invert+0x84>
    399a:	a9 f7       	brne	.-22     	; 0x3986 <__ultoa_invert+0x6c>
    399c:	ea cf       	rjmp	.-44     	; 0x3972 <__ultoa_invert+0x58>
    399e:	b4 e0       	ldi	r27, 0x04	; 4
    39a0:	a6 95       	lsr	r26
    39a2:	97 95       	ror	r25
    39a4:	87 95       	ror	r24
    39a6:	77 95       	ror	r23
    39a8:	67 95       	ror	r22
    39aa:	ba 95       	dec	r27
    39ac:	c9 f7       	brne	.-14     	; 0x39a0 <__ultoa_invert+0x86>
    39ae:	00 97       	sbiw	r24, 0x00	; 0
    39b0:	61 05       	cpc	r22, r1
    39b2:	71 05       	cpc	r23, r1
    39b4:	08 95       	ret
    39b6:	9b 01       	movw	r18, r22
    39b8:	ac 01       	movw	r20, r24
    39ba:	0a 2e       	mov	r0, r26
    39bc:	06 94       	lsr	r0
    39be:	57 95       	ror	r21
    39c0:	47 95       	ror	r20
    39c2:	37 95       	ror	r19
    39c4:	27 95       	ror	r18
    39c6:	ba 95       	dec	r27
    39c8:	c9 f7       	brne	.-14     	; 0x39bc <__ultoa_invert+0xa2>
    39ca:	62 0f       	add	r22, r18
    39cc:	73 1f       	adc	r23, r19
    39ce:	84 1f       	adc	r24, r20
    39d0:	95 1f       	adc	r25, r21
    39d2:	a0 1d       	adc	r26, r0
    39d4:	08 95       	ret

000039d6 <__udivmodhi4>:
    39d6:	aa 1b       	sub	r26, r26
    39d8:	bb 1b       	sub	r27, r27
    39da:	51 e1       	ldi	r21, 0x11	; 17
    39dc:	07 c0       	rjmp	.+14     	; 0x39ec <__udivmodhi4_ep>

000039de <__udivmodhi4_loop>:
    39de:	aa 1f       	adc	r26, r26
    39e0:	bb 1f       	adc	r27, r27
    39e2:	a6 17       	cp	r26, r22
    39e4:	b7 07       	cpc	r27, r23
    39e6:	10 f0       	brcs	.+4      	; 0x39ec <__udivmodhi4_ep>
    39e8:	a6 1b       	sub	r26, r22
    39ea:	b7 0b       	sbc	r27, r23

000039ec <__udivmodhi4_ep>:
    39ec:	88 1f       	adc	r24, r24
    39ee:	99 1f       	adc	r25, r25
    39f0:	5a 95       	dec	r21
    39f2:	a9 f7       	brne	.-22     	; 0x39de <__udivmodhi4_loop>
    39f4:	80 95       	com	r24
    39f6:	90 95       	com	r25
    39f8:	bc 01       	movw	r22, r24
    39fa:	cd 01       	movw	r24, r26
    39fc:	08 95       	ret

000039fe <_exit>:
    39fe:	f8 94       	cli

00003a00 <__stop_program>:
    3a00:	ff cf       	rjmp	.-2      	; 0x3a00 <__stop_program>
