
Proj_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000032e  00800060  00003f38  00003fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080038e  0080038e  000042fa  2**0
                  ALLOC
  3 .stab         0000366c  00000000  00000000  000042fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000176c  00000000  00000000  00007968  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000090d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009466  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b871  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000cbf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ddd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000df90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e286  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ebf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <main>
      8a:	0c 94 9a 1f 	jmp	0x3f34	; 0x3f34 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e6       	ldi	r26, 0x65	; 101
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e6       	ldi	r24, 0x65	; 101
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b4 1c 	jmp	0x3968	; 0x3968 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e6       	ldi	r22, 0x65	; 101
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d0 1c 	jmp	0x39a0	; 0x39a0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d4 1c 	jmp	0x39a8	; 0x39a8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bc 1c 	jmp	0x3978	; 0x3978 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d8 1c 	jmp	0x39b0	; 0x39b0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b4 1c 	jmp	0x3968	; 0x3968 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 d0 1c 	jmp	0x39a0	; 0x39a0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e3 59       	subi	r30, 0x93	; 147
     aca:	fd 4f       	sbci	r31, 0xFD	; 253
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <USART_voidINIT>:
#include"../../Library/STD.h"

#include"../../Library/BIT_MATH.h"
#include "USART_privet.h"
#include "../REG.h"
void USART_voidINIT(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/**/
	UCSRA=0b00100000;
     e36:	eb e2       	ldi	r30, 0x2B	; 43
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 e2       	ldi	r24, 0x20	; 32
     e3c:	80 83       	st	Z, r24
	 *bit4---->enable tx
	 *bit3---->enable rx
	 *bit2---->0--->8bit size
	 *bit0---->init 0
	 *bit1---->init 0   */
	UCSRB=0b00111000;
     e3e:	ea e2       	ldi	r30, 0x2A	; 42
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	88 e3       	ldi	r24, 0x38	; 56
     e44:	80 83       	st	Z, r24
	 * bit4------->0 disable parity
	 * bit3-------->1 bit stop
	 * bit2-------->
	 * bit1--------->8 bit size
	 * */
	UCSRC=0b10000110;
     e46:	e0 e4       	ldi	r30, 0x40	; 64
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	86 e8       	ldi	r24, 0x86	; 134
     e4c:	80 83       	st	Z, r24
	/*buad rate=51-------->9600*/
	UBRRL=51;
     e4e:	e9 e2       	ldi	r30, 0x29	; 41
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	83 e3       	ldi	r24, 0x33	; 51
     e54:	80 83       	st	Z, r24
	UBRRH=0;
     e56:	e0 e4       	ldi	r30, 0x40	; 64
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	10 82       	st	Z, r1
}
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <USART_voidTRANSMITR>:
void USART_voidTRANSMITR(u8 DATA){
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	0f 92       	push	r0
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	89 83       	std	Y+1, r24	; 0x01
	UDR=DATA;
     e6e:	ec e2       	ldi	r30, 0x2C	; 44
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	80 83       	st	Z, r24
	while(GET_BIT(UCSRA,5)==0){};
     e76:	eb e2       	ldi	r30, 0x2B	; 43
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	82 95       	swap	r24
     e7e:	86 95       	lsr	r24
     e80:	87 70       	andi	r24, 0x07	; 7
     e82:	88 2f       	mov	r24, r24
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	81 70       	andi	r24, 0x01	; 1
     e88:	90 70       	andi	r25, 0x00	; 0
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	a1 f3       	breq	.-24     	; 0xe76 <USART_voidTRANSMITR+0x14>

}
     e8e:	0f 90       	pop	r0
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <USART_u8RECIVER>:

u8   USART_u8RECIVER(void){
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	//u8 DATA=UDR;
	while(GET_BIT(UCSRA,7)==0){};
     e9e:	eb e2       	ldi	r30, 0x2B	; 43
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	88 23       	and	r24, r24
     ea6:	dc f7       	brge	.-10     	; 0xe9e <USART_u8RECIVER+0x8>
	return UDR;
     ea8:	ec e2       	ldi	r30, 0x2C	; 44
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
}
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	08 95       	ret

00000eb4 <USART_VoidSendString>:

void USART_VoidSendString(u8 *COPYu8StringPtr){
     eb4:	df 93       	push	r29
     eb6:	cf 93       	push	r28
     eb8:	00 d0       	rcall	.+0      	; 0xeba <USART_VoidSendString+0x6>
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	9b 83       	std	Y+3, r25	; 0x03
     ec2:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8Itterator=0;
     ec4:	19 82       	std	Y+1, r1	; 0x01
     ec6:	0e c0       	rjmp	.+28     	; 0xee4 <USART_VoidSendString+0x30>
	while(COPYu8StringPtr[LOC_u8Itterator]!='\0'){

		USART_voidTRANSMITR(COPYu8StringPtr[LOC_u8Itterator]);
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	9b 81       	ldd	r25, Y+3	; 0x03
     ed2:	fc 01       	movw	r30, r24
     ed4:	e2 0f       	add	r30, r18
     ed6:	f3 1f       	adc	r31, r19
     ed8:	80 81       	ld	r24, Z
     eda:	0e 94 31 07 	call	0xe62	; 0xe62 <USART_voidTRANSMITR>
		LOC_u8Itterator=LOC_u8Itterator+1;
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	8f 5f       	subi	r24, 0xFF	; 255
     ee2:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void USART_VoidSendString(u8 *COPYu8StringPtr){
	u8 LOC_u8Itterator=0;
	while(COPYu8StringPtr[LOC_u8Itterator]!='\0'){
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	9b 81       	ldd	r25, Y+3	; 0x03
     eee:	fc 01       	movw	r30, r24
     ef0:	e2 0f       	add	r30, r18
     ef2:	f3 1f       	adc	r31, r19
     ef4:	80 81       	ld	r24, Z
     ef6:	88 23       	and	r24, r24
     ef8:	39 f7       	brne	.-50     	; 0xec8 <USART_VoidSendString+0x14>

		USART_voidTRANSMITR(COPYu8StringPtr[LOC_u8Itterator]);
		LOC_u8Itterator=LOC_u8Itterator+1;
	}

}
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <USART_PtrRecieveString>:

u8 STRING[20];
u8 *USART_PtrRecieveString(void){
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <USART_PtrRecieveString+0x6>
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
	u8 i=0;
     f10:	1a 82       	std	Y+2, r1	; 0x02
     f12:	0b c0       	rjmp	.+22     	; 0xf2a <USART_PtrRecieveString+0x24>
	u8 x;
	while((x=USART_u8RECIVER())!=13){
		STRING[i++]=x;
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	fc 01       	movw	r30, r24
     f1c:	e0 57       	subi	r30, 0x70	; 112
     f1e:	fc 4f       	sbci	r31, 0xFC	; 252
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	80 83       	st	Z, r24
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	8f 5f       	subi	r24, 0xFF	; 255
     f28:	8a 83       	std	Y+2, r24	; 0x02

u8 STRING[20];
u8 *USART_PtrRecieveString(void){
	u8 i=0;
	u8 x;
	while((x=USART_u8RECIVER())!=13){
     f2a:	0e 94 4b 07 	call	0xe96	; 0xe96 <USART_u8RECIVER>
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	8d 30       	cpi	r24, 0x0D	; 13
     f34:	79 f7       	brne	.-34     	; 0xf14 <USART_PtrRecieveString+0xe>
		STRING[i++]=x;

	}
	STRING[i]='\0';
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	fc 01       	movw	r30, r24
     f3e:	e0 57       	subi	r30, 0x70	; 112
     f40:	fc 4f       	sbci	r31, 0xFC	; 252
     f42:	10 82       	st	Z, r1

	return STRING;
     f44:	80 e9       	ldi	r24, 0x90	; 144
     f46:	93 e0       	ldi	r25, 0x03	; 3
}
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <DIO_init>:

#include "DIO.h"


void DIO_init (u8 portNumber, u8 pinNumber, u8 pinDirection)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <DIO_init+0x6>
     f58:	00 d0       	rcall	.+0      	; 0xf5a <DIO_init+0x8>
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	6a 83       	std	Y+2, r22	; 0x02
     f64:	4b 83       	std	Y+3, r20	; 0x03
	switch (portNumber)
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	3d 83       	std	Y+5, r19	; 0x05
     f6e:	2c 83       	std	Y+4, r18	; 0x04
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	9d 81       	ldd	r25, Y+5	; 0x05
     f74:	82 34       	cpi	r24, 0x42	; 66
     f76:	91 05       	cpc	r25, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <DIO_init+0x2a>
     f7a:	48 c0       	rjmp	.+144    	; 0x100c <DIO_init+0xba>
     f7c:	2c 81       	ldd	r18, Y+4	; 0x04
     f7e:	3d 81       	ldd	r19, Y+5	; 0x05
     f80:	23 34       	cpi	r18, 0x43	; 67
     f82:	31 05       	cpc	r19, r1
     f84:	34 f4       	brge	.+12     	; 0xf92 <DIO_init+0x40>
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	9d 81       	ldd	r25, Y+5	; 0x05
     f8a:	81 34       	cpi	r24, 0x41	; 65
     f8c:	91 05       	cpc	r25, r1
     f8e:	71 f0       	breq	.+28     	; 0xfac <DIO_init+0x5a>
     f90:	cb c0       	rjmp	.+406    	; 0x1128 <DIO_init+0x1d6>
     f92:	2c 81       	ldd	r18, Y+4	; 0x04
     f94:	3d 81       	ldd	r19, Y+5	; 0x05
     f96:	23 34       	cpi	r18, 0x43	; 67
     f98:	31 05       	cpc	r19, r1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <DIO_init+0x4c>
     f9c:	67 c0       	rjmp	.+206    	; 0x106c <DIO_init+0x11a>
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	9d 81       	ldd	r25, Y+5	; 0x05
     fa2:	84 34       	cpi	r24, 0x44	; 68
     fa4:	91 05       	cpc	r25, r1
     fa6:	09 f4       	brne	.+2      	; 0xfaa <DIO_init+0x58>
     fa8:	91 c0       	rjmp	.+290    	; 0x10cc <DIO_init+0x17a>
     faa:	be c0       	rjmp	.+380    	; 0x1128 <DIO_init+0x1d6>
	{
		case PORT_A:
			if (pinDirection == OUT)
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	a1 f4       	brne	.+40     	; 0xfda <DIO_init+0x88>
			{
				SET_BIT(DDRA, pinNumber);
     fb2:	aa e3       	ldi	r26, 0x3A	; 58
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ea e3       	ldi	r30, 0x3A	; 58
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_init+0x7e>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_init+0x7a>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	a7 c0       	rjmp	.+334    	; 0x1128 <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	88 23       	and	r24, r24
     fde:	09 f0       	breq	.+2      	; 0xfe2 <DIO_init+0x90>
     fe0:	a3 c0       	rjmp	.+326    	; 0x1128 <DIO_init+0x1d6>
			{
				CLR_BIT(DDRA, pinNumber);
     fe2:	aa e3       	ldi	r26, 0x3A	; 58
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	ea e3       	ldi	r30, 0x3A	; 58
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_init+0xae>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_init+0xaa>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	8e c0       	rjmp	.+284    	; 0x1128 <DIO_init+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_B:
			if (pinDirection == OUT)
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	a1 f4       	brne	.+40     	; 0x103a <DIO_init+0xe8>
			{
				SET_BIT(DDRB, pinNumber);
    1012:	a7 e3       	ldi	r26, 0x37	; 55
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e7 e3       	ldi	r30, 0x37	; 55
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <DIO_init+0xde>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <DIO_init+0xda>
    1034:	84 2b       	or	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	77 c0       	rjmp	.+238    	; 0x1128 <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	88 23       	and	r24, r24
    103e:	09 f0       	breq	.+2      	; 0x1042 <DIO_init+0xf0>
    1040:	73 c0       	rjmp	.+230    	; 0x1128 <DIO_init+0x1d6>
			{
				CLR_BIT(DDRB, pinNumber);
    1042:	a7 e3       	ldi	r26, 0x37	; 55
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e7 e3       	ldi	r30, 0x37	; 55
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <DIO_init+0x10e>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <DIO_init+0x10a>
    1064:	80 95       	com	r24
    1066:	84 23       	and	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	5e c0       	rjmp	.+188    	; 0x1128 <DIO_init+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_C:
			if (pinDirection == OUT)
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	a1 f4       	brne	.+40     	; 0x109a <DIO_init+0x148>
			{
				SET_BIT(DDRC, pinNumber);
    1072:	a4 e3       	ldi	r26, 0x34	; 52
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e4 e3       	ldi	r30, 0x34	; 52
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_init+0x13e>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_init+0x13a>
    1094:	84 2b       	or	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	47 c0       	rjmp	.+142    	; 0x1128 <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	88 23       	and	r24, r24
    109e:	09 f0       	breq	.+2      	; 0x10a2 <DIO_init+0x150>
    10a0:	43 c0       	rjmp	.+134    	; 0x1128 <DIO_init+0x1d6>
			{
				CLR_BIT(DDRC, pinNumber);
    10a2:	a4 e3       	ldi	r26, 0x34	; 52
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e4 e3       	ldi	r30, 0x34	; 52
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_init+0x16e>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_init+0x16a>
    10c4:	80 95       	com	r24
    10c6:	84 23       	and	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	2e c0       	rjmp	.+92     	; 0x1128 <DIO_init+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_D:
			if (pinDirection == OUT)
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	a1 f4       	brne	.+40     	; 0x10fa <DIO_init+0x1a8>
			{
				SET_BIT(DDRD, pinNumber);
    10d2:	a1 e3       	ldi	r26, 0x31	; 49
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e1 e3       	ldi	r30, 0x31	; 49
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	48 2f       	mov	r20, r24
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 2e       	mov	r0, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_init+0x19e>
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	0a 94       	dec	r0
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_init+0x19a>
    10f4:	84 2b       	or	r24, r20
    10f6:	8c 93       	st	X, r24
    10f8:	17 c0       	rjmp	.+46     	; 0x1128 <DIO_init+0x1d6>
			}
			else if (pinDirection == IN)
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	88 23       	and	r24, r24
    10fe:	a1 f4       	brne	.+40     	; 0x1128 <DIO_init+0x1d6>
			{
				CLR_BIT(DDRD, pinNumber);
    1100:	a1 e3       	ldi	r26, 0x31	; 49
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e1 e3       	ldi	r30, 0x31	; 49
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <DIO_init+0x1cc>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <DIO_init+0x1c8>
    1122:	80 95       	com	r24
    1124:	84 23       	and	r24, r20
    1126:	8c 93       	st	X, r24
			{
				// ERR
			}
			break;
	}
}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <DIO_write>:

void DIO_write (u8 portNumber, u8 pinNumber, u8 pinValue)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <DIO_write+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <DIO_write+0x8>
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	6a 83       	std	Y+2, r22	; 0x02
    114a:	4b 83       	std	Y+3, r20	; 0x03
	switch (portNumber)
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	3d 83       	std	Y+5, r19	; 0x05
    1154:	2c 83       	std	Y+4, r18	; 0x04
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	9d 81       	ldd	r25, Y+5	; 0x05
    115a:	82 34       	cpi	r24, 0x42	; 66
    115c:	91 05       	cpc	r25, r1
    115e:	09 f4       	brne	.+2      	; 0x1162 <DIO_write+0x2a>
    1160:	48 c0       	rjmp	.+144    	; 0x11f2 <DIO_write+0xba>
    1162:	2c 81       	ldd	r18, Y+4	; 0x04
    1164:	3d 81       	ldd	r19, Y+5	; 0x05
    1166:	23 34       	cpi	r18, 0x43	; 67
    1168:	31 05       	cpc	r19, r1
    116a:	34 f4       	brge	.+12     	; 0x1178 <DIO_write+0x40>
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	81 34       	cpi	r24, 0x41	; 65
    1172:	91 05       	cpc	r25, r1
    1174:	71 f0       	breq	.+28     	; 0x1192 <DIO_write+0x5a>
    1176:	cb c0       	rjmp	.+406    	; 0x130e <DIO_write+0x1d6>
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	23 34       	cpi	r18, 0x43	; 67
    117e:	31 05       	cpc	r19, r1
    1180:	09 f4       	brne	.+2      	; 0x1184 <DIO_write+0x4c>
    1182:	67 c0       	rjmp	.+206    	; 0x1252 <DIO_write+0x11a>
    1184:	8c 81       	ldd	r24, Y+4	; 0x04
    1186:	9d 81       	ldd	r25, Y+5	; 0x05
    1188:	84 34       	cpi	r24, 0x44	; 68
    118a:	91 05       	cpc	r25, r1
    118c:	09 f4       	brne	.+2      	; 0x1190 <DIO_write+0x58>
    118e:	91 c0       	rjmp	.+290    	; 0x12b2 <DIO_write+0x17a>
    1190:	be c0       	rjmp	.+380    	; 0x130e <DIO_write+0x1d6>
	{
		case PORT_A:
			if (pinValue == HIGH)
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	a1 f4       	brne	.+40     	; 0x11c0 <DIO_write+0x88>
			{
				SET_BIT(PORTA, pinNumber);
    1198:	ab e3       	ldi	r26, 0x3B	; 59
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	eb e3       	ldi	r30, 0x3B	; 59
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_write+0x7e>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_write+0x7a>
    11ba:	84 2b       	or	r24, r20
    11bc:	8c 93       	st	X, r24
    11be:	a7 c0       	rjmp	.+334    	; 0x130e <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	88 23       	and	r24, r24
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <DIO_write+0x90>
    11c6:	a3 c0       	rjmp	.+326    	; 0x130e <DIO_write+0x1d6>
			{
				CLR_BIT(PORTA, pinNumber);
    11c8:	ab e3       	ldi	r26, 0x3B	; 59
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	eb e3       	ldi	r30, 0x3B	; 59
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_write+0xae>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <DIO_write+0xaa>
    11ea:	80 95       	com	r24
    11ec:	84 23       	and	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	8e c0       	rjmp	.+284    	; 0x130e <DIO_write+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_B:
			if (pinValue == HIGH)
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	a1 f4       	brne	.+40     	; 0x1220 <DIO_write+0xe8>
			{
				SET_BIT(PORTB, pinNumber);
    11f8:	a8 e3       	ldi	r26, 0x38	; 56
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e8 e3       	ldi	r30, 0x38	; 56
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DIO_write+0xde>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DIO_write+0xda>
    121a:	84 2b       	or	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	77 c0       	rjmp	.+238    	; 0x130e <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	88 23       	and	r24, r24
    1224:	09 f0       	breq	.+2      	; 0x1228 <DIO_write+0xf0>
    1226:	73 c0       	rjmp	.+230    	; 0x130e <DIO_write+0x1d6>
			{
				CLR_BIT(PORTB, pinNumber);
    1228:	a8 e3       	ldi	r26, 0x38	; 56
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	e8 e3       	ldi	r30, 0x38	; 56
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <DIO_write+0x10e>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <DIO_write+0x10a>
    124a:	80 95       	com	r24
    124c:	84 23       	and	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	5e c0       	rjmp	.+188    	; 0x130e <DIO_write+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_C:
			if (pinValue == HIGH)
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	a1 f4       	brne	.+40     	; 0x1280 <DIO_write+0x148>
			{
				SET_BIT(PORTC, pinNumber);
    1258:	a5 e3       	ldi	r26, 0x35	; 53
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e5 e3       	ldi	r30, 0x35	; 53
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_write+0x13e>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO_write+0x13a>
    127a:	84 2b       	or	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	47 c0       	rjmp	.+142    	; 0x130e <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	88 23       	and	r24, r24
    1284:	09 f0       	breq	.+2      	; 0x1288 <DIO_write+0x150>
    1286:	43 c0       	rjmp	.+134    	; 0x130e <DIO_write+0x1d6>
			{
				CLR_BIT(PORTC, pinNumber);
    1288:	a5 e3       	ldi	r26, 0x35	; 53
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e5 e3       	ldi	r30, 0x35	; 53
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_write+0x16e>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_write+0x16a>
    12aa:	80 95       	com	r24
    12ac:	84 23       	and	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	2e c0       	rjmp	.+92     	; 0x130e <DIO_write+0x1d6>
			{
				// ERR
			}
			break;
		case PORT_D:
			if (pinValue == HIGH)
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	a1 f4       	brne	.+40     	; 0x12e0 <DIO_write+0x1a8>
			{
				SET_BIT(PORTD, pinNumber);
    12b8:	a2 e3       	ldi	r26, 0x32	; 50
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e2 e3       	ldi	r30, 0x32	; 50
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_write+0x19e>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <DIO_write+0x19a>
    12da:	84 2b       	or	r24, r20
    12dc:	8c 93       	st	X, r24
    12de:	17 c0       	rjmp	.+46     	; 0x130e <DIO_write+0x1d6>
			}
			else if (pinValue == LOW)
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	88 23       	and	r24, r24
    12e4:	a1 f4       	brne	.+40     	; 0x130e <DIO_write+0x1d6>
			{
				CLR_BIT(PORTD, pinNumber);
    12e6:	a2 e3       	ldi	r26, 0x32	; 50
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e2 e3       	ldi	r30, 0x32	; 50
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	48 2f       	mov	r20, r24
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_write+0x1cc>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_write+0x1c8>
    1308:	80 95       	com	r24
    130a:	84 23       	and	r24, r20
    130c:	8c 93       	st	X, r24
			{
				// ERR
			}
			break;
	}
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <DIO_toggle>:

void DIO_toggle (u8 portNumber, u8 pinNumber)
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	00 d0       	rcall	.+0      	; 0x1324 <DIO_toggle+0x6>
    1324:	00 d0       	rcall	.+0      	; 0x1326 <DIO_toggle+0x8>
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	6a 83       	std	Y+2, r22	; 0x02
	switch (portNumber)
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3c 83       	std	Y+4, r19	; 0x04
    1336:	2b 83       	std	Y+3, r18	; 0x03
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	82 34       	cpi	r24, 0x42	; 66
    133e:	91 05       	cpc	r25, r1
    1340:	51 f1       	breq	.+84     	; 0x1396 <DIO_toggle+0x78>
    1342:	2b 81       	ldd	r18, Y+3	; 0x03
    1344:	3c 81       	ldd	r19, Y+4	; 0x04
    1346:	23 34       	cpi	r18, 0x43	; 67
    1348:	31 05       	cpc	r19, r1
    134a:	34 f4       	brge	.+12     	; 0x1358 <DIO_toggle+0x3a>
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	81 34       	cpi	r24, 0x41	; 65
    1352:	91 05       	cpc	r25, r1
    1354:	61 f0       	breq	.+24     	; 0x136e <DIO_toggle+0x50>
    1356:	5a c0       	rjmp	.+180    	; 0x140c <DIO_toggle+0xee>
    1358:	2b 81       	ldd	r18, Y+3	; 0x03
    135a:	3c 81       	ldd	r19, Y+4	; 0x04
    135c:	23 34       	cpi	r18, 0x43	; 67
    135e:	31 05       	cpc	r19, r1
    1360:	71 f1       	breq	.+92     	; 0x13be <DIO_toggle+0xa0>
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	84 34       	cpi	r24, 0x44	; 68
    1368:	91 05       	cpc	r25, r1
    136a:	e9 f1       	breq	.+122    	; 0x13e6 <DIO_toggle+0xc8>
    136c:	4f c0       	rjmp	.+158    	; 0x140c <DIO_toggle+0xee>
	{
		case PORT_A:
			TOG_BIT(PORTA, pinNumber);
    136e:	ab e3       	ldi	r26, 0x3B	; 59
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	eb e3       	ldi	r30, 0x3B	; 59
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 2e       	mov	r0, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <DIO_toggle+0x6e>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <DIO_toggle+0x6a>
    1390:	84 27       	eor	r24, r20
    1392:	8c 93       	st	X, r24
    1394:	3b c0       	rjmp	.+118    	; 0x140c <DIO_toggle+0xee>
			break;
		case PORT_B:
			TOG_BIT(PORTB, pinNumber);
    1396:	a8 e3       	ldi	r26, 0x38	; 56
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e8 e3       	ldi	r30, 0x38	; 56
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	48 2f       	mov	r20, r24
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	02 2e       	mov	r0, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_toggle+0x96>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_toggle+0x92>
    13b8:	84 27       	eor	r24, r20
    13ba:	8c 93       	st	X, r24
    13bc:	27 c0       	rjmp	.+78     	; 0x140c <DIO_toggle+0xee>
			break;
		case PORT_C:
			TOG_BIT(PORTC, pinNumber);
    13be:	a5 e3       	ldi	r26, 0x35	; 53
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e5 e3       	ldi	r30, 0x35	; 53
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	48 2f       	mov	r20, r24
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 2e       	mov	r0, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_toggle+0xbe>
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	0a 94       	dec	r0
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_toggle+0xba>
    13e0:	84 27       	eor	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	13 c0       	rjmp	.+38     	; 0x140c <DIO_toggle+0xee>
			break;
		case PORT_D:
			TOG_BIT(PORTD, pinNumber);
    13e6:	a2 e3       	ldi	r26, 0x32	; 50
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e2 e3       	ldi	r30, 0x32	; 50
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_toggle+0xe6>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_toggle+0xe2>
    1408:	84 27       	eor	r24, r20
    140a:	8c 93       	st	X, r24
			break;
		default:
			// ERR
			break;
	}
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <DIO_read>:

u8   DIO_read (u8 portNumber, u8 pinNumber)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <DIO_read+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <DIO_read+0x8>
    1422:	0f 92       	push	r0
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	8a 83       	std	Y+2, r24	; 0x02
    142a:	6b 83       	std	Y+3, r22	; 0x03
	u8 pinValue = 0;
    142c:	19 82       	std	Y+1, r1	; 0x01
	switch (portNumber)
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	3d 83       	std	Y+5, r19	; 0x05
    1436:	2c 83       	std	Y+4, r18	; 0x04
    1438:	4c 81       	ldd	r20, Y+4	; 0x04
    143a:	5d 81       	ldd	r21, Y+5	; 0x05
    143c:	42 34       	cpi	r20, 0x42	; 66
    143e:	51 05       	cpc	r21, r1
    1440:	41 f1       	breq	.+80     	; 0x1492 <DIO_read+0x78>
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	9d 81       	ldd	r25, Y+5	; 0x05
    1446:	83 34       	cpi	r24, 0x43	; 67
    1448:	91 05       	cpc	r25, r1
    144a:	34 f4       	brge	.+12     	; 0x1458 <DIO_read+0x3e>
    144c:	2c 81       	ldd	r18, Y+4	; 0x04
    144e:	3d 81       	ldd	r19, Y+5	; 0x05
    1450:	21 34       	cpi	r18, 0x41	; 65
    1452:	31 05       	cpc	r19, r1
    1454:	61 f0       	breq	.+24     	; 0x146e <DIO_read+0x54>
    1456:	52 c0       	rjmp	.+164    	; 0x14fc <DIO_read+0xe2>
    1458:	4c 81       	ldd	r20, Y+4	; 0x04
    145a:	5d 81       	ldd	r21, Y+5	; 0x05
    145c:	43 34       	cpi	r20, 0x43	; 67
    145e:	51 05       	cpc	r21, r1
    1460:	51 f1       	breq	.+84     	; 0x14b6 <DIO_read+0x9c>
    1462:	8c 81       	ldd	r24, Y+4	; 0x04
    1464:	9d 81       	ldd	r25, Y+5	; 0x05
    1466:	84 34       	cpi	r24, 0x44	; 68
    1468:	91 05       	cpc	r25, r1
    146a:	b9 f1       	breq	.+110    	; 0x14da <DIO_read+0xc0>
    146c:	47 c0       	rjmp	.+142    	; 0x14fc <DIO_read+0xe2>
	{
		case PORT_A:
			pinValue = GET_BIT(PINA, pinNumber);
    146e:	e9 e3       	ldi	r30, 0x39	; 57
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	a9 01       	movw	r20, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_read+0x6c>
    1482:	55 95       	asr	r21
    1484:	47 95       	ror	r20
    1486:	8a 95       	dec	r24
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <DIO_read+0x68>
    148a:	ca 01       	movw	r24, r20
    148c:	81 70       	andi	r24, 0x01	; 1
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	35 c0       	rjmp	.+106    	; 0x14fc <DIO_read+0xe2>
			break;
		case PORT_B:
			pinValue = GET_BIT(PINB, pinNumber);
    1492:	e6 e3       	ldi	r30, 0x36	; 54
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	88 2f       	mov	r24, r24
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	a9 01       	movw	r20, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DIO_read+0x90>
    14a6:	55 95       	asr	r21
    14a8:	47 95       	ror	r20
    14aa:	8a 95       	dec	r24
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DIO_read+0x8c>
    14ae:	ca 01       	movw	r24, r20
    14b0:	81 70       	andi	r24, 0x01	; 1
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	23 c0       	rjmp	.+70     	; 0x14fc <DIO_read+0xe2>
			break;
		case PORT_C:
			pinValue = GET_BIT(PINC, pinNumber);
    14b6:	e3 e3       	ldi	r30, 0x33	; 51
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a9 01       	movw	r20, r18
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <DIO_read+0xb4>
    14ca:	55 95       	asr	r21
    14cc:	47 95       	ror	r20
    14ce:	8a 95       	dec	r24
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <DIO_read+0xb0>
    14d2:	ca 01       	movw	r24, r20
    14d4:	81 70       	andi	r24, 0x01	; 1
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	11 c0       	rjmp	.+34     	; 0x14fc <DIO_read+0xe2>
			break;
		case PORT_D:
			pinValue = GET_BIT(PIND, pinNumber);
    14da:	e0 e3       	ldi	r30, 0x30	; 48
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	a9 01       	movw	r20, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_read+0xd8>
    14ee:	55 95       	asr	r21
    14f0:	47 95       	ror	r20
    14f2:	8a 95       	dec	r24
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_read+0xd4>
    14f6:	ca 01       	movw	r24, r20
    14f8:	81 70       	andi	r24, 0x01	; 1
    14fa:	89 83       	std	Y+1, r24	; 0x01
			break;
		default:
			// ERR
			break;
	}
	return pinValue;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    1516:	ea e3       	ldi	r30, 0x3A	; 58
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	8f e7       	ldi	r24, 0x7F	; 127
    151c:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    151e:	e7 e3       	ldi	r30, 0x37	; 55
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8d ef       	ldi	r24, 0xFD	; 253
    1524:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    1526:	e4 e3       	ldi	r30, 0x34	; 52
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	83 e1       	ldi	r24, 0x13	; 19
    152c:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    152e:	e1 e3       	ldi	r30, 0x31	; 49
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    1534:	eb e3       	ldi	r30, 0x3B	; 59
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    153a:	e8 e3       	ldi	r30, 0x38	; 56
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	84 ef       	ldi	r24, 0xF4	; 244
    1540:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    1542:	e5 e3       	ldi	r30, 0x35	; 53
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    1548:	e2 e3       	ldi	r30, 0x32	; 50
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8c e3       	ldi	r24, 0x3C	; 60
    154e:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    1550:	81 e0       	ldi	r24, 0x01	; 1
}
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	2e 97       	sbiw	r28, 0x0e	; 14
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	8a 83       	std	Y+2, r24	; 0x02
    156e:	6b 83       	std	Y+3, r22	; 0x03
    1570:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	84 30       	cpi	r24, 0x04	; 4
    157a:	08 f0       	brcs	.+2      	; 0x157e <DIO_enu_SetPinDirection+0x26>
    157c:	0c c1       	rjmp	.+536    	; 0x1796 <DIO_enu_SetPinDirection+0x23e>
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	88 30       	cpi	r24, 0x08	; 8
    1582:	08 f0       	brcs	.+2      	; 0x1586 <DIO_enu_SetPinDirection+0x2e>
    1584:	08 c1       	rjmp	.+528    	; 0x1796 <DIO_enu_SetPinDirection+0x23e>
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	21 f0       	breq	.+8      	; 0x1594 <DIO_enu_SetPinDirection+0x3c>
    158c:	8c 81       	ldd	r24, Y+4	; 0x04
    158e:	88 23       	and	r24, r24
    1590:	09 f0       	breq	.+2      	; 0x1594 <DIO_enu_SetPinDirection+0x3c>
    1592:	01 c1       	rjmp	.+514    	; 0x1796 <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	3e 87       	std	Y+14, r19	; 0x0e
    159c:	2d 87       	std	Y+13, r18	; 0x0d
    159e:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	91 05       	cpc	r25, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <DIO_enu_SetPinDirection+0x52>
    15a8:	4f c0       	rjmp	.+158    	; 0x1648 <DIO_enu_SetPinDirection+0xf0>
    15aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    15ac:	3e 85       	ldd	r19, Y+14	; 0x0e
    15ae:	22 30       	cpi	r18, 0x02	; 2
    15b0:	31 05       	cpc	r19, r1
    15b2:	2c f4       	brge	.+10     	; 0x15be <DIO_enu_SetPinDirection+0x66>
    15b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	71 f0       	breq	.+28     	; 0x15d8 <DIO_enu_SetPinDirection+0x80>
    15bc:	ed c0       	rjmp	.+474    	; 0x1798 <DIO_enu_SetPinDirection+0x240>
    15be:	2d 85       	ldd	r18, Y+13	; 0x0d
    15c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    15c2:	22 30       	cpi	r18, 0x02	; 2
    15c4:	31 05       	cpc	r19, r1
    15c6:	09 f4       	brne	.+2      	; 0x15ca <DIO_enu_SetPinDirection+0x72>
    15c8:	77 c0       	rjmp	.+238    	; 0x16b8 <DIO_enu_SetPinDirection+0x160>
    15ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    15cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ce:	83 30       	cpi	r24, 0x03	; 3
    15d0:	91 05       	cpc	r25, r1
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <DIO_enu_SetPinDirection+0x7e>
    15d4:	a9 c0       	rjmp	.+338    	; 0x1728 <DIO_enu_SetPinDirection+0x1d0>
    15d6:	e0 c0       	rjmp	.+448    	; 0x1798 <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	3c 87       	std	Y+12, r19	; 0x0c
    15e0:	2b 87       	std	Y+11, r18	; 0x0b
    15e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    15e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	d1 f0       	breq	.+52     	; 0x161e <DIO_enu_SetPinDirection+0xc6>
    15ea:	2b 85       	ldd	r18, Y+11	; 0x0b
    15ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    15ee:	21 30       	cpi	r18, 0x01	; 1
    15f0:	31 05       	cpc	r19, r1
    15f2:	09 f0       	breq	.+2      	; 0x15f6 <DIO_enu_SetPinDirection+0x9e>
    15f4:	d1 c0       	rjmp	.+418    	; 0x1798 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    15f6:	aa e3       	ldi	r26, 0x3A	; 58
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	ea e3       	ldi	r30, 0x3A	; 58
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_enu_SetPinDirection+0xbc>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_enu_SetPinDirection+0xb8>
    1618:	84 2b       	or	r24, r20
    161a:	8c 93       	st	X, r24
    161c:	bd c0       	rjmp	.+378    	; 0x1798 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    161e:	aa e3       	ldi	r26, 0x3A	; 58
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	ea e3       	ldi	r30, 0x3A	; 58
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_enu_SetPinDirection+0xe4>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_enu_SetPinDirection+0xe0>
    1640:	80 95       	com	r24
    1642:	84 23       	and	r24, r20
    1644:	8c 93       	st	X, r24
    1646:	a8 c0       	rjmp	.+336    	; 0x1798 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	3a 87       	std	Y+10, r19	; 0x0a
    1650:	29 87       	std	Y+9, r18	; 0x09
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	9a 85       	ldd	r25, Y+10	; 0x0a
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	d1 f0       	breq	.+52     	; 0x168e <DIO_enu_SetPinDirection+0x136>
    165a:	29 85       	ldd	r18, Y+9	; 0x09
    165c:	3a 85       	ldd	r19, Y+10	; 0x0a
    165e:	21 30       	cpi	r18, 0x01	; 1
    1660:	31 05       	cpc	r19, r1
    1662:	09 f0       	breq	.+2      	; 0x1666 <DIO_enu_SetPinDirection+0x10e>
    1664:	99 c0       	rjmp	.+306    	; 0x1798 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    1666:	a7 e3       	ldi	r26, 0x37	; 55
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e7 e3       	ldi	r30, 0x37	; 55
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	48 2f       	mov	r20, r24
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 2e       	mov	r0, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <DIO_enu_SetPinDirection+0x12c>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <DIO_enu_SetPinDirection+0x128>
    1688:	84 2b       	or	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	85 c0       	rjmp	.+266    	; 0x1798 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    168e:	a7 e3       	ldi	r26, 0x37	; 55
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e7 e3       	ldi	r30, 0x37	; 55
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 2e       	mov	r0, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_enu_SetPinDirection+0x154>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_enu_SetPinDirection+0x150>
    16b0:	80 95       	com	r24
    16b2:	84 23       	and	r24, r20
    16b4:	8c 93       	st	X, r24
    16b6:	70 c0       	rjmp	.+224    	; 0x1798 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	38 87       	std	Y+8, r19	; 0x08
    16c0:	2f 83       	std	Y+7, r18	; 0x07
    16c2:	8f 81       	ldd	r24, Y+7	; 0x07
    16c4:	98 85       	ldd	r25, Y+8	; 0x08
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	d1 f0       	breq	.+52     	; 0x16fe <DIO_enu_SetPinDirection+0x1a6>
    16ca:	2f 81       	ldd	r18, Y+7	; 0x07
    16cc:	38 85       	ldd	r19, Y+8	; 0x08
    16ce:	21 30       	cpi	r18, 0x01	; 1
    16d0:	31 05       	cpc	r19, r1
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <DIO_enu_SetPinDirection+0x17e>
    16d4:	61 c0       	rjmp	.+194    	; 0x1798 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    16d6:	a4 e3       	ldi	r26, 0x34	; 52
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e4 e3       	ldi	r30, 0x34	; 52
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <DIO_enu_SetPinDirection+0x19c>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <DIO_enu_SetPinDirection+0x198>
    16f8:	84 2b       	or	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	4d c0       	rjmp	.+154    	; 0x1798 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    16fe:	a4 e3       	ldi	r26, 0x34	; 52
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e4 e3       	ldi	r30, 0x34	; 52
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <DIO_enu_SetPinDirection+0x1c4>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <DIO_enu_SetPinDirection+0x1c0>
    1720:	80 95       	com	r24
    1722:	84 23       	and	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	38 c0       	rjmp	.+112    	; 0x1798 <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	3e 83       	std	Y+6, r19	; 0x06
    1730:	2d 83       	std	Y+5, r18	; 0x05
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	c9 f0       	breq	.+50     	; 0x176c <DIO_enu_SetPinDirection+0x214>
    173a:	2d 81       	ldd	r18, Y+5	; 0x05
    173c:	3e 81       	ldd	r19, Y+6	; 0x06
    173e:	21 30       	cpi	r18, 0x01	; 1
    1740:	31 05       	cpc	r19, r1
    1742:	51 f5       	brne	.+84     	; 0x1798 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    1744:	a1 e3       	ldi	r26, 0x31	; 49
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e1 e3       	ldi	r30, 0x31	; 49
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <DIO_enu_SetPinDirection+0x20a>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <DIO_enu_SetPinDirection+0x206>
    1766:	84 2b       	or	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	16 c0       	rjmp	.+44     	; 0x1798 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    176c:	a1 e3       	ldi	r26, 0x31	; 49
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e1 e3       	ldi	r30, 0x31	; 49
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <DIO_enu_SetPinDirection+0x232>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <DIO_enu_SetPinDirection+0x22e>
    178e:	80 95       	com	r24
    1790:	84 23       	and	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    1796:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    1798:	89 81       	ldd	r24, Y+1	; 0x01
}
    179a:	2e 96       	adiw	r28, 0x0e	; 14
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	cd bf       	out	0x3d, r28	; 61
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	2e 97       	sbiw	r28, 0x0e	; 14
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	8a 83       	std	Y+2, r24	; 0x02
    17c2:	6b 83       	std	Y+3, r22	; 0x03
    17c4:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	84 30       	cpi	r24, 0x04	; 4
    17ce:	08 f0       	brcs	.+2      	; 0x17d2 <DIO_enu_SetPinValue+0x26>
    17d0:	0c c1       	rjmp	.+536    	; 0x19ea <DIO_enu_SetPinValue+0x23e>
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	88 30       	cpi	r24, 0x08	; 8
    17d6:	08 f0       	brcs	.+2      	; 0x17da <DIO_enu_SetPinValue+0x2e>
    17d8:	08 c1       	rjmp	.+528    	; 0x19ea <DIO_enu_SetPinValue+0x23e>
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	21 f0       	breq	.+8      	; 0x17e8 <DIO_enu_SetPinValue+0x3c>
    17e0:	8c 81       	ldd	r24, Y+4	; 0x04
    17e2:	88 23       	and	r24, r24
    17e4:	09 f0       	breq	.+2      	; 0x17e8 <DIO_enu_SetPinValue+0x3c>
    17e6:	01 c1       	rjmp	.+514    	; 0x19ea <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	3e 87       	std	Y+14, r19	; 0x0e
    17f0:	2d 87       	std	Y+13, r18	; 0x0d
    17f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	91 05       	cpc	r25, r1
    17fa:	09 f4       	brne	.+2      	; 0x17fe <DIO_enu_SetPinValue+0x52>
    17fc:	4f c0       	rjmp	.+158    	; 0x189c <DIO_enu_SetPinValue+0xf0>
    17fe:	2d 85       	ldd	r18, Y+13	; 0x0d
    1800:	3e 85       	ldd	r19, Y+14	; 0x0e
    1802:	22 30       	cpi	r18, 0x02	; 2
    1804:	31 05       	cpc	r19, r1
    1806:	2c f4       	brge	.+10     	; 0x1812 <DIO_enu_SetPinValue+0x66>
    1808:	8d 85       	ldd	r24, Y+13	; 0x0d
    180a:	9e 85       	ldd	r25, Y+14	; 0x0e
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	71 f0       	breq	.+28     	; 0x182c <DIO_enu_SetPinValue+0x80>
    1810:	ed c0       	rjmp	.+474    	; 0x19ec <DIO_enu_SetPinValue+0x240>
    1812:	2d 85       	ldd	r18, Y+13	; 0x0d
    1814:	3e 85       	ldd	r19, Y+14	; 0x0e
    1816:	22 30       	cpi	r18, 0x02	; 2
    1818:	31 05       	cpc	r19, r1
    181a:	09 f4       	brne	.+2      	; 0x181e <DIO_enu_SetPinValue+0x72>
    181c:	77 c0       	rjmp	.+238    	; 0x190c <DIO_enu_SetPinValue+0x160>
    181e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1820:	9e 85       	ldd	r25, Y+14	; 0x0e
    1822:	83 30       	cpi	r24, 0x03	; 3
    1824:	91 05       	cpc	r25, r1
    1826:	09 f4       	brne	.+2      	; 0x182a <DIO_enu_SetPinValue+0x7e>
    1828:	a9 c0       	rjmp	.+338    	; 0x197c <DIO_enu_SetPinValue+0x1d0>
    182a:	e0 c0       	rjmp	.+448    	; 0x19ec <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    182c:	8c 81       	ldd	r24, Y+4	; 0x04
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	3c 87       	std	Y+12, r19	; 0x0c
    1834:	2b 87       	std	Y+11, r18	; 0x0b
    1836:	8b 85       	ldd	r24, Y+11	; 0x0b
    1838:	9c 85       	ldd	r25, Y+12	; 0x0c
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	d1 f0       	breq	.+52     	; 0x1872 <DIO_enu_SetPinValue+0xc6>
    183e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1840:	3c 85       	ldd	r19, Y+12	; 0x0c
    1842:	21 30       	cpi	r18, 0x01	; 1
    1844:	31 05       	cpc	r19, r1
    1846:	09 f0       	breq	.+2      	; 0x184a <DIO_enu_SetPinValue+0x9e>
    1848:	d1 c0       	rjmp	.+418    	; 0x19ec <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    184a:	ab e3       	ldi	r26, 0x3B	; 59
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	eb e3       	ldi	r30, 0x3B	; 59
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 2e       	mov	r0, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <DIO_enu_SetPinValue+0xbc>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	0a 94       	dec	r0
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <DIO_enu_SetPinValue+0xb8>
    186c:	84 2b       	or	r24, r20
    186e:	8c 93       	st	X, r24
    1870:	bd c0       	rjmp	.+378    	; 0x19ec <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    1872:	ab e3       	ldi	r26, 0x3B	; 59
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	eb e3       	ldi	r30, 0x3B	; 59
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	48 2f       	mov	r20, r24
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 2e       	mov	r0, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <DIO_enu_SetPinValue+0xe4>
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	0a 94       	dec	r0
    1892:	e2 f7       	brpl	.-8      	; 0x188c <DIO_enu_SetPinValue+0xe0>
    1894:	80 95       	com	r24
    1896:	84 23       	and	r24, r20
    1898:	8c 93       	st	X, r24
    189a:	a8 c0       	rjmp	.+336    	; 0x19ec <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    189c:	8c 81       	ldd	r24, Y+4	; 0x04
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	3a 87       	std	Y+10, r19	; 0x0a
    18a4:	29 87       	std	Y+9, r18	; 0x09
    18a6:	89 85       	ldd	r24, Y+9	; 0x09
    18a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	d1 f0       	breq	.+52     	; 0x18e2 <DIO_enu_SetPinValue+0x136>
    18ae:	29 85       	ldd	r18, Y+9	; 0x09
    18b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    18b2:	21 30       	cpi	r18, 0x01	; 1
    18b4:	31 05       	cpc	r19, r1
    18b6:	09 f0       	breq	.+2      	; 0x18ba <DIO_enu_SetPinValue+0x10e>
    18b8:	99 c0       	rjmp	.+306    	; 0x19ec <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    18ba:	a8 e3       	ldi	r26, 0x38	; 56
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e8 e3       	ldi	r30, 0x38	; 56
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	48 2f       	mov	r20, r24
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	02 2e       	mov	r0, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <DIO_enu_SetPinValue+0x12c>
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	0a 94       	dec	r0
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <DIO_enu_SetPinValue+0x128>
    18dc:	84 2b       	or	r24, r20
    18de:	8c 93       	st	X, r24
    18e0:	85 c0       	rjmp	.+266    	; 0x19ec <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    18e2:	a8 e3       	ldi	r26, 0x38	; 56
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e8 e3       	ldi	r30, 0x38	; 56
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 2e       	mov	r0, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <DIO_enu_SetPinValue+0x154>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	0a 94       	dec	r0
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <DIO_enu_SetPinValue+0x150>
    1904:	80 95       	com	r24
    1906:	84 23       	and	r24, r20
    1908:	8c 93       	st	X, r24
    190a:	70 c0       	rjmp	.+224    	; 0x19ec <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	38 87       	std	Y+8, r19	; 0x08
    1914:	2f 83       	std	Y+7, r18	; 0x07
    1916:	8f 81       	ldd	r24, Y+7	; 0x07
    1918:	98 85       	ldd	r25, Y+8	; 0x08
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	d1 f0       	breq	.+52     	; 0x1952 <DIO_enu_SetPinValue+0x1a6>
    191e:	2f 81       	ldd	r18, Y+7	; 0x07
    1920:	38 85       	ldd	r19, Y+8	; 0x08
    1922:	21 30       	cpi	r18, 0x01	; 1
    1924:	31 05       	cpc	r19, r1
    1926:	09 f0       	breq	.+2      	; 0x192a <DIO_enu_SetPinValue+0x17e>
    1928:	61 c0       	rjmp	.+194    	; 0x19ec <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    192a:	a5 e3       	ldi	r26, 0x35	; 53
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e5 e3       	ldi	r30, 0x35	; 53
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <DIO_enu_SetPinValue+0x19c>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <DIO_enu_SetPinValue+0x198>
    194c:	84 2b       	or	r24, r20
    194e:	8c 93       	st	X, r24
    1950:	4d c0       	rjmp	.+154    	; 0x19ec <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    1952:	a5 e3       	ldi	r26, 0x35	; 53
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e5 e3       	ldi	r30, 0x35	; 53
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	48 2f       	mov	r20, r24
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	02 2e       	mov	r0, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <DIO_enu_SetPinValue+0x1c4>
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	0a 94       	dec	r0
    1972:	e2 f7       	brpl	.-8      	; 0x196c <DIO_enu_SetPinValue+0x1c0>
    1974:	80 95       	com	r24
    1976:	84 23       	and	r24, r20
    1978:	8c 93       	st	X, r24
    197a:	38 c0       	rjmp	.+112    	; 0x19ec <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	3e 83       	std	Y+6, r19	; 0x06
    1984:	2d 83       	std	Y+5, r18	; 0x05
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	c9 f0       	breq	.+50     	; 0x19c0 <DIO_enu_SetPinValue+0x214>
    198e:	2d 81       	ldd	r18, Y+5	; 0x05
    1990:	3e 81       	ldd	r19, Y+6	; 0x06
    1992:	21 30       	cpi	r18, 0x01	; 1
    1994:	31 05       	cpc	r19, r1
    1996:	51 f5       	brne	.+84     	; 0x19ec <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    1998:	a2 e3       	ldi	r26, 0x32	; 50
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e2 e3       	ldi	r30, 0x32	; 50
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	48 2f       	mov	r20, r24
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	02 2e       	mov	r0, r18
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <DIO_enu_SetPinValue+0x20a>
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	0a 94       	dec	r0
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <DIO_enu_SetPinValue+0x206>
    19ba:	84 2b       	or	r24, r20
    19bc:	8c 93       	st	X, r24
    19be:	16 c0       	rjmp	.+44     	; 0x19ec <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    19c0:	a2 e3       	ldi	r26, 0x32	; 50
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e2 e3       	ldi	r30, 0x32	; 50
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	48 2f       	mov	r20, r24
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	02 2e       	mov	r0, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <DIO_enu_SetPinValue+0x232>
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	0a 94       	dec	r0
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <DIO_enu_SetPinValue+0x22e>
    19e2:	80 95       	com	r24
    19e4:	84 23       	and	r24, r20
    19e6:	8c 93       	st	X, r24
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    19ea:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ee:	2e 96       	adiw	r28, 0x0e	; 14
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	27 97       	sbiw	r28, 0x07	; 7
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	8a 83       	std	Y+2, r24	; 0x02
    1a16:	6b 83       	std	Y+3, r22	; 0x03
    1a18:	5d 83       	std	Y+5, r21	; 0x05
    1a1a:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	84 30       	cpi	r24, 0x04	; 4
    1a24:	08 f0       	brcs	.+2      	; 0x1a28 <DIO_enu_GetPinValue+0x28>
    1a26:	7a c0       	rjmp	.+244    	; 0x1b1c <DIO_enu_GetPinValue+0x11c>
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	88 30       	cpi	r24, 0x08	; 8
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <DIO_enu_GetPinValue+0x30>
    1a2e:	76 c0       	rjmp	.+236    	; 0x1b1c <DIO_enu_GetPinValue+0x11c>
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	9d 81       	ldd	r25, Y+5	; 0x05
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <DIO_enu_GetPinValue+0x3a>
    1a38:	71 c0       	rjmp	.+226    	; 0x1b1c <DIO_enu_GetPinValue+0x11c>
    {
        switch (Copy_u8_PortId)
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	3f 83       	std	Y+7, r19	; 0x07
    1a42:	2e 83       	std	Y+6, r18	; 0x06
    1a44:	4e 81       	ldd	r20, Y+6	; 0x06
    1a46:	5f 81       	ldd	r21, Y+7	; 0x07
    1a48:	41 30       	cpi	r20, 0x01	; 1
    1a4a:	51 05       	cpc	r21, r1
    1a4c:	59 f1       	breq	.+86     	; 0x1aa4 <DIO_enu_GetPinValue+0xa4>
    1a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a50:	9f 81       	ldd	r25, Y+7	; 0x07
    1a52:	82 30       	cpi	r24, 0x02	; 2
    1a54:	91 05       	cpc	r25, r1
    1a56:	34 f4       	brge	.+12     	; 0x1a64 <DIO_enu_GetPinValue+0x64>
    1a58:	2e 81       	ldd	r18, Y+6	; 0x06
    1a5a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a5c:	21 15       	cp	r18, r1
    1a5e:	31 05       	cpc	r19, r1
    1a60:	69 f0       	breq	.+26     	; 0x1a7c <DIO_enu_GetPinValue+0x7c>
    1a62:	5d c0       	rjmp	.+186    	; 0x1b1e <DIO_enu_GetPinValue+0x11e>
    1a64:	4e 81       	ldd	r20, Y+6	; 0x06
    1a66:	5f 81       	ldd	r21, Y+7	; 0x07
    1a68:	42 30       	cpi	r20, 0x02	; 2
    1a6a:	51 05       	cpc	r21, r1
    1a6c:	79 f1       	breq	.+94     	; 0x1acc <DIO_enu_GetPinValue+0xcc>
    1a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a70:	9f 81       	ldd	r25, Y+7	; 0x07
    1a72:	83 30       	cpi	r24, 0x03	; 3
    1a74:	91 05       	cpc	r25, r1
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <DIO_enu_GetPinValue+0x7a>
    1a78:	3d c0       	rjmp	.+122    	; 0x1af4 <DIO_enu_GetPinValue+0xf4>
    1a7a:	51 c0       	rjmp	.+162    	; 0x1b1e <DIO_enu_GetPinValue+0x11e>
        {
            case DIO_U8_PORTA:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);break;
    1a7c:	e9 e3       	ldi	r30, 0x39	; 57
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	88 2f       	mov	r24, r24
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a9 01       	movw	r20, r18
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <DIO_enu_GetPinValue+0x94>
    1a90:	55 95       	asr	r21
    1a92:	47 95       	ror	r20
    1a94:	8a 95       	dec	r24
    1a96:	e2 f7       	brpl	.-8      	; 0x1a90 <DIO_enu_GetPinValue+0x90>
    1a98:	ca 01       	movw	r24, r20
    1a9a:	81 70       	andi	r24, 0x01	; 1
    1a9c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a9e:	fd 81       	ldd	r31, Y+5	; 0x05
    1aa0:	80 83       	st	Z, r24
    1aa2:	3d c0       	rjmp	.+122    	; 0x1b1e <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTB:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);break;
    1aa4:	e6 e3       	ldi	r30, 0x36	; 54
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	88 2f       	mov	r24, r24
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a9 01       	movw	r20, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <DIO_enu_GetPinValue+0xbc>
    1ab8:	55 95       	asr	r21
    1aba:	47 95       	ror	r20
    1abc:	8a 95       	dec	r24
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <DIO_enu_GetPinValue+0xb8>
    1ac0:	ca 01       	movw	r24, r20
    1ac2:	81 70       	andi	r24, 0x01	; 1
    1ac4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ac8:	80 83       	st	Z, r24
    1aca:	29 c0       	rjmp	.+82     	; 0x1b1e <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTC:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);break;
    1acc:	e3 e3       	ldi	r30, 0x33	; 51
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	88 2f       	mov	r24, r24
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	a9 01       	movw	r20, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <DIO_enu_GetPinValue+0xe4>
    1ae0:	55 95       	asr	r21
    1ae2:	47 95       	ror	r20
    1ae4:	8a 95       	dec	r24
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <DIO_enu_GetPinValue+0xe0>
    1ae8:	ca 01       	movw	r24, r20
    1aea:	81 70       	andi	r24, 0x01	; 1
    1aec:	ec 81       	ldd	r30, Y+4	; 0x04
    1aee:	fd 81       	ldd	r31, Y+5	; 0x05
    1af0:	80 83       	st	Z, r24
    1af2:	15 c0       	rjmp	.+42     	; 0x1b1e <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTD:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);break;
    1af4:	e0 e3       	ldi	r30, 0x30	; 48
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a9 01       	movw	r20, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <DIO_enu_GetPinValue+0x10c>
    1b08:	55 95       	asr	r21
    1b0a:	47 95       	ror	r20
    1b0c:	8a 95       	dec	r24
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <DIO_enu_GetPinValue+0x108>
    1b10:	ca 01       	movw	r24, r20
    1b12:	81 70       	andi	r24, 0x01	; 1
    1b14:	ec 81       	ldd	r30, Y+4	; 0x04
    1b16:	fd 81       	ldd	r31, Y+5	; 0x05
    1b18:	80 83       	st	Z, r24
    1b1a:	01 c0       	rjmp	.+2      	; 0x1b1e <DIO_enu_GetPinValue+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    1b1c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b20:	27 96       	adiw	r28, 0x07	; 7
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	2d 97       	sbiw	r28, 0x0d	; 13
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	8a 83       	std	Y+2, r24	; 0x02
    1b48:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	84 30       	cpi	r24, 0x04	; 4
    1b52:	08 f0       	brcs	.+2      	; 0x1b56 <DIO_enu_SetPortDirection+0x24>
    1b54:	84 c0       	rjmp	.+264    	; 0x1c5e <DIO_enu_SetPortDirection+0x12c>
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	21 f0       	breq	.+8      	; 0x1b64 <DIO_enu_SetPortDirection+0x32>
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	88 23       	and	r24, r24
    1b60:	09 f0       	breq	.+2      	; 0x1b64 <DIO_enu_SetPortDirection+0x32>
    1b62:	7d c0       	rjmp	.+250    	; 0x1c5e <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	3d 87       	std	Y+13, r19	; 0x0d
    1b6c:	2c 87       	std	Y+12, r18	; 0x0c
    1b6e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b70:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	91 05       	cpc	r25, r1
    1b76:	71 f1       	breq	.+92     	; 0x1bd4 <DIO_enu_SetPortDirection+0xa2>
    1b78:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b7a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b7c:	22 30       	cpi	r18, 0x02	; 2
    1b7e:	31 05       	cpc	r19, r1
    1b80:	2c f4       	brge	.+10     	; 0x1b8c <DIO_enu_SetPortDirection+0x5a>
    1b82:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b84:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	69 f0       	breq	.+26     	; 0x1ba4 <DIO_enu_SetPortDirection+0x72>
    1b8a:	6a c0       	rjmp	.+212    	; 0x1c60 <DIO_enu_SetPortDirection+0x12e>
    1b8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b8e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b90:	22 30       	cpi	r18, 0x02	; 2
    1b92:	31 05       	cpc	r19, r1
    1b94:	b1 f1       	breq	.+108    	; 0x1c02 <DIO_enu_SetPortDirection+0xd0>
    1b96:	8c 85       	ldd	r24, Y+12	; 0x0c
    1b98:	9d 85       	ldd	r25, Y+13	; 0x0d
    1b9a:	83 30       	cpi	r24, 0x03	; 3
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <DIO_enu_SetPortDirection+0x70>
    1ba0:	47 c0       	rjmp	.+142    	; 0x1c30 <DIO_enu_SetPortDirection+0xfe>
    1ba2:	5e c0       	rjmp	.+188    	; 0x1c60 <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	3b 87       	std	Y+11, r19	; 0x0b
    1bac:	2a 87       	std	Y+10, r18	; 0x0a
    1bae:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	59 f0       	breq	.+22     	; 0x1bcc <DIO_enu_SetPortDirection+0x9a>
    1bb6:	2a 85       	ldd	r18, Y+10	; 0x0a
    1bb8:	3b 85       	ldd	r19, Y+11	; 0x0b
    1bba:	21 30       	cpi	r18, 0x01	; 1
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <DIO_enu_SetPortDirection+0x90>
    1bc0:	4f c0       	rjmp	.+158    	; 0x1c60 <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    1bc2:	ea e3       	ldi	r30, 0x3A	; 58
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	8f ef       	ldi	r24, 0xFF	; 255
    1bc8:	80 83       	st	Z, r24
    1bca:	4a c0       	rjmp	.+148    	; 0x1c60 <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    1bcc:	ea e3       	ldi	r30, 0x3A	; 58
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	10 82       	st	Z, r1
    1bd2:	46 c0       	rjmp	.+140    	; 0x1c60 <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	39 87       	std	Y+9, r19	; 0x09
    1bdc:	28 87       	std	Y+8, r18	; 0x08
    1bde:	88 85       	ldd	r24, Y+8	; 0x08
    1be0:	99 85       	ldd	r25, Y+9	; 0x09
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	51 f0       	breq	.+20     	; 0x1bfa <DIO_enu_SetPortDirection+0xc8>
    1be6:	28 85       	ldd	r18, Y+8	; 0x08
    1be8:	39 85       	ldd	r19, Y+9	; 0x09
    1bea:	21 30       	cpi	r18, 0x01	; 1
    1bec:	31 05       	cpc	r19, r1
    1bee:	c1 f5       	brne	.+112    	; 0x1c60 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    1bf0:	e7 e3       	ldi	r30, 0x37	; 55
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	8f ef       	ldi	r24, 0xFF	; 255
    1bf6:	80 83       	st	Z, r24
    1bf8:	33 c0       	rjmp	.+102    	; 0x1c60 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    1bfa:	e7 e3       	ldi	r30, 0x37	; 55
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	10 82       	st	Z, r1
    1c00:	2f c0       	rjmp	.+94     	; 0x1c60 <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	3f 83       	std	Y+7, r19	; 0x07
    1c0a:	2e 83       	std	Y+6, r18	; 0x06
    1c0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	51 f0       	breq	.+20     	; 0x1c28 <DIO_enu_SetPortDirection+0xf6>
    1c14:	2e 81       	ldd	r18, Y+6	; 0x06
    1c16:	3f 81       	ldd	r19, Y+7	; 0x07
    1c18:	21 30       	cpi	r18, 0x01	; 1
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	09 f5       	brne	.+66     	; 0x1c60 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    1c1e:	e4 e3       	ldi	r30, 0x34	; 52
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	8f ef       	ldi	r24, 0xFF	; 255
    1c24:	80 83       	st	Z, r24
    1c26:	1c c0       	rjmp	.+56     	; 0x1c60 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    1c28:	e4 e3       	ldi	r30, 0x34	; 52
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	10 82       	st	Z, r1
    1c2e:	18 c0       	rjmp	.+48     	; 0x1c60 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    1c30:	8b 81       	ldd	r24, Y+3	; 0x03
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	3d 83       	std	Y+5, r19	; 0x05
    1c38:	2c 83       	std	Y+4, r18	; 0x04
    1c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	51 f0       	breq	.+20     	; 0x1c56 <DIO_enu_SetPortDirection+0x124>
    1c42:	2c 81       	ldd	r18, Y+4	; 0x04
    1c44:	3d 81       	ldd	r19, Y+5	; 0x05
    1c46:	21 30       	cpi	r18, 0x01	; 1
    1c48:	31 05       	cpc	r19, r1
    1c4a:	51 f4       	brne	.+20     	; 0x1c60 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    1c4c:	e1 e3       	ldi	r30, 0x31	; 49
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	8f ef       	ldi	r24, 0xFF	; 255
    1c52:	80 83       	st	Z, r24
    1c54:	05 c0       	rjmp	.+10     	; 0x1c60 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    1c56:	e1 e3       	ldi	r30, 0x31	; 49
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	10 82       	st	Z, r1
    1c5c:	01 c0       	rjmp	.+2      	; 0x1c60 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    1c5e:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c62:	2d 96       	adiw	r28, 0x0d	; 13
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <DIO_enu_SetPortValue+0x6>
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <DIO_enu_SetPortValue+0x8>
    1c7c:	0f 92       	push	r0
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	8a 83       	std	Y+2, r24	; 0x02
    1c84:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	84 30       	cpi	r24, 0x04	; 4
    1c8e:	98 f5       	brcc	.+102    	; 0x1cf6 <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	3d 83       	std	Y+5, r19	; 0x05
    1c98:	2c 83       	std	Y+4, r18	; 0x04
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	d1 f0       	breq	.+52     	; 0x1cd8 <DIO_enu_SetPortValue+0x64>
    1ca4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca8:	22 30       	cpi	r18, 0x02	; 2
    1caa:	31 05       	cpc	r19, r1
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <DIO_enu_SetPortValue+0x44>
    1cae:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	61 f0       	breq	.+24     	; 0x1cce <DIO_enu_SetPortValue+0x5a>
    1cb6:	20 c0       	rjmp	.+64     	; 0x1cf8 <DIO_enu_SetPortValue+0x84>
    1cb8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cba:	3d 81       	ldd	r19, Y+5	; 0x05
    1cbc:	22 30       	cpi	r18, 0x02	; 2
    1cbe:	31 05       	cpc	r19, r1
    1cc0:	81 f0       	breq	.+32     	; 0x1ce2 <DIO_enu_SetPortValue+0x6e>
    1cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc6:	83 30       	cpi	r24, 0x03	; 3
    1cc8:	91 05       	cpc	r25, r1
    1cca:	81 f0       	breq	.+32     	; 0x1cec <DIO_enu_SetPortValue+0x78>
    1ccc:	15 c0       	rjmp	.+42     	; 0x1cf8 <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    1cce:	eb e3       	ldi	r30, 0x3B	; 59
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	80 83       	st	Z, r24
    1cd6:	10 c0       	rjmp	.+32     	; 0x1cf8 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    1cd8:	e8 e3       	ldi	r30, 0x38	; 56
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	80 83       	st	Z, r24
    1ce0:	0b c0       	rjmp	.+22     	; 0x1cf8 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    1ce2:	e5 e3       	ldi	r30, 0x35	; 53
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	80 83       	st	Z, r24
    1cea:	06 c0       	rjmp	.+12     	; 0x1cf8 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    1cec:	e2 e3       	ldi	r30, 0x32	; 50
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	80 83       	st	Z, r24
    1cf4:	01 c0       	rjmp	.+2      	; 0x1cf8 <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    1cf6:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <DIO_enu_GetPortValue+0x6>
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <DIO_enu_GetPortValue+0x8>
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <DIO_enu_GetPortValue+0xa>
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	8a 83       	std	Y+2, r24	; 0x02
    1d1a:	7c 83       	std	Y+4, r23	; 0x04
    1d1c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	84 30       	cpi	r24, 0x04	; 4
    1d26:	08 f0       	brcs	.+2      	; 0x1d2a <DIO_enu_GetPortValue+0x20>
    1d28:	3f c0       	rjmp	.+126    	; 0x1da8 <DIO_enu_GetPortValue+0x9e>
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	d9 f1       	breq	.+118    	; 0x1da8 <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	3e 83       	std	Y+6, r19	; 0x06
    1d3a:	2d 83       	std	Y+5, r18	; 0x05
    1d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	91 05       	cpc	r25, r1
    1d44:	e1 f0       	breq	.+56     	; 0x1d7e <DIO_enu_GetPortValue+0x74>
    1d46:	2d 81       	ldd	r18, Y+5	; 0x05
    1d48:	3e 81       	ldd	r19, Y+6	; 0x06
    1d4a:	22 30       	cpi	r18, 0x02	; 2
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	2c f4       	brge	.+10     	; 0x1d5a <DIO_enu_GetPortValue+0x50>
    1d50:	8d 81       	ldd	r24, Y+5	; 0x05
    1d52:	9e 81       	ldd	r25, Y+6	; 0x06
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	61 f0       	breq	.+24     	; 0x1d70 <DIO_enu_GetPortValue+0x66>
    1d58:	28 c0       	rjmp	.+80     	; 0x1daa <DIO_enu_GetPortValue+0xa0>
    1d5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d5c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d5e:	22 30       	cpi	r18, 0x02	; 2
    1d60:	31 05       	cpc	r19, r1
    1d62:	a1 f0       	breq	.+40     	; 0x1d8c <DIO_enu_GetPortValue+0x82>
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	9e 81       	ldd	r25, Y+6	; 0x06
    1d68:	83 30       	cpi	r24, 0x03	; 3
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	b1 f0       	breq	.+44     	; 0x1d9a <DIO_enu_GetPortValue+0x90>
    1d6e:	1d c0       	rjmp	.+58     	; 0x1daa <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    1d70:	e9 e3       	ldi	r30, 0x39	; 57
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 81       	ld	r24, Z
    1d76:	eb 81       	ldd	r30, Y+3	; 0x03
    1d78:	fc 81       	ldd	r31, Y+4	; 0x04
    1d7a:	80 83       	st	Z, r24
    1d7c:	16 c0       	rjmp	.+44     	; 0x1daa <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    1d7e:	e6 e3       	ldi	r30, 0x36	; 54
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	eb 81       	ldd	r30, Y+3	; 0x03
    1d86:	fc 81       	ldd	r31, Y+4	; 0x04
    1d88:	80 83       	st	Z, r24
    1d8a:	0f c0       	rjmp	.+30     	; 0x1daa <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    1d8c:	e3 e3       	ldi	r30, 0x33	; 51
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	eb 81       	ldd	r30, Y+3	; 0x03
    1d94:	fc 81       	ldd	r31, Y+4	; 0x04
    1d96:	80 83       	st	Z, r24
    1d98:	08 c0       	rjmp	.+16     	; 0x1daa <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    1d9a:	e0 e3       	ldi	r30, 0x30	; 48
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	eb 81       	ldd	r30, Y+3	; 0x03
    1da2:	fc 81       	ldd	r31, Y+4	; 0x04
    1da4:	80 83       	st	Z, r24
    1da6:	01 c0       	rjmp	.+2      	; 0x1daa <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    1da8:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dac:	26 96       	adiw	r28, 0x06	; 6
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <DIO_enu_ToggPin>:
ES_t DIO_enu_ToggPin(u8 Copy_u8_PortId, u8 Copy_u8_PinId){
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <DIO_enu_ToggPin+0x6>
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <DIO_enu_ToggPin+0x8>
    1dc6:	0f 92       	push	r0
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	8a 83       	std	Y+2, r24	; 0x02
    1dce:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <=DIO_U8_PORTD)&&(Copy_u8_PinId <= DIO_U8_PIN7)){
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	84 30       	cpi	r24, 0x04	; 4
    1dd8:	08 f0       	brcs	.+2      	; 0x1ddc <DIO_enu_ToggPin+0x1e>
    1dda:	73 c0       	rjmp	.+230    	; 0x1ec2 <DIO_enu_ToggPin+0x104>
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	88 30       	cpi	r24, 0x08	; 8
    1de0:	08 f0       	brcs	.+2      	; 0x1de4 <DIO_enu_ToggPin+0x26>
    1de2:	6f c0       	rjmp	.+222    	; 0x1ec2 <DIO_enu_ToggPin+0x104>
        switch (Copy_u8_PortId)
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	28 2f       	mov	r18, r24
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	3d 83       	std	Y+5, r19	; 0x05
    1dec:	2c 83       	std	Y+4, r18	; 0x04
    1dee:	8c 81       	ldd	r24, Y+4	; 0x04
    1df0:	9d 81       	ldd	r25, Y+5	; 0x05
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	91 05       	cpc	r25, r1
    1df6:	49 f1       	breq	.+82     	; 0x1e4a <DIO_enu_ToggPin+0x8c>
    1df8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dfa:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfc:	22 30       	cpi	r18, 0x02	; 2
    1dfe:	31 05       	cpc	r19, r1
    1e00:	2c f4       	brge	.+10     	; 0x1e0c <DIO_enu_ToggPin+0x4e>
    1e02:	8c 81       	ldd	r24, Y+4	; 0x04
    1e04:	9d 81       	ldd	r25, Y+5	; 0x05
    1e06:	00 97       	sbiw	r24, 0x00	; 0
    1e08:	61 f0       	breq	.+24     	; 0x1e22 <DIO_enu_ToggPin+0x64>
    1e0a:	5c c0       	rjmp	.+184    	; 0x1ec4 <DIO_enu_ToggPin+0x106>
    1e0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e10:	22 30       	cpi	r18, 0x02	; 2
    1e12:	31 05       	cpc	r19, r1
    1e14:	71 f1       	breq	.+92     	; 0x1e72 <DIO_enu_ToggPin+0xb4>
    1e16:	8c 81       	ldd	r24, Y+4	; 0x04
    1e18:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1a:	83 30       	cpi	r24, 0x03	; 3
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	e9 f1       	breq	.+122    	; 0x1e9a <DIO_enu_ToggPin+0xdc>
    1e20:	51 c0       	rjmp	.+162    	; 0x1ec4 <DIO_enu_ToggPin+0x106>
	        {
	        case DIO_U8_PORTA:TOG_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    1e22:	ab e3       	ldi	r26, 0x3B	; 59
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	eb e3       	ldi	r30, 0x3B	; 59
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	48 2f       	mov	r20, r24
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	02 2e       	mov	r0, r18
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <DIO_enu_ToggPin+0x82>
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	0a 94       	dec	r0
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <DIO_enu_ToggPin+0x7e>
    1e44:	84 27       	eor	r24, r20
    1e46:	8c 93       	st	X, r24
    1e48:	3d c0       	rjmp	.+122    	; 0x1ec4 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTB:TOG_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    1e4a:	a8 e3       	ldi	r26, 0x38	; 56
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e8 e3       	ldi	r30, 0x38	; 56
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	48 2f       	mov	r20, r24
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	02 2e       	mov	r0, r18
    1e62:	02 c0       	rjmp	.+4      	; 0x1e68 <DIO_enu_ToggPin+0xaa>
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	0a 94       	dec	r0
    1e6a:	e2 f7       	brpl	.-8      	; 0x1e64 <DIO_enu_ToggPin+0xa6>
    1e6c:	84 27       	eor	r24, r20
    1e6e:	8c 93       	st	X, r24
    1e70:	29 c0       	rjmp	.+82     	; 0x1ec4 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTC:TOG_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    1e72:	a5 e3       	ldi	r26, 0x35	; 53
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e5 e3       	ldi	r30, 0x35	; 53
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	48 2f       	mov	r20, r24
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	28 2f       	mov	r18, r24
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	02 2e       	mov	r0, r18
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <DIO_enu_ToggPin+0xd2>
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	0a 94       	dec	r0
    1e92:	e2 f7       	brpl	.-8      	; 0x1e8c <DIO_enu_ToggPin+0xce>
    1e94:	84 27       	eor	r24, r20
    1e96:	8c 93       	st	X, r24
    1e98:	15 c0       	rjmp	.+42     	; 0x1ec4 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTD:TOG_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    1e9a:	a2 e3       	ldi	r26, 0x32	; 50
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e2 e3       	ldi	r30, 0x32	; 50
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	48 2f       	mov	r20, r24
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	02 2e       	mov	r0, r18
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <DIO_enu_ToggPin+0xfa>
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	0a 94       	dec	r0
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <DIO_enu_ToggPin+0xf6>
    1ebc:	84 27       	eor	r24, r20
    1ebe:	8c 93       	st	X, r24
    1ec0:	01 c0       	rjmp	.+2      	; 0x1ec4 <DIO_enu_ToggPin+0x106>
	        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    1ec2:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01


}
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <ADC_voidInit>:
#include"ADC_config.h"
#include"ADC_interface.h"
#include"ADC_privet.h"
#include "../REG.h"

void ADC_voidInit(void){
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
#if ADC_Enable_Status==ADC_ENABLE
    #if ADC_Vref==ADC_AREF_INTERNAL_Vref_TURNED_OFF
	    CLR_BIT(ADMUX,7); CLR_BIT(ADMUX,6);
    #elif ADC_Vref==ADC_AVCC
	    CLR_BIT(ADMUX,7); SET_BIT(ADMUX,6);
    1ede:	a7 e2       	ldi	r26, 0x27	; 39
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e7 e2       	ldi	r30, 0x27	; 39
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	8f 77       	andi	r24, 0x7F	; 127
    1eea:	8c 93       	st	X, r24
    1eec:	a7 e2       	ldi	r26, 0x27	; 39
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e7 e2       	ldi	r30, 0x27	; 39
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	80 64       	ori	r24, 0x40	; 64
    1ef8:	8c 93       	st	X, r24
    #endif

    #if ADC_Adjustment==ADC_LEFT_ADJUSTMENT
       SET_BIT(ADMUX,5);
    #elif ADC_Adjustment==ADC_RIGHT_ADJUSTMENT
       CLR_BIT(ADMUX,5);
    1efa:	a7 e2       	ldi	r26, 0x27	; 39
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e7 e2       	ldi	r30, 0x27	; 39
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	8f 7d       	andi	r24, 0xDF	; 223
    1f06:	8c 93       	st	X, r24
    #endif

    #if ADC_Channal>=ADC_CHANNAL_0&&ADC_Channal<=ADC_CHANNAL_7
      ADMUX|=ADC_Channal;
    1f08:	a7 e2       	ldi	r26, 0x27	; 39
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e7 e2       	ldi	r30, 0x27	; 39
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	8c 93       	st	X, r24


    #if ADC_Trigger==ADC_SINGLE_CONVERSION
      CLR_BIT(ADCSRA,5);
    #elif ADC_Trigger==ADC_FREE_RUNNING_MODE
      SET_BIT(ADCSRA,5);
    1f14:	a6 e2       	ldi	r26, 0x26	; 38
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e6 e2       	ldi	r30, 0x26	; 38
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	80 62       	ori	r24, 0x20	; 32
    1f20:	8c 93       	st	X, r24
      CLR_BIT(SFIOR,7); CLR_BIT(SFIOR,6); CLR_BIT(SFIOR,5);
    1f22:	a0 e5       	ldi	r26, 0x50	; 80
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e0 e5       	ldi	r30, 0x50	; 80
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	8f 77       	andi	r24, 0x7F	; 127
    1f2e:	8c 93       	st	X, r24
    1f30:	a0 e5       	ldi	r26, 0x50	; 80
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e0 e5       	ldi	r30, 0x50	; 80
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8f 7b       	andi	r24, 0xBF	; 191
    1f3c:	8c 93       	st	X, r24
    1f3e:	a0 e5       	ldi	r26, 0x50	; 80
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e0 e5       	ldi	r30, 0x50	; 80
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	8f 7d       	andi	r24, 0xDF	; 223
    1f4a:	8c 93       	st	X, r24


    #if ADC_Inturrupt_Mode==ADC_INTERRUPT_ENABLE
      SET_BIT(ADCSRA,3);
    #elif ADC_Inturrupt_Mode==ADC_INTERRUPT_DISABLE
      CLR_BIT(ADCSRA,3);
    1f4c:	a6 e2       	ldi	r26, 0x26	; 38
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e6 e2       	ldi	r30, 0x26	; 38
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	87 7f       	andi	r24, 0xF7	; 247
    1f58:	8c 93       	st	X, r24
    #endif

    #if ADC_Prescallur>=ADC_PRESCALLER_2 && ADC_Prescallur<=ADC_PRESCALLER_128
        ADCSRA |= ADC_Prescallur;
    1f5a:	a6 e2       	ldi	r26, 0x26	; 38
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e6 e2       	ldi	r30, 0x26	; 38
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	87 60       	ori	r24, 0x07	; 7
    1f66:	8c 93       	st	X, r24
    #else
          #warning"wrong prescaler"

    #endif

   SET_BIT(ADCSRA,7);
    1f68:	a6 e2       	ldi	r26, 0x26	; 38
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e6 e2       	ldi	r30, 0x26	; 38
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	80 68       	ori	r24, 0x80	; 128
    1f74:	8c 93       	st	X, r24
#endif
	}
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <ADC_u16GetResult>:
u16  ADC_u16GetResult(void){
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <ADC_u16GetResult+0x6>
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
	u16 LOC_Result=0;
    1f86:	1a 82       	std	Y+2, r1	; 0x02
    1f88:	19 82       	std	Y+1, r1	; 0x01
	//SINGL CONVERTION-->Start Conversion
	SET_BIT(ADCSRA,6);
    1f8a:	a6 e2       	ldi	r26, 0x26	; 38
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e6 e2       	ldi	r30, 0x26	; 38
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	80 64       	ori	r24, 0x40	; 64
    1f96:	8c 93       	st	X, r24
	//Read Flag
	while(GET_BIT(ADCSRA,4)==0);
    1f98:	e6 e2       	ldi	r30, 0x26	; 38
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	82 95       	swap	r24
    1fa0:	8f 70       	andi	r24, 0x0F	; 15
    1fa2:	88 2f       	mov	r24, r24
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	81 70       	andi	r24, 0x01	; 1
    1fa8:	90 70       	andi	r25, 0x00	; 0
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	a9 f3       	breq	.-22     	; 0x1f98 <ADC_u16GetResult+0x1c>
	//Read Counter
    #if ADC_Adjustment==ADC_LEFT_ADJUSTMENT
	    LOC_Result=ADCH;
    #elif ADC_Adjustment==ADC_RIGHT_ADJUSTMENT
	    LOC_Result=ADCL|(ADCH<<8);
    1fae:	e4 e2       	ldi	r30, 0x24	; 36
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	e5 e2       	ldi	r30, 0x25	; 37
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	88 2f       	mov	r24, r24
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	98 2f       	mov	r25, r24
    1fc4:	88 27       	eor	r24, r24
    1fc6:	82 2b       	or	r24, r18
    1fc8:	93 2b       	or	r25, r19
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    #endif
	//Clear Flag
	SET_BIT(ADCSRA,4);
    1fce:	a6 e2       	ldi	r26, 0x26	; 38
    1fd0:	b0 e0       	ldi	r27, 0x00	; 0
    1fd2:	e6 e2       	ldi	r30, 0x26	; 38
    1fd4:	f0 e0       	ldi	r31, 0x00	; 0
    1fd6:	80 81       	ld	r24, Z
    1fd8:	80 61       	ori	r24, 0x10	; 16
    1fda:	8c 93       	st	X, r24
	//Return Value
	return LOC_Result;
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02

}
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <ADC_u16GetChannalResult>:
u16  ADC_u16GetChannalResult(u8 Copy_u8Channal){
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <ADC_u16GetChannalResult+0x6>
    1ff0:	0f 92       	push	r0
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	8b 83       	std	Y+3, r24	; 0x03
	u16 LOC_Result=0;
    1ff8:	1a 82       	std	Y+2, r1	; 0x02
    1ffa:	19 82       	std	Y+1, r1	; 0x01
	//Copy_u8Channal &=0b00000111;
	//Clear Mux
	ADMUX &=0b11100000;
    1ffc:	a7 e2       	ldi	r26, 0x27	; 39
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e7 e2       	ldi	r30, 0x27	; 39
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	80 7e       	andi	r24, 0xE0	; 224
    2008:	8c 93       	st	X, r24
	//Select MUX
	ADMUX|=Copy_u8Channal;
    200a:	a7 e2       	ldi	r26, 0x27	; 39
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e7 e2       	ldi	r30, 0x27	; 39
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	90 81       	ld	r25, Z
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	89 2b       	or	r24, r25
    2018:	8c 93       	st	X, r24
	//SINGL CONVERTION-->Start Conversion
	SET_BIT(ADCSRA,6);
    201a:	a6 e2       	ldi	r26, 0x26	; 38
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e6 e2       	ldi	r30, 0x26	; 38
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	80 64       	ori	r24, 0x40	; 64
    2026:	8c 93       	st	X, r24
	//Read Flag
	while(GET_BIT(ADCSRA,4)==0);
    2028:	e6 e2       	ldi	r30, 0x26	; 38
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	82 95       	swap	r24
    2030:	8f 70       	andi	r24, 0x0F	; 15
    2032:	88 2f       	mov	r24, r24
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	81 70       	andi	r24, 0x01	; 1
    2038:	90 70       	andi	r25, 0x00	; 0
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	a9 f3       	breq	.-22     	; 0x2028 <ADC_u16GetChannalResult+0x3e>
	//Read Counter
	    #if ADC_Adjustment==ADC_LEFT_ADJUSTMENT
		    LOC_Result=ADCH;
	    #elif ADC_Adjustment==ADC_RIGHT_ADJUSTMENT
		    LOC_Result=ADCL|(ADCH<<8);
    203e:	e4 e2       	ldi	r30, 0x24	; 36
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	e5 e2       	ldi	r30, 0x25	; 37
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	98 2f       	mov	r25, r24
    2054:	88 27       	eor	r24, r24
    2056:	82 2b       	or	r24, r18
    2058:	93 2b       	or	r25, r19
    205a:	9a 83       	std	Y+2, r25	; 0x02
    205c:	89 83       	std	Y+1, r24	; 0x01
	    #endif
	//Clear Flag
	SET_BIT(ADCSRA,4);
    205e:	a6 e2       	ldi	r26, 0x26	; 38
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e6 e2       	ldi	r30, 0x26	; 38
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	80 61       	ori	r24, 0x10	; 16
    206a:	8c 93       	st	X, r24
	//Return Value
		return LOC_Result;
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <ADC_Enable>:
void ADC_Enable(void){
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(ADCSRA,7);
    2084:	a6 e2       	ldi	r26, 0x26	; 38
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e6 e2       	ldi	r30, 0x26	; 38
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	80 68       	ori	r24, 0x80	; 128
    2090:	8c 93       	st	X, r24
}
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <ADC_Disable>:
void ADC_Disable(void){
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT(ADCSRA,7);
    20a0:	a6 e2       	ldi	r26, 0x26	; 38
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e6 e2       	ldi	r30, 0x26	; 38
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	8f 77       	andi	r24, 0x7F	; 127
    20ac:	8c 93       	st	X, r24
}
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <LCD_8_bit_init>:
 */

#include "LCD.h"

void LCD_8_bit_init (void) 		/* LCD 8-bit Mode Initialize function */
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	6c 97       	sbiw	r28, 0x1c	; 28
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61

	LCD_CMD_PORT_DIR = 0xFF;		/* Make LCD command port direction as o/p */
    20c8:	e1 e3       	ldi	r30, 0x31	; 49
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	8f ef       	ldi	r24, 0xFF	; 255
    20ce:	80 83       	st	Z, r24
	LCD_DATA_PORT_DIR = 0xFF;		/* Make LCD data port direction as o/p */
    20d0:	e7 e3       	ldi	r30, 0x37	; 55
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	8f ef       	ldi	r24, 0xFF	; 255
    20d6:	80 83       	st	Z, r24
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a0 ea       	ldi	r26, 0xA0	; 160
    20de:	b1 e4       	ldi	r27, 0x41	; 65
    20e0:	89 8f       	std	Y+25, r24	; 0x19
    20e2:	9a 8f       	std	Y+26, r25	; 0x1a
    20e4:	ab 8f       	std	Y+27, r26	; 0x1b
    20e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e8:	69 8d       	ldd	r22, Y+25	; 0x19
    20ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	4a ef       	ldi	r20, 0xFA	; 250
    20f6:	54 e4       	ldi	r21, 0x44	; 68
    20f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	8d 8b       	std	Y+21, r24	; 0x15
    2102:	9e 8b       	std	Y+22, r25	; 0x16
    2104:	af 8b       	std	Y+23, r26	; 0x17
    2106:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2108:	6d 89       	ldd	r22, Y+21	; 0x15
    210a:	7e 89       	ldd	r23, Y+22	; 0x16
    210c:	8f 89       	ldd	r24, Y+23	; 0x17
    210e:	98 8d       	ldd	r25, Y+24	; 0x18
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e8       	ldi	r20, 0x80	; 128
    2116:	5f e3       	ldi	r21, 0x3F	; 63
    2118:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    211c:	88 23       	and	r24, r24
    211e:	2c f4       	brge	.+10     	; 0x212a <LCD_8_bit_init+0x76>
		__ticks = 1;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9c 8b       	std	Y+20, r25	; 0x14
    2126:	8b 8b       	std	Y+19, r24	; 0x13
    2128:	3f c0       	rjmp	.+126    	; 0x21a8 <LCD_8_bit_init+0xf4>
	else if (__tmp > 65535)
    212a:	6d 89       	ldd	r22, Y+21	; 0x15
    212c:	7e 89       	ldd	r23, Y+22	; 0x16
    212e:	8f 89       	ldd	r24, Y+23	; 0x17
    2130:	98 8d       	ldd	r25, Y+24	; 0x18
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	3f ef       	ldi	r19, 0xFF	; 255
    2136:	4f e7       	ldi	r20, 0x7F	; 127
    2138:	57 e4       	ldi	r21, 0x47	; 71
    213a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    213e:	18 16       	cp	r1, r24
    2140:	4c f5       	brge	.+82     	; 0x2194 <LCD_8_bit_init+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2142:	69 8d       	ldd	r22, Y+25	; 0x19
    2144:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2146:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2148:	9c 8d       	ldd	r25, Y+28	; 0x1c
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e2       	ldi	r20, 0x20	; 32
    2150:	51 e4       	ldi	r21, 0x41	; 65
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	bc 01       	movw	r22, r24
    215c:	cd 01       	movw	r24, r26
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	9c 8b       	std	Y+20, r25	; 0x14
    2168:	8b 8b       	std	Y+19, r24	; 0x13
    216a:	0f c0       	rjmp	.+30     	; 0x218a <LCD_8_bit_init+0xd6>
    216c:	88 ec       	ldi	r24, 0xC8	; 200
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	9a 8b       	std	Y+18, r25	; 0x12
    2172:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2174:	89 89       	ldd	r24, Y+17	; 0x11
    2176:	9a 89       	ldd	r25, Y+18	; 0x12
    2178:	01 97       	sbiw	r24, 0x01	; 1
    217a:	f1 f7       	brne	.-4      	; 0x2178 <LCD_8_bit_init+0xc4>
    217c:	9a 8b       	std	Y+18, r25	; 0x12
    217e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2180:	8b 89       	ldd	r24, Y+19	; 0x13
    2182:	9c 89       	ldd	r25, Y+20	; 0x14
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	9c 8b       	std	Y+20, r25	; 0x14
    2188:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218a:	8b 89       	ldd	r24, Y+19	; 0x13
    218c:	9c 89       	ldd	r25, Y+20	; 0x14
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	69 f7       	brne	.-38     	; 0x216c <LCD_8_bit_init+0xb8>
    2192:	14 c0       	rjmp	.+40     	; 0x21bc <LCD_8_bit_init+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2194:	6d 89       	ldd	r22, Y+21	; 0x15
    2196:	7e 89       	ldd	r23, Y+22	; 0x16
    2198:	8f 89       	ldd	r24, Y+23	; 0x17
    219a:	98 8d       	ldd	r25, Y+24	; 0x18
    219c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9c 8b       	std	Y+20, r25	; 0x14
    21a6:	8b 8b       	std	Y+19, r24	; 0x13
    21a8:	8b 89       	ldd	r24, Y+19	; 0x13
    21aa:	9c 89       	ldd	r25, Y+20	; 0x14
    21ac:	98 8b       	std	Y+16, r25	; 0x10
    21ae:	8f 87       	std	Y+15, r24	; 0x0f
    21b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b2:	98 89       	ldd	r25, Y+16	; 0x10
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_8_bit_init+0x100>
    21b8:	98 8b       	std	Y+16, r25	; 0x10
    21ba:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(20);					/* LCD Power ON delay always >15ms */

	LCD_8_bit_sendCMD(0x38);		/* Initialization of 16X2 LCD in 8bit mode */
    21bc:	88 e3       	ldi	r24, 0x38	; 56
    21be:	0e 94 68 11 	call	0x22d0	; 0x22d0 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0x0C);		/* Display ON Cursor OFF */
    21c2:	8c e0       	ldi	r24, 0x0C	; 12
    21c4:	0e 94 68 11 	call	0x22d0	; 0x22d0 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0x06);		/* Auto Increment cursor */
    21c8:	86 e0       	ldi	r24, 0x06	; 6
    21ca:	0e 94 68 11 	call	0x22d0	; 0x22d0 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0x01);		/* clear display */
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	0e 94 68 11 	call	0x22d0	; 0x22d0 <LCD_8_bit_sendCMD>
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	a0 e0       	ldi	r26, 0x00	; 0
    21da:	b0 e4       	ldi	r27, 0x40	; 64
    21dc:	8b 87       	std	Y+11, r24	; 0x0b
    21de:	9c 87       	std	Y+12, r25	; 0x0c
    21e0:	ad 87       	std	Y+13, r26	; 0x0d
    21e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4a ef       	ldi	r20, 0xFA	; 250
    21f2:	54 e4       	ldi	r21, 0x44	; 68
    21f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	8f 83       	std	Y+7, r24	; 0x07
    21fe:	98 87       	std	Y+8, r25	; 0x08
    2200:	a9 87       	std	Y+9, r26	; 0x09
    2202:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2204:	6f 81       	ldd	r22, Y+7	; 0x07
    2206:	78 85       	ldd	r23, Y+8	; 0x08
    2208:	89 85       	ldd	r24, Y+9	; 0x09
    220a:	9a 85       	ldd	r25, Y+10	; 0x0a
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e8       	ldi	r20, 0x80	; 128
    2212:	5f e3       	ldi	r21, 0x3F	; 63
    2214:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2218:	88 23       	and	r24, r24
    221a:	2c f4       	brge	.+10     	; 0x2226 <LCD_8_bit_init+0x172>
		__ticks = 1;
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	9e 83       	std	Y+6, r25	; 0x06
    2222:	8d 83       	std	Y+5, r24	; 0x05
    2224:	3f c0       	rjmp	.+126    	; 0x22a4 <LCD_8_bit_init+0x1f0>
	else if (__tmp > 65535)
    2226:	6f 81       	ldd	r22, Y+7	; 0x07
    2228:	78 85       	ldd	r23, Y+8	; 0x08
    222a:	89 85       	ldd	r24, Y+9	; 0x09
    222c:	9a 85       	ldd	r25, Y+10	; 0x0a
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	3f ef       	ldi	r19, 0xFF	; 255
    2232:	4f e7       	ldi	r20, 0x7F	; 127
    2234:	57 e4       	ldi	r21, 0x47	; 71
    2236:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    223a:	18 16       	cp	r1, r24
    223c:	4c f5       	brge	.+82     	; 0x2290 <LCD_8_bit_init+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2240:	7c 85       	ldd	r23, Y+12	; 0x0c
    2242:	8d 85       	ldd	r24, Y+13	; 0x0d
    2244:	9e 85       	ldd	r25, Y+14	; 0x0e
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e2       	ldi	r20, 0x20	; 32
    224c:	51 e4       	ldi	r21, 0x41	; 65
    224e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	9e 83       	std	Y+6, r25	; 0x06
    2264:	8d 83       	std	Y+5, r24	; 0x05
    2266:	0f c0       	rjmp	.+30     	; 0x2286 <LCD_8_bit_init+0x1d2>
    2268:	88 ec       	ldi	r24, 0xC8	; 200
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	9c 83       	std	Y+4, r25	; 0x04
    226e:	8b 83       	std	Y+3, r24	; 0x03
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <LCD_8_bit_init+0x1c0>
    2278:	9c 83       	std	Y+4, r25	; 0x04
    227a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
    227e:	9e 81       	ldd	r25, Y+6	; 0x06
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	9e 83       	std	Y+6, r25	; 0x06
    2284:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2286:	8d 81       	ldd	r24, Y+5	; 0x05
    2288:	9e 81       	ldd	r25, Y+6	; 0x06
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	69 f7       	brne	.-38     	; 0x2268 <LCD_8_bit_init+0x1b4>
    228e:	14 c0       	rjmp	.+40     	; 0x22b8 <LCD_8_bit_init+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2290:	6f 81       	ldd	r22, Y+7	; 0x07
    2292:	78 85       	ldd	r23, Y+8	; 0x08
    2294:	89 85       	ldd	r24, Y+9	; 0x09
    2296:	9a 85       	ldd	r25, Y+10	; 0x0a
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	9e 83       	std	Y+6, r25	; 0x06
    22a2:	8d 83       	std	Y+5, r24	; 0x05
    22a4:	8d 81       	ldd	r24, Y+5	; 0x05
    22a6:	9e 81       	ldd	r25, Y+6	; 0x06
    22a8:	9a 83       	std	Y+2, r25	; 0x02
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	9a 81       	ldd	r25, Y+2	; 0x02
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_8_bit_init+0x1fc>
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);					/* Clear display command delay> 1.63 ms */

	LCD_8_bit_sendCMD(0x80);		/* cursor at home position */
    22b8:	80 e8       	ldi	r24, 0x80	; 128
    22ba:	0e 94 68 11 	call	0x22d0	; 0x22d0 <LCD_8_bit_sendCMD>

}
    22be:	6c 96       	adiw	r28, 0x1c	; 28
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <LCD_8_bit_sendCMD>:

void LCD_8_bit_sendCMD (u8 cmnd)
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	6d 97       	sbiw	r28, 0x1d	; 29
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA_PORT = cmnd;
    22e6:	e8 e3       	ldi	r30, 0x38	; 56
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ec:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<RS);	/* RS=O command register */
    22ee:	a2 e3       	ldi	r26, 0x32	; 50
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	e2 e3       	ldi	r30, 0x32	; 50
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	8b 7f       	andi	r24, 0xFB	; 251
    22fa:	8c 93       	st	X, r24
	LCD_CMD_PORT &= ~(1<<RW);	/* RW=0 Write operation */
    22fc:	a2 e3       	ldi	r26, 0x32	; 50
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e2 e3       	ldi	r30, 0x32	; 50
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	87 7f       	andi	r24, 0xF7	; 247
    2308:	8c 93       	st	X, r24

	/* Enable pulse */
	LCD_CMD_PORT |=  (1<<EN);
    230a:	a2 e3       	ldi	r26, 0x32	; 50
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e2 e3       	ldi	r30, 0x32	; 50
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	80 61       	ori	r24, 0x10	; 16
    2316:	8c 93       	st	X, r24
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	a0 e8       	ldi	r26, 0x80	; 128
    231e:	bf e3       	ldi	r27, 0x3F	; 63
    2320:	89 8f       	std	Y+25, r24	; 0x19
    2322:	9a 8f       	std	Y+26, r25	; 0x1a
    2324:	ab 8f       	std	Y+27, r26	; 0x1b
    2326:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2328:	69 8d       	ldd	r22, Y+25	; 0x19
    232a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    232c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    232e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	4a ef       	ldi	r20, 0xFA	; 250
    2336:	54 e4       	ldi	r21, 0x44	; 68
    2338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	8d 8b       	std	Y+21, r24	; 0x15
    2342:	9e 8b       	std	Y+22, r25	; 0x16
    2344:	af 8b       	std	Y+23, r26	; 0x17
    2346:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2348:	6d 89       	ldd	r22, Y+21	; 0x15
    234a:	7e 89       	ldd	r23, Y+22	; 0x16
    234c:	8f 89       	ldd	r24, Y+23	; 0x17
    234e:	98 8d       	ldd	r25, Y+24	; 0x18
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	2c f4       	brge	.+10     	; 0x236a <LCD_8_bit_sendCMD+0x9a>
		__ticks = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9c 8b       	std	Y+20, r25	; 0x14
    2366:	8b 8b       	std	Y+19, r24	; 0x13
    2368:	3f c0       	rjmp	.+126    	; 0x23e8 <LCD_8_bit_sendCMD+0x118>
	else if (__tmp > 65535)
    236a:	6d 89       	ldd	r22, Y+21	; 0x15
    236c:	7e 89       	ldd	r23, Y+22	; 0x16
    236e:	8f 89       	ldd	r24, Y+23	; 0x17
    2370:	98 8d       	ldd	r25, Y+24	; 0x18
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	57 e4       	ldi	r21, 0x47	; 71
    237a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	4c f5       	brge	.+82     	; 0x23d4 <LCD_8_bit_sendCMD+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2382:	69 8d       	ldd	r22, Y+25	; 0x19
    2384:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2386:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2388:	9c 8d       	ldd	r25, Y+28	; 0x1c
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e2       	ldi	r20, 0x20	; 32
    2390:	51 e4       	ldi	r21, 0x41	; 65
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	8b 8b       	std	Y+19, r24	; 0x13
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <LCD_8_bit_sendCMD+0xfa>
    23ac:	88 ec       	ldi	r24, 0xC8	; 200
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9a 8b       	std	Y+18, r25	; 0x12
    23b2:	89 8b       	std	Y+17, r24	; 0x11
    23b4:	89 89       	ldd	r24, Y+17	; 0x11
    23b6:	9a 89       	ldd	r25, Y+18	; 0x12
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <LCD_8_bit_sendCMD+0xe8>
    23bc:	9a 8b       	std	Y+18, r25	; 0x12
    23be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c0:	8b 89       	ldd	r24, Y+19	; 0x13
    23c2:	9c 89       	ldd	r25, Y+20	; 0x14
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ca:	8b 89       	ldd	r24, Y+19	; 0x13
    23cc:	9c 89       	ldd	r25, Y+20	; 0x14
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	69 f7       	brne	.-38     	; 0x23ac <LCD_8_bit_sendCMD+0xdc>
    23d2:	14 c0       	rjmp	.+40     	; 0x23fc <LCD_8_bit_sendCMD+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d4:	6d 89       	ldd	r22, Y+21	; 0x15
    23d6:	7e 89       	ldd	r23, Y+22	; 0x16
    23d8:	8f 89       	ldd	r24, Y+23	; 0x17
    23da:	98 8d       	ldd	r25, Y+24	; 0x18
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9c 8b       	std	Y+20, r25	; 0x14
    23e6:	8b 8b       	std	Y+19, r24	; 0x13
    23e8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ea:	9c 89       	ldd	r25, Y+20	; 0x14
    23ec:	98 8b       	std	Y+16, r25	; 0x10
    23ee:	8f 87       	std	Y+15, r24	; 0x0f
    23f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f2:	98 89       	ldd	r25, Y+16	; 0x10
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <LCD_8_bit_sendCMD+0x124>
    23f8:	98 8b       	std	Y+16, r25	; 0x10
    23fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_CMD_PORT &=  ~(1<<EN);
    23fc:	a2 e3       	ldi	r26, 0x32	; 50
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	e2 e3       	ldi	r30, 0x32	; 50
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	8f 7e       	andi	r24, 0xEF	; 239
    2408:	8c 93       	st	X, r24
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	a0 ea       	ldi	r26, 0xA0	; 160
    2410:	b0 e4       	ldi	r27, 0x40	; 64
    2412:	8b 87       	std	Y+11, r24	; 0x0b
    2414:	9c 87       	std	Y+12, r25	; 0x0c
    2416:	ad 87       	std	Y+13, r26	; 0x0d
    2418:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241a:	6b 85       	ldd	r22, Y+11	; 0x0b
    241c:	7c 85       	ldd	r23, Y+12	; 0x0c
    241e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2420:	9e 85       	ldd	r25, Y+14	; 0x0e
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	4a ef       	ldi	r20, 0xFA	; 250
    2428:	54 e4       	ldi	r21, 0x44	; 68
    242a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	8f 83       	std	Y+7, r24	; 0x07
    2434:	98 87       	std	Y+8, r25	; 0x08
    2436:	a9 87       	std	Y+9, r26	; 0x09
    2438:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    243a:	6f 81       	ldd	r22, Y+7	; 0x07
    243c:	78 85       	ldd	r23, Y+8	; 0x08
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e8       	ldi	r20, 0x80	; 128
    2448:	5f e3       	ldi	r21, 0x3F	; 63
    244a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    244e:	88 23       	and	r24, r24
    2450:	2c f4       	brge	.+10     	; 0x245c <LCD_8_bit_sendCMD+0x18c>
		__ticks = 1;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	9e 83       	std	Y+6, r25	; 0x06
    2458:	8d 83       	std	Y+5, r24	; 0x05
    245a:	3f c0       	rjmp	.+126    	; 0x24da <LCD_8_bit_sendCMD+0x20a>
	else if (__tmp > 65535)
    245c:	6f 81       	ldd	r22, Y+7	; 0x07
    245e:	78 85       	ldd	r23, Y+8	; 0x08
    2460:	89 85       	ldd	r24, Y+9	; 0x09
    2462:	9a 85       	ldd	r25, Y+10	; 0x0a
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	3f ef       	ldi	r19, 0xFF	; 255
    2468:	4f e7       	ldi	r20, 0x7F	; 127
    246a:	57 e4       	ldi	r21, 0x47	; 71
    246c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2470:	18 16       	cp	r1, r24
    2472:	4c f5       	brge	.+82     	; 0x24c6 <LCD_8_bit_sendCMD+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2474:	6b 85       	ldd	r22, Y+11	; 0x0b
    2476:	7c 85       	ldd	r23, Y+12	; 0x0c
    2478:	8d 85       	ldd	r24, Y+13	; 0x0d
    247a:	9e 85       	ldd	r25, Y+14	; 0x0e
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e2       	ldi	r20, 0x20	; 32
    2482:	51 e4       	ldi	r21, 0x41	; 65
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	9e 83       	std	Y+6, r25	; 0x06
    249a:	8d 83       	std	Y+5, r24	; 0x05
    249c:	0f c0       	rjmp	.+30     	; 0x24bc <LCD_8_bit_sendCMD+0x1ec>
    249e:	88 ec       	ldi	r24, 0xC8	; 200
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	9c 83       	std	Y+4, r25	; 0x04
    24a4:	8b 83       	std	Y+3, r24	; 0x03
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <LCD_8_bit_sendCMD+0x1da>
    24ae:	9c 83       	std	Y+4, r25	; 0x04
    24b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	9e 81       	ldd	r25, Y+6	; 0x06
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	9e 83       	std	Y+6, r25	; 0x06
    24ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24bc:	8d 81       	ldd	r24, Y+5	; 0x05
    24be:	9e 81       	ldd	r25, Y+6	; 0x06
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	69 f7       	brne	.-38     	; 0x249e <LCD_8_bit_sendCMD+0x1ce>
    24c4:	14 c0       	rjmp	.+40     	; 0x24ee <LCD_8_bit_sendCMD+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c6:	6f 81       	ldd	r22, Y+7	; 0x07
    24c8:	78 85       	ldd	r23, Y+8	; 0x08
    24ca:	89 85       	ldd	r24, Y+9	; 0x09
    24cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9e 83       	std	Y+6, r25	; 0x06
    24d8:	8d 83       	std	Y+5, r24	; 0x05
    24da:	8d 81       	ldd	r24, Y+5	; 0x05
    24dc:	9e 81       	ldd	r25, Y+6	; 0x06
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	9a 81       	ldd	r25, Y+2	; 0x02
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <LCD_8_bit_sendCMD+0x216>
    24ea:	9a 83       	std	Y+2, r25	; 0x02
    24ec:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
}
    24ee:	6d 96       	adiw	r28, 0x1d	; 29
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <LCD_8_bit_sendChar>:

void LCD_8_bit_sendChar (u8 charData)
{
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	6d 97       	sbiw	r28, 0x1d	; 29
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	de bf       	out	0x3e, r29	; 62
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	cd bf       	out	0x3d, r28	; 61
    2514:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DATA_PORT = charData;
    2516:	e8 e3       	ldi	r30, 0x38	; 56
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    251c:	80 83       	st	Z, r24
	LCD_CMD_PORT |= (1<<RS);	/* RS=1 data register */
    251e:	a2 e3       	ldi	r26, 0x32	; 50
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e2 e3       	ldi	r30, 0x32	; 50
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	84 60       	ori	r24, 0x04	; 4
    252a:	8c 93       	st	X, r24
	LCD_CMD_PORT &= ~(1<<RW);	/* RW=0 Write operation */
    252c:	a2 e3       	ldi	r26, 0x32	; 50
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	e2 e3       	ldi	r30, 0x32	; 50
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	80 81       	ld	r24, Z
    2536:	87 7f       	andi	r24, 0xF7	; 247
    2538:	8c 93       	st	X, r24

	/* Enable pulse */
	LCD_CMD_PORT |=  (1<<EN);
    253a:	a2 e3       	ldi	r26, 0x32	; 50
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e2 e3       	ldi	r30, 0x32	; 50
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	80 61       	ori	r24, 0x10	; 16
    2546:	8c 93       	st	X, r24
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	a0 e8       	ldi	r26, 0x80	; 128
    254e:	bf e3       	ldi	r27, 0x3F	; 63
    2550:	89 8f       	std	Y+25, r24	; 0x19
    2552:	9a 8f       	std	Y+26, r25	; 0x1a
    2554:	ab 8f       	std	Y+27, r26	; 0x1b
    2556:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2558:	69 8d       	ldd	r22, Y+25	; 0x19
    255a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    255c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    255e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	4a ef       	ldi	r20, 0xFA	; 250
    2566:	54 e4       	ldi	r21, 0x44	; 68
    2568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	8d 8b       	std	Y+21, r24	; 0x15
    2572:	9e 8b       	std	Y+22, r25	; 0x16
    2574:	af 8b       	std	Y+23, r26	; 0x17
    2576:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2578:	6d 89       	ldd	r22, Y+21	; 0x15
    257a:	7e 89       	ldd	r23, Y+22	; 0x16
    257c:	8f 89       	ldd	r24, Y+23	; 0x17
    257e:	98 8d       	ldd	r25, Y+24	; 0x18
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e8       	ldi	r20, 0x80	; 128
    2586:	5f e3       	ldi	r21, 0x3F	; 63
    2588:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    258c:	88 23       	and	r24, r24
    258e:	2c f4       	brge	.+10     	; 0x259a <LCD_8_bit_sendChar+0x9a>
		__ticks = 1;
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	9c 8b       	std	Y+20, r25	; 0x14
    2596:	8b 8b       	std	Y+19, r24	; 0x13
    2598:	3f c0       	rjmp	.+126    	; 0x2618 <LCD_8_bit_sendChar+0x118>
	else if (__tmp > 65535)
    259a:	6d 89       	ldd	r22, Y+21	; 0x15
    259c:	7e 89       	ldd	r23, Y+22	; 0x16
    259e:	8f 89       	ldd	r24, Y+23	; 0x17
    25a0:	98 8d       	ldd	r25, Y+24	; 0x18
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	3f ef       	ldi	r19, 0xFF	; 255
    25a6:	4f e7       	ldi	r20, 0x7F	; 127
    25a8:	57 e4       	ldi	r21, 0x47	; 71
    25aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ae:	18 16       	cp	r1, r24
    25b0:	4c f5       	brge	.+82     	; 0x2604 <LCD_8_bit_sendChar+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b2:	69 8d       	ldd	r22, Y+25	; 0x19
    25b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e2       	ldi	r20, 0x20	; 32
    25c0:	51 e4       	ldi	r21, 0x41	; 65
    25c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	bc 01       	movw	r22, r24
    25cc:	cd 01       	movw	r24, r26
    25ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	9c 8b       	std	Y+20, r25	; 0x14
    25d8:	8b 8b       	std	Y+19, r24	; 0x13
    25da:	0f c0       	rjmp	.+30     	; 0x25fa <LCD_8_bit_sendChar+0xfa>
    25dc:	88 ec       	ldi	r24, 0xC8	; 200
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	9a 8b       	std	Y+18, r25	; 0x12
    25e2:	89 8b       	std	Y+17, r24	; 0x11
    25e4:	89 89       	ldd	r24, Y+17	; 0x11
    25e6:	9a 89       	ldd	r25, Y+18	; 0x12
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <LCD_8_bit_sendChar+0xe8>
    25ec:	9a 8b       	std	Y+18, r25	; 0x12
    25ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f0:	8b 89       	ldd	r24, Y+19	; 0x13
    25f2:	9c 89       	ldd	r25, Y+20	; 0x14
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	9c 8b       	std	Y+20, r25	; 0x14
    25f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fa:	8b 89       	ldd	r24, Y+19	; 0x13
    25fc:	9c 89       	ldd	r25, Y+20	; 0x14
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	69 f7       	brne	.-38     	; 0x25dc <LCD_8_bit_sendChar+0xdc>
    2602:	14 c0       	rjmp	.+40     	; 0x262c <LCD_8_bit_sendChar+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2604:	6d 89       	ldd	r22, Y+21	; 0x15
    2606:	7e 89       	ldd	r23, Y+22	; 0x16
    2608:	8f 89       	ldd	r24, Y+23	; 0x17
    260a:	98 8d       	ldd	r25, Y+24	; 0x18
    260c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	9c 8b       	std	Y+20, r25	; 0x14
    2616:	8b 8b       	std	Y+19, r24	; 0x13
    2618:	8b 89       	ldd	r24, Y+19	; 0x13
    261a:	9c 89       	ldd	r25, Y+20	; 0x14
    261c:	98 8b       	std	Y+16, r25	; 0x10
    261e:	8f 87       	std	Y+15, r24	; 0x0f
    2620:	8f 85       	ldd	r24, Y+15	; 0x0f
    2622:	98 89       	ldd	r25, Y+16	; 0x10
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <LCD_8_bit_sendChar+0x124>
    2628:	98 8b       	std	Y+16, r25	; 0x10
    262a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_CMD_PORT &=  ~(1<<EN);
    262c:	a2 e3       	ldi	r26, 0x32	; 50
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	e2 e3       	ldi	r30, 0x32	; 50
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	8f 7e       	andi	r24, 0xEF	; 239
    2638:	8c 93       	st	X, r24
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	a0 ea       	ldi	r26, 0xA0	; 160
    2640:	b0 e4       	ldi	r27, 0x40	; 64
    2642:	8b 87       	std	Y+11, r24	; 0x0b
    2644:	9c 87       	std	Y+12, r25	; 0x0c
    2646:	ad 87       	std	Y+13, r26	; 0x0d
    2648:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264a:	6b 85       	ldd	r22, Y+11	; 0x0b
    264c:	7c 85       	ldd	r23, Y+12	; 0x0c
    264e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2650:	9e 85       	ldd	r25, Y+14	; 0x0e
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	4a ef       	ldi	r20, 0xFA	; 250
    2658:	54 e4       	ldi	r21, 0x44	; 68
    265a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	8f 83       	std	Y+7, r24	; 0x07
    2664:	98 87       	std	Y+8, r25	; 0x08
    2666:	a9 87       	std	Y+9, r26	; 0x09
    2668:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    266a:	6f 81       	ldd	r22, Y+7	; 0x07
    266c:	78 85       	ldd	r23, Y+8	; 0x08
    266e:	89 85       	ldd	r24, Y+9	; 0x09
    2670:	9a 85       	ldd	r25, Y+10	; 0x0a
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e8       	ldi	r20, 0x80	; 128
    2678:	5f e3       	ldi	r21, 0x3F	; 63
    267a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    267e:	88 23       	and	r24, r24
    2680:	2c f4       	brge	.+10     	; 0x268c <LCD_8_bit_sendChar+0x18c>
		__ticks = 1;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
    268a:	3f c0       	rjmp	.+126    	; 0x270a <LCD_8_bit_sendChar+0x20a>
	else if (__tmp > 65535)
    268c:	6f 81       	ldd	r22, Y+7	; 0x07
    268e:	78 85       	ldd	r23, Y+8	; 0x08
    2690:	89 85       	ldd	r24, Y+9	; 0x09
    2692:	9a 85       	ldd	r25, Y+10	; 0x0a
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	3f ef       	ldi	r19, 0xFF	; 255
    2698:	4f e7       	ldi	r20, 0x7F	; 127
    269a:	57 e4       	ldi	r21, 0x47	; 71
    269c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a0:	18 16       	cp	r1, r24
    26a2:	4c f5       	brge	.+82     	; 0x26f6 <LCD_8_bit_sendChar+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e2       	ldi	r20, 0x20	; 32
    26b2:	51 e4       	ldi	r21, 0x41	; 65
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	9e 83       	std	Y+6, r25	; 0x06
    26ca:	8d 83       	std	Y+5, r24	; 0x05
    26cc:	0f c0       	rjmp	.+30     	; 0x26ec <LCD_8_bit_sendChar+0x1ec>
    26ce:	88 ec       	ldi	r24, 0xC8	; 200
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	9c 83       	std	Y+4, r25	; 0x04
    26d4:	8b 83       	std	Y+3, r24	; 0x03
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <LCD_8_bit_sendChar+0x1da>
    26de:	9c 83       	std	Y+4, r25	; 0x04
    26e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e2:	8d 81       	ldd	r24, Y+5	; 0x05
    26e4:	9e 81       	ldd	r25, Y+6	; 0x06
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	9e 83       	std	Y+6, r25	; 0x06
    26ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ec:	8d 81       	ldd	r24, Y+5	; 0x05
    26ee:	9e 81       	ldd	r25, Y+6	; 0x06
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	69 f7       	brne	.-38     	; 0x26ce <LCD_8_bit_sendChar+0x1ce>
    26f4:	14 c0       	rjmp	.+40     	; 0x271e <LCD_8_bit_sendChar+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f6:	6f 81       	ldd	r22, Y+7	; 0x07
    26f8:	78 85       	ldd	r23, Y+8	; 0x08
    26fa:	89 85       	ldd	r24, Y+9	; 0x09
    26fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	9e 83       	std	Y+6, r25	; 0x06
    2708:	8d 83       	std	Y+5, r24	; 0x05
    270a:	8d 81       	ldd	r24, Y+5	; 0x05
    270c:	9e 81       	ldd	r25, Y+6	; 0x06
    270e:	9a 83       	std	Y+2, r25	; 0x02
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	9a 81       	ldd	r25, Y+2	; 0x02
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <LCD_8_bit_sendChar+0x216>
    271a:	9a 83       	std	Y+2, r25	; 0x02
    271c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
}
    271e:	6d 96       	adiw	r28, 0x1d	; 29
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <LCD_8_bit_sendString>:

void LCD_8_bit_sendString (u8 *str)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	00 d0       	rcall	.+0      	; 0x2736 <LCD_8_bit_sendString+0x6>
    2736:	0f 92       	push	r0
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	9b 83       	std	Y+3, r25	; 0x03
    273e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2740:	19 82       	std	Y+1, r1	; 0x01
	for (i = 0; str[i] != 0; i++)
    2742:	19 82       	std	Y+1, r1	; 0x01
    2744:	0e c0       	rjmp	.+28     	; 0x2762 <LCD_8_bit_sendString+0x32>
	{
		LCD_8_bit_sendChar(str[i]);
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	28 2f       	mov	r18, r24
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	9b 81       	ldd	r25, Y+3	; 0x03
    2750:	fc 01       	movw	r30, r24
    2752:	e2 0f       	add	r30, r18
    2754:	f3 1f       	adc	r31, r19
    2756:	80 81       	ld	r24, Z
    2758:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_8_bit_sendChar>
}

void LCD_8_bit_sendString (u8 *str)
{
	u8 i = 0;
	for (i = 0; str[i] != 0; i++)
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	8f 5f       	subi	r24, 0xFF	; 255
    2760:	89 83       	std	Y+1, r24	; 0x01
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	9b 81       	ldd	r25, Y+3	; 0x03
    276c:	fc 01       	movw	r30, r24
    276e:	e2 0f       	add	r30, r18
    2770:	f3 1f       	adc	r31, r19
    2772:	80 81       	ld	r24, Z
    2774:	88 23       	and	r24, r24
    2776:	39 f7       	brne	.-50     	; 0x2746 <LCD_8_bit_sendString+0x16>
	{
		LCD_8_bit_sendChar(str[i]);
	}
}
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	cf 91       	pop	r28
    2780:	df 91       	pop	r29
    2782:	08 95       	ret

00002784 <LCD_8_bit_GoToPos>:

void LCD_8_bit_GoToPos (u8 row, u8 col)
{
    2784:	df 93       	push	r29
    2786:	cf 93       	push	r28
    2788:	00 d0       	rcall	.+0      	; 0x278a <LCD_8_bit_GoToPos+0x6>
    278a:	00 d0       	rcall	.+0      	; 0x278c <LCD_8_bit_GoToPos+0x8>
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	8b 83       	std	Y+3, r24	; 0x03
    2792:	6c 83       	std	Y+4, r22	; 0x04
	u8 Loc[2] = {0x80 , 0xc0};
    2794:	80 e8       	ldi	r24, 0x80	; 128
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	80 ec       	ldi	r24, 0xC0	; 192
    279a:	8a 83       	std	Y+2, r24	; 0x02
	LCD_8_bit_sendCMD(Loc[row]+col);
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	28 2f       	mov	r18, r24
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	ce 01       	movw	r24, r28
    27a4:	01 96       	adiw	r24, 0x01	; 1
    27a6:	fc 01       	movw	r30, r24
    27a8:	e2 0f       	add	r30, r18
    27aa:	f3 1f       	adc	r31, r19
    27ac:	90 81       	ld	r25, Z
    27ae:	8c 81       	ldd	r24, Y+4	; 0x04
    27b0:	89 0f       	add	r24, r25
    27b2:	0e 94 68 11 	call	0x22d0	; 0x22d0 <LCD_8_bit_sendCMD>
}
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <LCD_createCustomCharacter>:

void LCD_createCustomCharacter (u8 *pattern, u8 location)
{
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <LCD_createCustomCharacter+0x6>
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <LCD_createCustomCharacter+0x8>
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
    27d0:	9b 83       	std	Y+3, r25	; 0x03
    27d2:	8a 83       	std	Y+2, r24	; 0x02
    27d4:	6c 83       	std	Y+4, r22	; 0x04
	u8 i = 0;
    27d6:	19 82       	std	Y+1, r1	; 0x01

	LCD_8_bit_sendCMD(0x40 + (location * 8));	/* Send the Address of CGRAM */
    27d8:	8c 81       	ldd	r24, Y+4	; 0x04
    27da:	88 2f       	mov	r24, r24
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	08 96       	adiw	r24, 0x08	; 8
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	88 0f       	add	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	88 0f       	add	r24, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	0e 94 68 11 	call	0x22d0	; 0x22d0 <LCD_8_bit_sendCMD>

	for(i = 0; i < 8; i++)
    27f0:	19 82       	std	Y+1, r1	; 0x01
    27f2:	0e c0       	rjmp	.+28     	; 0x2810 <LCD_createCustomCharacter+0x4c>
	{
		LCD_8_bit_sendChar(pattern[i]);			/* Pass the Bytes of pattern on LCD */
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	28 2f       	mov	r18, r24
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	9b 81       	ldd	r25, Y+3	; 0x03
    27fe:	fc 01       	movw	r30, r24
    2800:	e2 0f       	add	r30, r18
    2802:	f3 1f       	adc	r31, r19
    2804:	80 81       	ld	r24, Z
    2806:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_8_bit_sendChar>
{
	u8 i = 0;

	LCD_8_bit_sendCMD(0x40 + (location * 8));	/* Send the Address of CGRAM */

	for(i = 0; i < 8; i++)
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	8f 5f       	subi	r24, 0xFF	; 255
    280e:	89 83       	std	Y+1, r24	; 0x01
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	88 30       	cpi	r24, 0x08	; 8
    2814:	78 f3       	brcs	.-34     	; 0x27f4 <LCD_createCustomCharacter+0x30>
	{
		LCD_8_bit_sendChar(pattern[i]);			/* Pass the Bytes of pattern on LCD */
	}
}
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <LCD_CLR>:

void LCD_CLR (void)
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
	LCD_8_bit_sendCMD(0X01);			/* clear display */
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <LCD_8_bit_sendCMD>
	LCD_8_bit_sendCMD(0X80);			/* cursor at home position */
    2832:	80 e8       	ldi	r24, 0x80	; 128
    2834:	0e 94 68 11 	call	0x22d0	; 0x22d0 <LCD_8_bit_sendCMD>
}
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][4] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	0f 92       	push	r0
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    2848:	19 82       	std	Y+1, r1	; 0x01
    284a:	33 c0       	rjmp	.+102    	; 0x28b2 <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	88 2f       	mov	r24, r24
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	fc 01       	movw	r30, r24
    2854:	eb 57       	subi	r30, 0x7B	; 123
    2856:	fc 4f       	sbci	r31, 0xFC	; 252
    2858:	90 81       	ld	r25, Z
    285a:	82 e0       	ldi	r24, 0x02	; 2
    285c:	69 2f       	mov	r22, r25
    285e:	41 e0       	ldi	r20, 0x01	; 1
    2860:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	88 2f       	mov	r24, r24
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	fc 01       	movw	r30, r24
    286c:	eb 57       	subi	r30, 0x7B	; 123
    286e:	fc 4f       	sbci	r31, 0xFC	; 252
    2870:	90 81       	ld	r25, Z
    2872:	82 e0       	ldi	r24, 0x02	; 2
    2874:	69 2f       	mov	r22, r25
    2876:	41 e0       	ldi	r20, 0x01	; 1
    2878:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	88 2f       	mov	r24, r24
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	fc 01       	movw	r30, r24
    2884:	e7 57       	subi	r30, 0x77	; 119
    2886:	fc 4f       	sbci	r31, 0xFC	; 252
    2888:	90 81       	ld	r25, Z
    288a:	82 e0       	ldi	r24, 0x02	; 2
    288c:	69 2f       	mov	r22, r25
    288e:	40 e0       	ldi	r20, 0x00	; 0
    2890:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	88 2f       	mov	r24, r24
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	fc 01       	movw	r30, r24
    289c:	e7 57       	subi	r30, 0x77	; 119
    289e:	fc 4f       	sbci	r31, 0xFC	; 252
    28a0:	90 81       	ld	r25, Z
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	69 2f       	mov	r22, r25
    28a6:	41 e0       	ldi	r20, 0x01	; 1
    28a8:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	8f 5f       	subi	r24, 0xFF	; 255
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	84 30       	cpi	r24, 0x04	; 4
    28b6:	50 f2       	brcs	.-108    	; 0x284c <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
}
    28ba:	0f 90       	pop	r0
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	08 95       	ret

000028c2 <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	65 97       	sbiw	r28, 0x15	; 21
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	9d 8b       	std	Y+21, r25	; 0x15
    28d8:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	8a 8b       	std	Y+18, r24	; 0x12
    28de:	1b 8a       	std	Y+19, r1	; 0x13
    28e0:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    28e2:	8c 89       	ldd	r24, Y+20	; 0x14
    28e4:	9d 89       	ldd	r25, Y+21	; 0x15
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	09 f4       	brne	.+2      	; 0x28ec <Keypad_enu_getKey+0x2a>
    28ea:	f0 c0       	rjmp	.+480    	; 0x2acc <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    28ec:	ec 89       	ldd	r30, Y+20	; 0x14
    28ee:	fd 89       	ldd	r31, Y+21	; 0x15
    28f0:	8f ef       	ldi	r24, 0xFF	; 255
    28f2:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    28f4:	19 8a       	std	Y+17, r1	; 0x11
    28f6:	e5 c0       	rjmp	.+458    	; 0x2ac2 <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    28f8:	89 89       	ldd	r24, Y+17	; 0x11
    28fa:	88 2f       	mov	r24, r24
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	fc 01       	movw	r30, r24
    2900:	eb 57       	subi	r30, 0x7B	; 123
    2902:	fc 4f       	sbci	r31, 0xFC	; 252
    2904:	90 81       	ld	r25, Z
    2906:	82 e0       	ldi	r24, 0x02	; 2
    2908:	69 2f       	mov	r22, r25
    290a:	40 e0       	ldi	r20, 0x00	; 0
    290c:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2910:	18 8a       	std	Y+16, r1	; 0x10
    2912:	c1 c0       	rjmp	.+386    	; 0x2a96 <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2914:	88 89       	ldd	r24, Y+16	; 0x10
    2916:	88 2f       	mov	r24, r24
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	fc 01       	movw	r30, r24
    291c:	e7 57       	subi	r30, 0x77	; 119
    291e:	fc 4f       	sbci	r31, 0xFC	; 252
    2920:	90 81       	ld	r25, Z
    2922:	9e 01       	movw	r18, r28
    2924:	2d 5e       	subi	r18, 0xED	; 237
    2926:	3f 4f       	sbci	r19, 0xFF	; 255
    2928:	82 e0       	ldi	r24, 0x02	; 2
    292a:	69 2f       	mov	r22, r25
    292c:	a9 01       	movw	r20, r18
    292e:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    2932:	8b 89       	ldd	r24, Y+19	; 0x13
    2934:	88 23       	and	r24, r24
    2936:	09 f0       	breq	.+2      	; 0x293a <Keypad_enu_getKey+0x78>
    2938:	ab c0       	rjmp	.+342    	; 0x2a90 <Keypad_enu_getKey+0x1ce>
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	a0 ea       	ldi	r26, 0xA0	; 160
    2940:	b1 e4       	ldi	r27, 0x41	; 65
    2942:	8b 87       	std	Y+11, r24	; 0x0b
    2944:	9c 87       	std	Y+12, r25	; 0x0c
    2946:	ad 87       	std	Y+13, r26	; 0x0d
    2948:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294a:	6b 85       	ldd	r22, Y+11	; 0x0b
    294c:	7c 85       	ldd	r23, Y+12	; 0x0c
    294e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2950:	9e 85       	ldd	r25, Y+14	; 0x0e
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	4a e7       	ldi	r20, 0x7A	; 122
    2958:	55 e4       	ldi	r21, 0x45	; 69
    295a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	8f 83       	std	Y+7, r24	; 0x07
    2964:	98 87       	std	Y+8, r25	; 0x08
    2966:	a9 87       	std	Y+9, r26	; 0x09
    2968:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    296a:	6f 81       	ldd	r22, Y+7	; 0x07
    296c:	78 85       	ldd	r23, Y+8	; 0x08
    296e:	89 85       	ldd	r24, Y+9	; 0x09
    2970:	9a 85       	ldd	r25, Y+10	; 0x0a
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e8       	ldi	r20, 0x80	; 128
    2978:	5f e3       	ldi	r21, 0x3F	; 63
    297a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    297e:	88 23       	and	r24, r24
    2980:	2c f4       	brge	.+10     	; 0x298c <Keypad_enu_getKey+0xca>
		__ticks = 1;
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	9e 83       	std	Y+6, r25	; 0x06
    2988:	8d 83       	std	Y+5, r24	; 0x05
    298a:	3f c0       	rjmp	.+126    	; 0x2a0a <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    298c:	6f 81       	ldd	r22, Y+7	; 0x07
    298e:	78 85       	ldd	r23, Y+8	; 0x08
    2990:	89 85       	ldd	r24, Y+9	; 0x09
    2992:	9a 85       	ldd	r25, Y+10	; 0x0a
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	3f ef       	ldi	r19, 0xFF	; 255
    2998:	4f e7       	ldi	r20, 0x7F	; 127
    299a:	57 e4       	ldi	r21, 0x47	; 71
    299c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29a0:	18 16       	cp	r1, r24
    29a2:	4c f5       	brge	.+82     	; 0x29f6 <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	40 e2       	ldi	r20, 0x20	; 32
    29b2:	51 e4       	ldi	r21, 0x41	; 65
    29b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	bc 01       	movw	r22, r24
    29be:	cd 01       	movw	r24, r26
    29c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	8d 83       	std	Y+5, r24	; 0x05
    29cc:	0f c0       	rjmp	.+30     	; 0x29ec <Keypad_enu_getKey+0x12a>
    29ce:	80 e9       	ldi	r24, 0x90	; 144
    29d0:	91 e0       	ldi	r25, 0x01	; 1
    29d2:	9c 83       	std	Y+4, r25	; 0x04
    29d4:	8b 83       	std	Y+3, r24	; 0x03
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	9c 81       	ldd	r25, Y+4	; 0x04
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	f1 f7       	brne	.-4      	; 0x29da <Keypad_enu_getKey+0x118>
    29de:	9c 83       	std	Y+4, r25	; 0x04
    29e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e2:	8d 81       	ldd	r24, Y+5	; 0x05
    29e4:	9e 81       	ldd	r25, Y+6	; 0x06
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	9e 83       	std	Y+6, r25	; 0x06
    29ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ec:	8d 81       	ldd	r24, Y+5	; 0x05
    29ee:	9e 81       	ldd	r25, Y+6	; 0x06
    29f0:	00 97       	sbiw	r24, 0x00	; 0
    29f2:	69 f7       	brne	.-38     	; 0x29ce <Keypad_enu_getKey+0x10c>
    29f4:	14 c0       	rjmp	.+40     	; 0x2a1e <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f6:	6f 81       	ldd	r22, Y+7	; 0x07
    29f8:	78 85       	ldd	r23, Y+8	; 0x08
    29fa:	89 85       	ldd	r24, Y+9	; 0x09
    29fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	9e 83       	std	Y+6, r25	; 0x06
    2a08:	8d 83       	std	Y+5, r24	; 0x05
    2a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0e:	9a 83       	std	Y+2, r25	; 0x02
    2a10:	89 83       	std	Y+1, r24	; 0x01
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	9a 81       	ldd	r25, Y+2	; 0x02
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <Keypad_enu_getKey+0x154>
    2a1a:	9a 83       	std	Y+2, r25	; 0x02
    2a1c:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2a1e:	88 89       	ldd	r24, Y+16	; 0x10
    2a20:	88 2f       	mov	r24, r24
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	fc 01       	movw	r30, r24
    2a26:	e7 57       	subi	r30, 0x77	; 119
    2a28:	fc 4f       	sbci	r31, 0xFC	; 252
    2a2a:	90 81       	ld	r25, Z
    2a2c:	9e 01       	movw	r18, r28
    2a2e:	2d 5e       	subi	r18, 0xED	; 237
    2a30:	3f 4f       	sbci	r19, 0xFF	; 255
    2a32:	82 e0       	ldi	r24, 0x02	; 2
    2a34:	69 2f       	mov	r22, r25
    2a36:	a9 01       	movw	r20, r18
    2a38:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <DIO_enu_GetPinValue>
    2a3c:	0f c0       	rjmp	.+30     	; 0x2a5c <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2a3e:	88 89       	ldd	r24, Y+16	; 0x10
    2a40:	88 2f       	mov	r24, r24
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	fc 01       	movw	r30, r24
    2a46:	e7 57       	subi	r30, 0x77	; 119
    2a48:	fc 4f       	sbci	r31, 0xFC	; 252
    2a4a:	90 81       	ld	r25, Z
    2a4c:	9e 01       	movw	r18, r28
    2a4e:	2d 5e       	subi	r18, 0xED	; 237
    2a50:	3f 4f       	sbci	r19, 0xFF	; 255
    2a52:	82 e0       	ldi	r24, 0x02	; 2
    2a54:	69 2f       	mov	r22, r25
    2a56:	a9 01       	movw	r20, r18
    2a58:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    2a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5e:	88 23       	and	r24, r24
    2a60:	71 f3       	breq	.-36     	; 0x2a3e <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    2a62:	89 89       	ldd	r24, Y+17	; 0x11
    2a64:	48 2f       	mov	r20, r24
    2a66:	50 e0       	ldi	r21, 0x00	; 0
    2a68:	88 89       	ldd	r24, Y+16	; 0x10
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	ca 01       	movw	r24, r20
    2a70:	88 0f       	add	r24, r24
    2a72:	99 1f       	adc	r25, r25
    2a74:	88 0f       	add	r24, r24
    2a76:	99 1f       	adc	r25, r25
    2a78:	82 0f       	add	r24, r18
    2a7a:	93 1f       	adc	r25, r19
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	eb 58       	subi	r30, 0x8B	; 139
    2a80:	fc 4f       	sbci	r31, 0xFC	; 252
    2a82:	80 81       	ld	r24, Z
    2a84:	ec 89       	ldd	r30, Y+20	; 0x14
    2a86:	fd 89       	ldd	r31, Y+21	; 0x15
    2a88:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	8f 87       	std	Y+15, r24	; 0x0f
    2a8e:	07 c0       	rjmp	.+14     	; 0x2a9e <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2a90:	88 89       	ldd	r24, Y+16	; 0x10
    2a92:	8f 5f       	subi	r24, 0xFF	; 255
    2a94:	88 8b       	std	Y+16, r24	; 0x10
    2a96:	88 89       	ldd	r24, Y+16	; 0x10
    2a98:	84 30       	cpi	r24, 0x04	; 4
    2a9a:	08 f4       	brcc	.+2      	; 0x2a9e <Keypad_enu_getKey+0x1dc>
    2a9c:	3b cf       	rjmp	.-394    	; 0x2914 <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    2a9e:	89 89       	ldd	r24, Y+17	; 0x11
    2aa0:	88 2f       	mov	r24, r24
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	eb 57       	subi	r30, 0x7B	; 123
    2aa8:	fc 4f       	sbci	r31, 0xFC	; 252
    2aaa:	90 81       	ld	r25, Z
    2aac:	82 e0       	ldi	r24, 0x02	; 2
    2aae:	69 2f       	mov	r22, r25
    2ab0:	41 e0       	ldi	r20, 0x01	; 1
    2ab2:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    2ab6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab8:	88 23       	and	r24, r24
    2aba:	49 f4       	brne	.+18     	; 0x2ace <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    2abc:	89 89       	ldd	r24, Y+17	; 0x11
    2abe:	8f 5f       	subi	r24, 0xFF	; 255
    2ac0:	89 8b       	std	Y+17, r24	; 0x11
    2ac2:	89 89       	ldd	r24, Y+17	; 0x11
    2ac4:	84 30       	cpi	r24, 0x04	; 4
    2ac6:	08 f4       	brcc	.+2      	; 0x2aca <Keypad_enu_getKey+0x208>
    2ac8:	17 cf       	rjmp	.-466    	; 0x28f8 <Keypad_enu_getKey+0x36>
    2aca:	01 c0       	rjmp	.+2      	; 0x2ace <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2acc:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    2ace:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2ad0:	65 96       	adiw	r28, 0x15	; 21
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	08 95       	ret

00002ae2 <main>:
u8 selectedRoom = 0;
u8 numberOfLogins = 0;
char id[ID_LENGTH + 1] = "";
char password[PASSWORD_LENGTH + 1] = "";

int main() {
    2ae2:	df 93       	push	r29
    2ae4:	cf 93       	push	r28
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
    initializeSystem();
    2aea:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <initializeSystem>
    displayWelcomeMessage();
    2aee:	0e 94 30 19 	call	0x3260	; 0x3260 <displayWelcomeMessage>
    showRoomSelection();
    2af2:	0e 94 b9 19 	call	0x3372	; 0x3372 <showRoomSelection>
    return 0;
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	90 e0       	ldi	r25, 0x00	; 0
}
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	08 95       	ret

00002b00 <myAPP>:



void myAPP(){
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
	if (numberOfLogins >= MAX_LOGIN_ATTEMPTS) {
    2b08:	80 91 8f 03 	lds	r24, 0x038F
    2b0c:	83 30       	cpi	r24, 0x03	; 3
    2b0e:	18 f0       	brcs	.+6      	; 0x2b16 <myAPP+0x16>
	    while(1){
	    	 displayMaxLoginAttemptsReached();
    2b10:	0e 94 9d 18 	call	0x313a	; 0x313a <displayMaxLoginAttemptsReached>
    2b14:	fd cf       	rjmp	.-6      	; 0x2b10 <myAPP+0x10>
	    }
	} else{
         displayWelcomeMessage();
    2b16:	0e 94 30 19 	call	0x3260	; 0x3260 <displayWelcomeMessage>
         getUserInput(id, ID_LENGTH, "Enter ID", 0);
    2b1a:	8d e6       	ldi	r24, 0x6D	; 109
    2b1c:	93 e0       	ldi	r25, 0x03	; 3
    2b1e:	20 e6       	ldi	r18, 0x60	; 96
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	63 e0       	ldi	r22, 0x03	; 3
    2b24:	70 e0       	ldi	r23, 0x00	; 0
    2b26:	a9 01       	movw	r20, r18
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <getUserInput>
         getUserInput(password, PASSWORD_LENGTH, "Enter Password", 1);
    2b30:	81 e7       	ldi	r24, 0x71	; 113
    2b32:	93 e0       	ldi	r25, 0x03	; 3
    2b34:	29 e6       	ldi	r18, 0x69	; 105
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	63 e0       	ldi	r22, 0x03	; 3
    2b3a:	70 e0       	ldi	r23, 0x00	; 0
    2b3c:	a9 01       	movw	r20, r18
    2b3e:	21 e0       	ldi	r18, 0x01	; 1
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <getUserInput>
         checkCredentials(id, password);}
    2b46:	8d e6       	ldi	r24, 0x6D	; 109
    2b48:	93 e0       	ldi	r25, 0x03	; 3
    2b4a:	21 e7       	ldi	r18, 0x71	; 113
    2b4c:	33 e0       	ldi	r19, 0x03	; 3
    2b4e:	b9 01       	movw	r22, r18
    2b50:	0e 94 f7 16 	call	0x2dee	; 0x2dee <checkCredentials>
}
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <initializeSystem>:

void initializeSystem(void) {
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    LCD_8_bit_init();
    2b62:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <LCD_8_bit_init>
    Keypad_enu_Init();
    2b66:	0e 94 1f 14 	call	0x283e	; 0x283e <Keypad_enu_Init>
    USART_voidINIT();
    2b6a:	0e 94 17 07 	call	0xe2e	; 0xe2e <USART_voidINIT>
    // Initialize other peripherals

   // DIO_init(PORT_A, PIN1, OUT);
     ADC_voidInit();
    2b6e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <ADC_voidInit>
}
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	08 95       	ret

00002b78 <getUserInput>:

void getUserInput(char *buffer, u8 maxLength, const char *promptMessage, u8 maskInput) {
    2b78:	df 93       	push	r29
    2b7a:	cf 93       	push	r28
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	a5 97       	sbiw	r28, 0x25	; 37
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	cd bf       	out	0x3d, r28	; 61
    2b8c:	98 a3       	std	Y+32, r25	; 0x20
    2b8e:	8f 8f       	std	Y+31, r24	; 0x1f
    2b90:	69 a3       	std	Y+33, r22	; 0x21
    2b92:	5b a3       	std	Y+35, r21	; 0x23
    2b94:	4a a3       	std	Y+34, r20	; 0x22
    2b96:	2c a3       	std	Y+36, r18	; 0x24
    u8 key;
    u8 counter = 0;
    2b98:	1d 8e       	std	Y+29, r1	; 0x1d

    LCD_8_bit_sendString(promptMessage);
    2b9a:	8a a1       	ldd	r24, Y+34	; 0x22
    2b9c:	9b a1       	ldd	r25, Y+35	; 0x23
    2b9e:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	a8 ec       	ldi	r26, 0xC8	; 200
    2ba8:	b2 e4       	ldi	r27, 0x42	; 66
    2baa:	89 8f       	std	Y+25, r24	; 0x19
    2bac:	9a 8f       	std	Y+26, r25	; 0x1a
    2bae:	ab 8f       	std	Y+27, r26	; 0x1b
    2bb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb2:	69 8d       	ldd	r22, Y+25	; 0x19
    2bb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	4a ef       	ldi	r20, 0xFA	; 250
    2bc0:	54 e4       	ldi	r21, 0x44	; 68
    2bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	8d 8b       	std	Y+21, r24	; 0x15
    2bcc:	9e 8b       	std	Y+22, r25	; 0x16
    2bce:	af 8b       	std	Y+23, r26	; 0x17
    2bd0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    2bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	40 e8       	ldi	r20, 0x80	; 128
    2be0:	5f e3       	ldi	r21, 0x3F	; 63
    2be2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2be6:	88 23       	and	r24, r24
    2be8:	2c f4       	brge	.+10     	; 0x2bf4 <getUserInput+0x7c>
		__ticks = 1;
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	9c 8b       	std	Y+20, r25	; 0x14
    2bf0:	8b 8b       	std	Y+19, r24	; 0x13
    2bf2:	3f c0       	rjmp	.+126    	; 0x2c72 <getUserInput+0xfa>
	else if (__tmp > 65535)
    2bf4:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf6:	7e 89       	ldd	r23, Y+22	; 0x16
    2bf8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bfa:	98 8d       	ldd	r25, Y+24	; 0x18
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	3f ef       	ldi	r19, 0xFF	; 255
    2c00:	4f e7       	ldi	r20, 0x7F	; 127
    2c02:	57 e4       	ldi	r21, 0x47	; 71
    2c04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c08:	18 16       	cp	r1, r24
    2c0a:	4c f5       	brge	.+82     	; 0x2c5e <getUserInput+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	40 e2       	ldi	r20, 0x20	; 32
    2c1a:	51 e4       	ldi	r21, 0x41	; 65
    2c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	bc 01       	movw	r22, r24
    2c26:	cd 01       	movw	r24, r26
    2c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	9c 8b       	std	Y+20, r25	; 0x14
    2c32:	8b 8b       	std	Y+19, r24	; 0x13
    2c34:	0f c0       	rjmp	.+30     	; 0x2c54 <getUserInput+0xdc>
    2c36:	88 ec       	ldi	r24, 0xC8	; 200
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	9a 8b       	std	Y+18, r25	; 0x12
    2c3c:	89 8b       	std	Y+17, r24	; 0x11
    2c3e:	89 89       	ldd	r24, Y+17	; 0x11
    2c40:	9a 89       	ldd	r25, Y+18	; 0x12
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	f1 f7       	brne	.-4      	; 0x2c42 <getUserInput+0xca>
    2c46:	9a 8b       	std	Y+18, r25	; 0x12
    2c48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	9c 8b       	std	Y+20, r25	; 0x14
    2c52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c54:	8b 89       	ldd	r24, Y+19	; 0x13
    2c56:	9c 89       	ldd	r25, Y+20	; 0x14
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	69 f7       	brne	.-38     	; 0x2c36 <getUserInput+0xbe>
    2c5c:	3e c0       	rjmp	.+124    	; 0x2cda <getUserInput+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c60:	7e 89       	ldd	r23, Y+22	; 0x16
    2c62:	8f 89       	ldd	r24, Y+23	; 0x17
    2c64:	98 8d       	ldd	r25, Y+24	; 0x18
    2c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	9c 8b       	std	Y+20, r25	; 0x14
    2c70:	8b 8b       	std	Y+19, r24	; 0x13
    2c72:	8b 89       	ldd	r24, Y+19	; 0x13
    2c74:	9c 89       	ldd	r25, Y+20	; 0x14
    2c76:	98 8b       	std	Y+16, r25	; 0x10
    2c78:	8f 87       	std	Y+15, r24	; 0x0f
    2c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c7c:	98 89       	ldd	r25, Y+16	; 0x10
    2c7e:	01 97       	sbiw	r24, 0x01	; 1
    2c80:	f1 f7       	brne	.-4      	; 0x2c7e <getUserInput+0x106>
    2c82:	98 8b       	std	Y+16, r25	; 0x10
    2c84:	8f 87       	std	Y+15, r24	; 0x0f
    2c86:	29 c0       	rjmp	.+82     	; 0x2cda <getUserInput+0x162>
    _delay_ms(100);

    while (counter < maxLength) {
        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    2c88:	ce 01       	movw	r24, r28
    2c8a:	4e 96       	adiw	r24, 0x1e	; 30
    2c8c:	0e 94 61 14 	call	0x28c2	; 0x28c2 <Keypad_enu_getKey>
    2c90:	81 30       	cpi	r24, 0x01	; 1
    2c92:	19 f5       	brne	.+70     	; 0x2cda <getUserInput+0x162>
    2c94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c96:	8f 3f       	cpi	r24, 0xFF	; 255
    2c98:	01 f1       	breq	.+64     	; 0x2cda <getUserInput+0x162>
            LCD_8_bit_GoToPos(1, counter);
    2c9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c9c:	28 2f       	mov	r18, r24
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	b9 01       	movw	r22, r18
    2ca6:	0e 94 c2 13 	call	0x2784	; 0x2784 <LCD_8_bit_GoToPos>
            LCD_8_bit_sendChar(maskInput ? '*' : key);
    2caa:	8c a1       	ldd	r24, Y+36	; 0x24
    2cac:	88 23       	and	r24, r24
    2cae:	19 f4       	brne	.+6      	; 0x2cb6 <getUserInput+0x13e>
    2cb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cb2:	8d a3       	std	Y+37, r24	; 0x25
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <getUserInput+0x142>
    2cb6:	8a e2       	ldi	r24, 0x2A	; 42
    2cb8:	8d a3       	std	Y+37, r24	; 0x25
    2cba:	8d a1       	ldd	r24, Y+37	; 0x25
    2cbc:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_8_bit_sendChar>
            buffer[counter] = key;
    2cc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cc2:	28 2f       	mov	r18, r24
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cc8:	98 a1       	ldd	r25, Y+32	; 0x20
    2cca:	fc 01       	movw	r30, r24
    2ccc:	e2 0f       	add	r30, r18
    2cce:	f3 1f       	adc	r31, r19
    2cd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2cd2:	80 83       	st	Z, r24
            counter++;
    2cd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cd6:	8f 5f       	subi	r24, 0xFF	; 255
    2cd8:	8d 8f       	std	Y+29, r24	; 0x1d
    u8 counter = 0;

    LCD_8_bit_sendString(promptMessage);
    _delay_ms(100);

    while (counter < maxLength) {
    2cda:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2cdc:	89 a1       	ldd	r24, Y+33	; 0x21
    2cde:	98 17       	cp	r25, r24
    2ce0:	98 f2       	brcs	.-90     	; 0x2c88 <getUserInput+0x110>
            buffer[counter] = key;
            counter++;
        }
    }

    buffer[counter] = '\0';
    2ce2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ce4:	28 2f       	mov	r18, r24
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cea:	98 a1       	ldd	r25, Y+32	; 0x20
    2cec:	fc 01       	movw	r30, r24
    2cee:	e2 0f       	add	r30, r18
    2cf0:	f3 1f       	adc	r31, r19
    2cf2:	10 82       	st	Z, r1
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	a8 e4       	ldi	r26, 0x48	; 72
    2cfa:	b2 e4       	ldi	r27, 0x42	; 66
    2cfc:	8b 87       	std	Y+11, r24	; 0x0b
    2cfe:	9c 87       	std	Y+12, r25	; 0x0c
    2d00:	ad 87       	std	Y+13, r26	; 0x0d
    2d02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	4a ef       	ldi	r20, 0xFA	; 250
    2d12:	54 e4       	ldi	r21, 0x44	; 68
    2d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	8f 83       	std	Y+7, r24	; 0x07
    2d1e:	98 87       	std	Y+8, r25	; 0x08
    2d20:	a9 87       	std	Y+9, r26	; 0x09
    2d22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d24:	6f 81       	ldd	r22, Y+7	; 0x07
    2d26:	78 85       	ldd	r23, Y+8	; 0x08
    2d28:	89 85       	ldd	r24, Y+9	; 0x09
    2d2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e8       	ldi	r20, 0x80	; 128
    2d32:	5f e3       	ldi	r21, 0x3F	; 63
    2d34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d38:	88 23       	and	r24, r24
    2d3a:	2c f4       	brge	.+10     	; 0x2d46 <getUserInput+0x1ce>
		__ticks = 1;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	9e 83       	std	Y+6, r25	; 0x06
    2d42:	8d 83       	std	Y+5, r24	; 0x05
    2d44:	3f c0       	rjmp	.+126    	; 0x2dc4 <getUserInput+0x24c>
	else if (__tmp > 65535)
    2d46:	6f 81       	ldd	r22, Y+7	; 0x07
    2d48:	78 85       	ldd	r23, Y+8	; 0x08
    2d4a:	89 85       	ldd	r24, Y+9	; 0x09
    2d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	3f ef       	ldi	r19, 0xFF	; 255
    2d52:	4f e7       	ldi	r20, 0x7F	; 127
    2d54:	57 e4       	ldi	r21, 0x47	; 71
    2d56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d5a:	18 16       	cp	r1, r24
    2d5c:	4c f5       	brge	.+82     	; 0x2db0 <getUserInput+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d60:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e2       	ldi	r20, 0x20	; 32
    2d6c:	51 e4       	ldi	r21, 0x41	; 65
    2d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	bc 01       	movw	r22, r24
    2d78:	cd 01       	movw	r24, r26
    2d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	9e 83       	std	Y+6, r25	; 0x06
    2d84:	8d 83       	std	Y+5, r24	; 0x05
    2d86:	0f c0       	rjmp	.+30     	; 0x2da6 <getUserInput+0x22e>
    2d88:	88 ec       	ldi	r24, 0xC8	; 200
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	9c 83       	std	Y+4, r25	; 0x04
    2d8e:	8b 83       	std	Y+3, r24	; 0x03
    2d90:	8b 81       	ldd	r24, Y+3	; 0x03
    2d92:	9c 81       	ldd	r25, Y+4	; 0x04
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	f1 f7       	brne	.-4      	; 0x2d94 <getUserInput+0x21c>
    2d98:	9c 83       	std	Y+4, r25	; 0x04
    2d9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	9e 83       	std	Y+6, r25	; 0x06
    2da4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da6:	8d 81       	ldd	r24, Y+5	; 0x05
    2da8:	9e 81       	ldd	r25, Y+6	; 0x06
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	69 f7       	brne	.-38     	; 0x2d88 <getUserInput+0x210>
    2dae:	14 c0       	rjmp	.+40     	; 0x2dd8 <getUserInput+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db0:	6f 81       	ldd	r22, Y+7	; 0x07
    2db2:	78 85       	ldd	r23, Y+8	; 0x08
    2db4:	89 85       	ldd	r24, Y+9	; 0x09
    2db6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	9e 83       	std	Y+6, r25	; 0x06
    2dc2:	8d 83       	std	Y+5, r24	; 0x05
    2dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc8:	9a 83       	std	Y+2, r25	; 0x02
    2dca:	89 83       	std	Y+1, r24	; 0x01
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <getUserInput+0x258>
    2dd4:	9a 83       	std	Y+2, r25	; 0x02
    2dd6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(50);
    LCD_CLR();
    2dd8:	0e 94 12 14 	call	0x2824	; 0x2824 <LCD_CLR>
}
    2ddc:	a5 96       	adiw	r28, 0x25	; 37
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	de bf       	out	0x3e, r29	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	cd bf       	out	0x3d, r28	; 61
    2de8:	cf 91       	pop	r28
    2dea:	df 91       	pop	r29
    2dec:	08 95       	ret

00002dee <checkCredentials>:

void checkCredentials(const char *id, const char *password) {
    2dee:	df 93       	push	r29
    2df0:	cf 93       	push	r28
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
    2df6:	6c 97       	sbiw	r28, 0x1c	; 28
    2df8:	0f b6       	in	r0, 0x3f	; 63
    2dfa:	f8 94       	cli
    2dfc:	de bf       	out	0x3e, r29	; 62
    2dfe:	0f be       	out	0x3f, r0	; 63
    2e00:	cd bf       	out	0x3d, r28	; 61
    2e02:	9a 8f       	std	Y+26, r25	; 0x1a
    2e04:	89 8f       	std	Y+25, r24	; 0x19
    2e06:	7c 8f       	std	Y+28, r23	; 0x1c
    2e08:	6b 8f       	std	Y+27, r22	; 0x1b
    LCD_CLR();
    2e0a:	0e 94 12 14 	call	0x2824	; 0x2824 <LCD_CLR>

    const char *idArray[] = ID_ARRAY;
    2e0e:	88 e7       	ldi	r24, 0x78	; 120
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	9a 8b       	std	Y+18, r25	; 0x12
    2e14:	89 8b       	std	Y+17, r24	; 0x11
    2e16:	8c e7       	ldi	r24, 0x7C	; 124
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	9c 8b       	std	Y+20, r25	; 0x14
    2e1c:	8b 8b       	std	Y+19, r24	; 0x13
    const char *passwordArray[] = PASSWORD_ARRAY;
    2e1e:	88 e7       	ldi	r24, 0x78	; 120
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	9e 8b       	std	Y+22, r25	; 0x16
    2e24:	8d 8b       	std	Y+21, r24	; 0x15
    2e26:	8c e7       	ldi	r24, 0x7C	; 124
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	98 8f       	std	Y+24, r25	; 0x18
    2e2c:	8f 8b       	std	Y+23, r24	; 0x17

    u8 loginSuccess = 0;
    2e2e:	18 8a       	std	Y+16, r1	; 0x10


        	    for (uint8_t i = 0; i < sizeof(idArray)/sizeof(idArray[0]); i++) {
    2e30:	1f 86       	std	Y+15, r1	; 0x0f
    2e32:	38 c0       	rjmp	.+112    	; 0x2ea4 <checkCredentials+0xb6>
        	        if (strcmp(id, idArray[i]) == 0 && strcmp(password, passwordArray[i]) == 0) {
    2e34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e36:	88 2f       	mov	r24, r24
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	9c 01       	movw	r18, r24
    2e3c:	22 0f       	add	r18, r18
    2e3e:	33 1f       	adc	r19, r19
    2e40:	ce 01       	movw	r24, r28
    2e42:	01 96       	adiw	r24, 0x01	; 1
    2e44:	82 0f       	add	r24, r18
    2e46:	93 1f       	adc	r25, r19
    2e48:	fc 01       	movw	r30, r24
    2e4a:	70 96       	adiw	r30, 0x10	; 16
    2e4c:	20 81       	ld	r18, Z
    2e4e:	31 81       	ldd	r19, Z+1	; 0x01
    2e50:	89 8d       	ldd	r24, Y+25	; 0x19
    2e52:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e54:	b9 01       	movw	r22, r18
    2e56:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <strcmp>
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	01 f5       	brne	.+64     	; 0x2e9e <checkCredentials+0xb0>
    2e5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e60:	88 2f       	mov	r24, r24
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	9c 01       	movw	r18, r24
    2e66:	22 0f       	add	r18, r18
    2e68:	33 1f       	adc	r19, r19
    2e6a:	ce 01       	movw	r24, r28
    2e6c:	01 96       	adiw	r24, 0x01	; 1
    2e6e:	82 0f       	add	r24, r18
    2e70:	93 1f       	adc	r25, r19
    2e72:	fc 01       	movw	r30, r24
    2e74:	74 96       	adiw	r30, 0x14	; 20
    2e76:	20 81       	ld	r18, Z
    2e78:	31 81       	ldd	r19, Z+1	; 0x01
    2e7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e7e:	b9 01       	movw	r22, r18
    2e80:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <strcmp>
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	59 f4       	brne	.+22     	; 0x2e9e <checkCredentials+0xb0>
        	            // Credentials matched
        	            displayLoginSuccessful(i + 1); // Display the user index (i + 1)
    2e88:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e8a:	88 2f       	mov	r24, r24
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	01 96       	adiw	r24, 0x01	; 1
    2e90:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <displayLoginSuccessful>
        	            showOptions();
    2e94:	0e 94 14 1a 	call	0x3428	; 0x3428 <showOptions>
        	            loginSuccess = 1;
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	88 8b       	std	Y+16, r24	; 0x10
    2e9c:	06 c0       	rjmp	.+12     	; 0x2eaa <checkCredentials+0xbc>
    const char *passwordArray[] = PASSWORD_ARRAY;

    u8 loginSuccess = 0;


        	    for (uint8_t i = 0; i < sizeof(idArray)/sizeof(idArray[0]); i++) {
    2e9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ea0:	8f 5f       	subi	r24, 0xFF	; 255
    2ea2:	8f 87       	std	Y+15, r24	; 0x0f
    2ea4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ea6:	82 30       	cpi	r24, 0x02	; 2
    2ea8:	28 f2       	brcs	.-118    	; 0x2e34 <checkCredentials+0x46>
        	            loginSuccess = 1;
        	            break;
        	        }
        	    }

        	    if (!loginSuccess) {
    2eaa:	88 89       	ldd	r24, Y+16	; 0x10
    2eac:	88 23       	and	r24, r24
    2eae:	09 f0       	breq	.+2      	; 0x2eb2 <checkCredentials+0xc4>
    2eb0:	7f c0       	rjmp	.+254    	; 0x2fb0 <checkCredentials+0x1c2>
        	        numberOfLogins++;
    2eb2:	80 91 8f 03 	lds	r24, 0x038F
    2eb6:	8f 5f       	subi	r24, 0xFF	; 255
    2eb8:	80 93 8f 03 	sts	0x038F, r24
        	        LCD_8_bit_sendString("Login Failed");
    2ebc:	80 e8       	ldi	r24, 0x80	; 128
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	a8 ec       	ldi	r26, 0xC8	; 200
    2eca:	b2 e4       	ldi	r27, 0x42	; 66
    2ecc:	8b 87       	std	Y+11, r24	; 0x0b
    2ece:	9c 87       	std	Y+12, r25	; 0x0c
    2ed0:	ad 87       	std	Y+13, r26	; 0x0d
    2ed2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	4a ef       	ldi	r20, 0xFA	; 250
    2ee2:	54 e4       	ldi	r21, 0x44	; 68
    2ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	8f 83       	std	Y+7, r24	; 0x07
    2eee:	98 87       	std	Y+8, r25	; 0x08
    2ef0:	a9 87       	std	Y+9, r26	; 0x09
    2ef2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef6:	78 85       	ldd	r23, Y+8	; 0x08
    2ef8:	89 85       	ldd	r24, Y+9	; 0x09
    2efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e8       	ldi	r20, 0x80	; 128
    2f02:	5f e3       	ldi	r21, 0x3F	; 63
    2f04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f08:	88 23       	and	r24, r24
    2f0a:	2c f4       	brge	.+10     	; 0x2f16 <checkCredentials+0x128>
		__ticks = 1;
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	9e 83       	std	Y+6, r25	; 0x06
    2f12:	8d 83       	std	Y+5, r24	; 0x05
    2f14:	3f c0       	rjmp	.+126    	; 0x2f94 <checkCredentials+0x1a6>
	else if (__tmp > 65535)
    2f16:	6f 81       	ldd	r22, Y+7	; 0x07
    2f18:	78 85       	ldd	r23, Y+8	; 0x08
    2f1a:	89 85       	ldd	r24, Y+9	; 0x09
    2f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	3f ef       	ldi	r19, 0xFF	; 255
    2f22:	4f e7       	ldi	r20, 0x7F	; 127
    2f24:	57 e4       	ldi	r21, 0x47	; 71
    2f26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f2a:	18 16       	cp	r1, r24
    2f2c:	4c f5       	brge	.+82     	; 0x2f80 <checkCredentials+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	40 e2       	ldi	r20, 0x20	; 32
    2f3c:	51 e4       	ldi	r21, 0x41	; 65
    2f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	bc 01       	movw	r22, r24
    2f48:	cd 01       	movw	r24, r26
    2f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	9e 83       	std	Y+6, r25	; 0x06
    2f54:	8d 83       	std	Y+5, r24	; 0x05
    2f56:	0f c0       	rjmp	.+30     	; 0x2f76 <checkCredentials+0x188>
    2f58:	88 ec       	ldi	r24, 0xC8	; 200
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9c 83       	std	Y+4, r25	; 0x04
    2f5e:	8b 83       	std	Y+3, r24	; 0x03
    2f60:	8b 81       	ldd	r24, Y+3	; 0x03
    2f62:	9c 81       	ldd	r25, Y+4	; 0x04
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	f1 f7       	brne	.-4      	; 0x2f64 <checkCredentials+0x176>
    2f68:	9c 83       	std	Y+4, r25	; 0x04
    2f6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	9e 83       	std	Y+6, r25	; 0x06
    2f74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f76:	8d 81       	ldd	r24, Y+5	; 0x05
    2f78:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7a:	00 97       	sbiw	r24, 0x00	; 0
    2f7c:	69 f7       	brne	.-38     	; 0x2f58 <checkCredentials+0x16a>
    2f7e:	14 c0       	rjmp	.+40     	; 0x2fa8 <checkCredentials+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f80:	6f 81       	ldd	r22, Y+7	; 0x07
    2f82:	78 85       	ldd	r23, Y+8	; 0x08
    2f84:	89 85       	ldd	r24, Y+9	; 0x09
    2f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	9e 83       	std	Y+6, r25	; 0x06
    2f92:	8d 83       	std	Y+5, r24	; 0x05
    2f94:	8d 81       	ldd	r24, Y+5	; 0x05
    2f96:	9e 81       	ldd	r25, Y+6	; 0x06
    2f98:	9a 83       	std	Y+2, r25	; 0x02
    2f9a:	89 83       	std	Y+1, r24	; 0x01
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa0:	01 97       	sbiw	r24, 0x01	; 1
    2fa2:	f1 f7       	brne	.-4      	; 0x2fa0 <checkCredentials+0x1b2>
    2fa4:	9a 83       	std	Y+2, r25	; 0x02
    2fa6:	89 83       	std	Y+1, r24	; 0x01
        	        _delay_ms(100);
        	        LCD_CLR();
    2fa8:	0e 94 12 14 	call	0x2824	; 0x2824 <LCD_CLR>
        	        myAPP();
    2fac:	0e 94 80 15 	call	0x2b00	; 0x2b00 <myAPP>

        	    }


    LCD_CLR();
    2fb0:	0e 94 12 14 	call	0x2824	; 0x2824 <LCD_CLR>
}
    2fb4:	6c 96       	adiw	r28, 0x1c	; 28
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	f8 94       	cli
    2fba:	de bf       	out	0x3e, r29	; 62
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	cd bf       	out	0x3d, r28	; 61
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <displayLoginSuccessful>:

void displayLoginSuccessful(u8 userIndex) {
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	6f 97       	sbiw	r28, 0x1f	; 31
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	8f 8f       	std	Y+31, r24	; 0x1f
    LCD_8_bit_sendString("Login Successful");
    2fdc:	8d e8       	ldi	r24, 0x8D	; 141
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
    LCD_8_bit_GoToPos(1, 0);
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	70 e0       	ldi	r23, 0x00	; 0
    2fec:	0e 94 c2 13 	call	0x2784	; 0x2784 <LCD_8_bit_GoToPos>
    char message[16];
    snprintf(message, sizeof(message), "Hello User %d", userIndex);
    2ff0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ff2:	28 2f       	mov	r18, r24
    2ff4:	30 e0       	ldi	r19, 0x00	; 0
    2ff6:	8d b7       	in	r24, 0x3d	; 61
    2ff8:	9e b7       	in	r25, 0x3e	; 62
    2ffa:	08 97       	sbiw	r24, 0x08	; 8
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	9e bf       	out	0x3e, r25	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	8d bf       	out	0x3d, r24	; 61
    3006:	ed b7       	in	r30, 0x3d	; 61
    3008:	fe b7       	in	r31, 0x3e	; 62
    300a:	31 96       	adiw	r30, 0x01	; 1
    300c:	ce 01       	movw	r24, r28
    300e:	0f 96       	adiw	r24, 0x0f	; 15
    3010:	91 83       	std	Z+1, r25	; 0x01
    3012:	80 83       	st	Z, r24
    3014:	80 e1       	ldi	r24, 0x10	; 16
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	93 83       	std	Z+3, r25	; 0x03
    301a:	82 83       	std	Z+2, r24	; 0x02
    301c:	8e e9       	ldi	r24, 0x9E	; 158
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	95 83       	std	Z+5, r25	; 0x05
    3022:	84 83       	std	Z+4, r24	; 0x04
    3024:	37 83       	std	Z+7, r19	; 0x07
    3026:	26 83       	std	Z+6, r18	; 0x06
    3028:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <snprintf>
    302c:	8d b7       	in	r24, 0x3d	; 61
    302e:	9e b7       	in	r25, 0x3e	; 62
    3030:	08 96       	adiw	r24, 0x08	; 8
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	9e bf       	out	0x3e, r25	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	8d bf       	out	0x3d, r24	; 61
    LCD_8_bit_sendString(message);
    303c:	ce 01       	movw	r24, r28
    303e:	0f 96       	adiw	r24, 0x0f	; 15
    3040:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	a8 ec       	ldi	r26, 0xC8	; 200
    304a:	b2 e4       	ldi	r27, 0x42	; 66
    304c:	8b 87       	std	Y+11, r24	; 0x0b
    304e:	9c 87       	std	Y+12, r25	; 0x0c
    3050:	ad 87       	std	Y+13, r26	; 0x0d
    3052:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3054:	6b 85       	ldd	r22, Y+11	; 0x0b
    3056:	7c 85       	ldd	r23, Y+12	; 0x0c
    3058:	8d 85       	ldd	r24, Y+13	; 0x0d
    305a:	9e 85       	ldd	r25, Y+14	; 0x0e
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	4a ef       	ldi	r20, 0xFA	; 250
    3062:	54 e4       	ldi	r21, 0x44	; 68
    3064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	8f 83       	std	Y+7, r24	; 0x07
    306e:	98 87       	std	Y+8, r25	; 0x08
    3070:	a9 87       	std	Y+9, r26	; 0x09
    3072:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3074:	6f 81       	ldd	r22, Y+7	; 0x07
    3076:	78 85       	ldd	r23, Y+8	; 0x08
    3078:	89 85       	ldd	r24, Y+9	; 0x09
    307a:	9a 85       	ldd	r25, Y+10	; 0x0a
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e8       	ldi	r20, 0x80	; 128
    3082:	5f e3       	ldi	r21, 0x3F	; 63
    3084:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3088:	88 23       	and	r24, r24
    308a:	2c f4       	brge	.+10     	; 0x3096 <displayLoginSuccessful+0xd0>
		__ticks = 1;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	9e 83       	std	Y+6, r25	; 0x06
    3092:	8d 83       	std	Y+5, r24	; 0x05
    3094:	3f c0       	rjmp	.+126    	; 0x3114 <displayLoginSuccessful+0x14e>
	else if (__tmp > 65535)
    3096:	6f 81       	ldd	r22, Y+7	; 0x07
    3098:	78 85       	ldd	r23, Y+8	; 0x08
    309a:	89 85       	ldd	r24, Y+9	; 0x09
    309c:	9a 85       	ldd	r25, Y+10	; 0x0a
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	3f ef       	ldi	r19, 0xFF	; 255
    30a2:	4f e7       	ldi	r20, 0x7F	; 127
    30a4:	57 e4       	ldi	r21, 0x47	; 71
    30a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30aa:	18 16       	cp	r1, r24
    30ac:	4c f5       	brge	.+82     	; 0x3100 <displayLoginSuccessful+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e2       	ldi	r20, 0x20	; 32
    30bc:	51 e4       	ldi	r21, 0x41	; 65
    30be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	bc 01       	movw	r22, r24
    30c8:	cd 01       	movw	r24, r26
    30ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	9e 83       	std	Y+6, r25	; 0x06
    30d4:	8d 83       	std	Y+5, r24	; 0x05
    30d6:	0f c0       	rjmp	.+30     	; 0x30f6 <displayLoginSuccessful+0x130>
    30d8:	88 ec       	ldi	r24, 0xC8	; 200
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	9c 83       	std	Y+4, r25	; 0x04
    30de:	8b 83       	std	Y+3, r24	; 0x03
    30e0:	8b 81       	ldd	r24, Y+3	; 0x03
    30e2:	9c 81       	ldd	r25, Y+4	; 0x04
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	f1 f7       	brne	.-4      	; 0x30e4 <displayLoginSuccessful+0x11e>
    30e8:	9c 83       	std	Y+4, r25	; 0x04
    30ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ec:	8d 81       	ldd	r24, Y+5	; 0x05
    30ee:	9e 81       	ldd	r25, Y+6	; 0x06
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	9e 83       	std	Y+6, r25	; 0x06
    30f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f6:	8d 81       	ldd	r24, Y+5	; 0x05
    30f8:	9e 81       	ldd	r25, Y+6	; 0x06
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	69 f7       	brne	.-38     	; 0x30d8 <displayLoginSuccessful+0x112>
    30fe:	14 c0       	rjmp	.+40     	; 0x3128 <displayLoginSuccessful+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3100:	6f 81       	ldd	r22, Y+7	; 0x07
    3102:	78 85       	ldd	r23, Y+8	; 0x08
    3104:	89 85       	ldd	r24, Y+9	; 0x09
    3106:	9a 85       	ldd	r25, Y+10	; 0x0a
    3108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	9e 83       	std	Y+6, r25	; 0x06
    3112:	8d 83       	std	Y+5, r24	; 0x05
    3114:	8d 81       	ldd	r24, Y+5	; 0x05
    3116:	9e 81       	ldd	r25, Y+6	; 0x06
    3118:	9a 83       	std	Y+2, r25	; 0x02
    311a:	89 83       	std	Y+1, r24	; 0x01
    311c:	89 81       	ldd	r24, Y+1	; 0x01
    311e:	9a 81       	ldd	r25, Y+2	; 0x02
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <displayLoginSuccessful+0x15a>
    3124:	9a 83       	std	Y+2, r25	; 0x02
    3126:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
}
    3128:	6f 96       	adiw	r28, 0x1f	; 31
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <displayMaxLoginAttemptsReached>:

void displayMaxLoginAttemptsReached() {
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	2e 97       	sbiw	r28, 0x0e	; 14
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    LCD_8_bit_sendString("Max Login");
    314e:	8c ea       	ldi	r24, 0xAC	; 172
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
    LCD_8_bit_GoToPos(1, 0);
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	60 e0       	ldi	r22, 0x00	; 0
    315c:	70 e0       	ldi	r23, 0x00	; 0
    315e:	0e 94 c2 13 	call	0x2784	; 0x2784 <LCD_8_bit_GoToPos>
    LCD_8_bit_sendString("Attempts Reached");
    3162:	86 eb       	ldi	r24, 0xB6	; 182
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	a8 ec       	ldi	r26, 0xC8	; 200
    3170:	b2 e4       	ldi	r27, 0x42	; 66
    3172:	8b 87       	std	Y+11, r24	; 0x0b
    3174:	9c 87       	std	Y+12, r25	; 0x0c
    3176:	ad 87       	std	Y+13, r26	; 0x0d
    3178:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    317a:	6b 85       	ldd	r22, Y+11	; 0x0b
    317c:	7c 85       	ldd	r23, Y+12	; 0x0c
    317e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3180:	9e 85       	ldd	r25, Y+14	; 0x0e
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	4a ef       	ldi	r20, 0xFA	; 250
    3188:	54 e4       	ldi	r21, 0x44	; 68
    318a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	8f 83       	std	Y+7, r24	; 0x07
    3194:	98 87       	std	Y+8, r25	; 0x08
    3196:	a9 87       	std	Y+9, r26	; 0x09
    3198:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    319a:	6f 81       	ldd	r22, Y+7	; 0x07
    319c:	78 85       	ldd	r23, Y+8	; 0x08
    319e:	89 85       	ldd	r24, Y+9	; 0x09
    31a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	40 e8       	ldi	r20, 0x80	; 128
    31a8:	5f e3       	ldi	r21, 0x3F	; 63
    31aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ae:	88 23       	and	r24, r24
    31b0:	2c f4       	brge	.+10     	; 0x31bc <displayMaxLoginAttemptsReached+0x82>
		__ticks = 1;
    31b2:	81 e0       	ldi	r24, 0x01	; 1
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	9e 83       	std	Y+6, r25	; 0x06
    31b8:	8d 83       	std	Y+5, r24	; 0x05
    31ba:	3f c0       	rjmp	.+126    	; 0x323a <displayMaxLoginAttemptsReached+0x100>
	else if (__tmp > 65535)
    31bc:	6f 81       	ldd	r22, Y+7	; 0x07
    31be:	78 85       	ldd	r23, Y+8	; 0x08
    31c0:	89 85       	ldd	r24, Y+9	; 0x09
    31c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	3f ef       	ldi	r19, 0xFF	; 255
    31c8:	4f e7       	ldi	r20, 0x7F	; 127
    31ca:	57 e4       	ldi	r21, 0x47	; 71
    31cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d0:	18 16       	cp	r1, r24
    31d2:	4c f5       	brge	.+82     	; 0x3226 <displayMaxLoginAttemptsReached+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31da:	9e 85       	ldd	r25, Y+14	; 0x0e
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	40 e2       	ldi	r20, 0x20	; 32
    31e2:	51 e4       	ldi	r21, 0x41	; 65
    31e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	bc 01       	movw	r22, r24
    31ee:	cd 01       	movw	r24, r26
    31f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	9e 83       	std	Y+6, r25	; 0x06
    31fa:	8d 83       	std	Y+5, r24	; 0x05
    31fc:	0f c0       	rjmp	.+30     	; 0x321c <displayMaxLoginAttemptsReached+0xe2>
    31fe:	88 ec       	ldi	r24, 0xC8	; 200
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	9c 83       	std	Y+4, r25	; 0x04
    3204:	8b 83       	std	Y+3, r24	; 0x03
    3206:	8b 81       	ldd	r24, Y+3	; 0x03
    3208:	9c 81       	ldd	r25, Y+4	; 0x04
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	f1 f7       	brne	.-4      	; 0x320a <displayMaxLoginAttemptsReached+0xd0>
    320e:	9c 83       	std	Y+4, r25	; 0x04
    3210:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3212:	8d 81       	ldd	r24, Y+5	; 0x05
    3214:	9e 81       	ldd	r25, Y+6	; 0x06
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	9e 83       	std	Y+6, r25	; 0x06
    321a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321c:	8d 81       	ldd	r24, Y+5	; 0x05
    321e:	9e 81       	ldd	r25, Y+6	; 0x06
    3220:	00 97       	sbiw	r24, 0x00	; 0
    3222:	69 f7       	brne	.-38     	; 0x31fe <displayMaxLoginAttemptsReached+0xc4>
    3224:	14 c0       	rjmp	.+40     	; 0x324e <displayMaxLoginAttemptsReached+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3226:	6f 81       	ldd	r22, Y+7	; 0x07
    3228:	78 85       	ldd	r23, Y+8	; 0x08
    322a:	89 85       	ldd	r24, Y+9	; 0x09
    322c:	9a 85       	ldd	r25, Y+10	; 0x0a
    322e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	9e 83       	std	Y+6, r25	; 0x06
    3238:	8d 83       	std	Y+5, r24	; 0x05
    323a:	8d 81       	ldd	r24, Y+5	; 0x05
    323c:	9e 81       	ldd	r25, Y+6	; 0x06
    323e:	9a 83       	std	Y+2, r25	; 0x02
    3240:	89 83       	std	Y+1, r24	; 0x01
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	9a 81       	ldd	r25, Y+2	; 0x02
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <displayMaxLoginAttemptsReached+0x10c>
    324a:	9a 83       	std	Y+2, r25	; 0x02
    324c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
}
    324e:	2e 96       	adiw	r28, 0x0e	; 14
    3250:	0f b6       	in	r0, 0x3f	; 63
    3252:	f8 94       	cli
    3254:	de bf       	out	0x3e, r29	; 62
    3256:	0f be       	out	0x3f, r0	; 63
    3258:	cd bf       	out	0x3d, r28	; 61
    325a:	cf 91       	pop	r28
    325c:	df 91       	pop	r29
    325e:	08 95       	ret

00003260 <displayWelcomeMessage>:


//******************************************************//


void displayWelcomeMessage() {
    3260:	df 93       	push	r29
    3262:	cf 93       	push	r28
    3264:	cd b7       	in	r28, 0x3d	; 61
    3266:	de b7       	in	r29, 0x3e	; 62
    3268:	2e 97       	sbiw	r28, 0x0e	; 14
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	f8 94       	cli
    326e:	de bf       	out	0x3e, r29	; 62
    3270:	0f be       	out	0x3f, r0	; 63
    3272:	cd bf       	out	0x3d, r28	; 61
    USART_VoidSendString((u8*)"Welcome\r\n");
    3274:	87 ec       	ldi	r24, 0xC7	; 199
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	aa ef       	ldi	r26, 0xFA	; 250
    3282:	b3 e4       	ldi	r27, 0x43	; 67
    3284:	8b 87       	std	Y+11, r24	; 0x0b
    3286:	9c 87       	std	Y+12, r25	; 0x0c
    3288:	ad 87       	std	Y+13, r26	; 0x0d
    328a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    328c:	6b 85       	ldd	r22, Y+11	; 0x0b
    328e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3290:	8d 85       	ldd	r24, Y+13	; 0x0d
    3292:	9e 85       	ldd	r25, Y+14	; 0x0e
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	4a ef       	ldi	r20, 0xFA	; 250
    329a:	54 e4       	ldi	r21, 0x44	; 68
    329c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	8f 83       	std	Y+7, r24	; 0x07
    32a6:	98 87       	std	Y+8, r25	; 0x08
    32a8:	a9 87       	std	Y+9, r26	; 0x09
    32aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32ac:	6f 81       	ldd	r22, Y+7	; 0x07
    32ae:	78 85       	ldd	r23, Y+8	; 0x08
    32b0:	89 85       	ldd	r24, Y+9	; 0x09
    32b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 e8       	ldi	r20, 0x80	; 128
    32ba:	5f e3       	ldi	r21, 0x3F	; 63
    32bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32c0:	88 23       	and	r24, r24
    32c2:	2c f4       	brge	.+10     	; 0x32ce <displayWelcomeMessage+0x6e>
		__ticks = 1;
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	9e 83       	std	Y+6, r25	; 0x06
    32ca:	8d 83       	std	Y+5, r24	; 0x05
    32cc:	3f c0       	rjmp	.+126    	; 0x334c <displayWelcomeMessage+0xec>
	else if (__tmp > 65535)
    32ce:	6f 81       	ldd	r22, Y+7	; 0x07
    32d0:	78 85       	ldd	r23, Y+8	; 0x08
    32d2:	89 85       	ldd	r24, Y+9	; 0x09
    32d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	3f ef       	ldi	r19, 0xFF	; 255
    32da:	4f e7       	ldi	r20, 0x7F	; 127
    32dc:	57 e4       	ldi	r21, 0x47	; 71
    32de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32e2:	18 16       	cp	r1, r24
    32e4:	4c f5       	brge	.+82     	; 0x3338 <displayWelcomeMessage+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	40 e2       	ldi	r20, 0x20	; 32
    32f4:	51 e4       	ldi	r21, 0x41	; 65
    32f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	bc 01       	movw	r22, r24
    3300:	cd 01       	movw	r24, r26
    3302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	9e 83       	std	Y+6, r25	; 0x06
    330c:	8d 83       	std	Y+5, r24	; 0x05
    330e:	0f c0       	rjmp	.+30     	; 0x332e <displayWelcomeMessage+0xce>
    3310:	88 ec       	ldi	r24, 0xC8	; 200
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	9c 83       	std	Y+4, r25	; 0x04
    3316:	8b 83       	std	Y+3, r24	; 0x03
    3318:	8b 81       	ldd	r24, Y+3	; 0x03
    331a:	9c 81       	ldd	r25, Y+4	; 0x04
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	f1 f7       	brne	.-4      	; 0x331c <displayWelcomeMessage+0xbc>
    3320:	9c 83       	std	Y+4, r25	; 0x04
    3322:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3324:	8d 81       	ldd	r24, Y+5	; 0x05
    3326:	9e 81       	ldd	r25, Y+6	; 0x06
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	9e 83       	std	Y+6, r25	; 0x06
    332c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    332e:	8d 81       	ldd	r24, Y+5	; 0x05
    3330:	9e 81       	ldd	r25, Y+6	; 0x06
    3332:	00 97       	sbiw	r24, 0x00	; 0
    3334:	69 f7       	brne	.-38     	; 0x3310 <displayWelcomeMessage+0xb0>
    3336:	14 c0       	rjmp	.+40     	; 0x3360 <displayWelcomeMessage+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3338:	6f 81       	ldd	r22, Y+7	; 0x07
    333a:	78 85       	ldd	r23, Y+8	; 0x08
    333c:	89 85       	ldd	r24, Y+9	; 0x09
    333e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	9e 83       	std	Y+6, r25	; 0x06
    334a:	8d 83       	std	Y+5, r24	; 0x05
    334c:	8d 81       	ldd	r24, Y+5	; 0x05
    334e:	9e 81       	ldd	r25, Y+6	; 0x06
    3350:	9a 83       	std	Y+2, r25	; 0x02
    3352:	89 83       	std	Y+1, r24	; 0x01
    3354:	89 81       	ldd	r24, Y+1	; 0x01
    3356:	9a 81       	ldd	r25, Y+2	; 0x02
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	f1 f7       	brne	.-4      	; 0x3358 <displayWelcomeMessage+0xf8>
    335c:	9a 83       	std	Y+2, r25	; 0x02
    335e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);
}
    3360:	2e 96       	adiw	r28, 0x0e	; 14
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	cf 91       	pop	r28
    336e:	df 91       	pop	r29
    3370:	08 95       	ret

00003372 <showRoomSelection>:

void showRoomSelection() {
    3372:	df 93       	push	r29
    3374:	cf 93       	push	r28
    3376:	00 d0       	rcall	.+0      	; 0x3378 <showRoomSelection+0x6>
    3378:	0f 92       	push	r0
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
    USART_VoidSendString((u8*)"Select a room:\r\n");
    337e:	81 ed       	ldi	r24, 0xD1	; 209
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>
    USART_VoidSendString((u8*)"1: Room 1\r\n");
    3386:	82 ee       	ldi	r24, 0xE2	; 226
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>
    USART_VoidSendString((u8*)"2: Room 2\r\n");
    338e:	8e ee       	ldi	r24, 0xEE	; 238
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>
    3396:	3d c0       	rjmp	.+122    	; 0x3412 <showRoomSelection+0xa0>

    while (selectedRoom == 0) {
        u8 key;
        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    3398:	ce 01       	movw	r24, r28
    339a:	01 96       	adiw	r24, 0x01	; 1
    339c:	0e 94 61 14 	call	0x28c2	; 0x28c2 <Keypad_enu_getKey>
    33a0:	81 30       	cpi	r24, 0x01	; 1
    33a2:	b9 f5       	brne	.+110    	; 0x3412 <showRoomSelection+0xa0>
    33a4:	89 81       	ldd	r24, Y+1	; 0x01
    33a6:	8f 3f       	cpi	r24, 0xFF	; 255
    33a8:	a1 f1       	breq	.+104    	; 0x3412 <showRoomSelection+0xa0>
            switch (key) {
    33aa:	89 81       	ldd	r24, Y+1	; 0x01
    33ac:	28 2f       	mov	r18, r24
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	3b 83       	std	Y+3, r19	; 0x03
    33b2:	2a 83       	std	Y+2, r18	; 0x02
    33b4:	8a 81       	ldd	r24, Y+2	; 0x02
    33b6:	9b 81       	ldd	r25, Y+3	; 0x03
    33b8:	81 33       	cpi	r24, 0x31	; 49
    33ba:	91 05       	cpc	r25, r1
    33bc:	31 f0       	breq	.+12     	; 0x33ca <showRoomSelection+0x58>
    33be:	2a 81       	ldd	r18, Y+2	; 0x02
    33c0:	3b 81       	ldd	r19, Y+3	; 0x03
    33c2:	22 33       	cpi	r18, 0x32	; 50
    33c4:	31 05       	cpc	r19, r1
    33c6:	89 f0       	breq	.+34     	; 0x33ea <showRoomSelection+0x78>
    33c8:	20 c0       	rjmp	.+64     	; 0x340a <showRoomSelection+0x98>
                case '1':
                    selectedRoom = 1;
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	80 93 8e 03 	sts	0x038E, r24
                    LCD_CLR();
    33d0:	0e 94 12 14 	call	0x2824	; 0x2824 <LCD_CLR>
                    LCD_8_bit_sendString("Room 1");
    33d4:	8a ef       	ldi	r24, 0xFA	; 250
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
                    USART_VoidSendString((u8*)"Room 1 Selected\r\n");
    33dc:	81 e0       	ldi	r24, 0x01	; 1
    33de:	91 e0       	ldi	r25, 0x01	; 1
    33e0:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>
                    showOptions();
    33e4:	0e 94 14 1a 	call	0x3428	; 0x3428 <showOptions>
    33e8:	14 c0       	rjmp	.+40     	; 0x3412 <showRoomSelection+0xa0>
                    break;
                case '2':
                    selectedRoom = 2;
    33ea:	82 e0       	ldi	r24, 0x02	; 2
    33ec:	80 93 8e 03 	sts	0x038E, r24
                    LCD_CLR();
    33f0:	0e 94 12 14 	call	0x2824	; 0x2824 <LCD_CLR>
                    LCD_8_bit_sendString("Room 2");
    33f4:	83 e1       	ldi	r24, 0x13	; 19
    33f6:	91 e0       	ldi	r25, 0x01	; 1
    33f8:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
                    USART_VoidSendString((u8*)"Room 2 Selected\r\n");
    33fc:	8a e1       	ldi	r24, 0x1A	; 26
    33fe:	91 e0       	ldi	r25, 0x01	; 1
    3400:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>
                    showOptions();
    3404:	0e 94 14 1a 	call	0x3428	; 0x3428 <showOptions>
    3408:	04 c0       	rjmp	.+8      	; 0x3412 <showRoomSelection+0xa0>
                    break;
                default:
                    USART_VoidSendString((u8*)"Invalid selection, try again\r\n");
    340a:	8c e2       	ldi	r24, 0x2C	; 44
    340c:	91 e0       	ldi	r25, 0x01	; 1
    340e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>
void showRoomSelection() {
    USART_VoidSendString((u8*)"Select a room:\r\n");
    USART_VoidSendString((u8*)"1: Room 1\r\n");
    USART_VoidSendString((u8*)"2: Room 2\r\n");

    while (selectedRoom == 0) {
    3412:	80 91 8e 03 	lds	r24, 0x038E
    3416:	88 23       	and	r24, r24
    3418:	09 f4       	brne	.+2      	; 0x341c <showRoomSelection+0xaa>
    341a:	be cf       	rjmp	.-132    	; 0x3398 <showRoomSelection+0x26>
                    USART_VoidSendString((u8*)"Invalid selection, try again\r\n");
                    break;
            }
        }
    }
}
    341c:	0f 90       	pop	r0
    341e:	0f 90       	pop	r0
    3420:	0f 90       	pop	r0
    3422:	cf 91       	pop	r28
    3424:	df 91       	pop	r29
    3426:	08 95       	ret

00003428 <showOptions>:

void showOptions() {
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	00 d0       	rcall	.+0      	; 0x342e <showOptions+0x6>
    342e:	00 d0       	rcall	.+0      	; 0x3430 <showOptions+0x8>
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    USART_VoidSendString((u8*)"1:Temp, 2:Motors,");
    3434:	8b e4       	ldi	r24, 0x4B	; 75
    3436:	91 e0       	ldi	r25, 0x01	; 1
    3438:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>
    USART_VoidSendString((u8*)" 3:LEDs, 4:Logout,");
    343c:	8d e5       	ldi	r24, 0x5D	; 93
    343e:	91 e0       	ldi	r25, 0x01	; 1
    3440:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>
    USART_VoidSendString((u8*)" 5:CLR\n");
    3444:	80 e7       	ldi	r24, 0x70	; 112
    3446:	91 e0       	ldi	r25, 0x01	; 1
    3448:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>

    u8 isLoggedOut = 0;
    344c:	19 82       	std	Y+1, r1	; 0x01
    344e:	3e c0       	rjmp	.+124    	; 0x34cc <showOptions+0xa4>

    while (!isLoggedOut) {
        u8 key;
        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    3450:	ce 01       	movw	r24, r28
    3452:	02 96       	adiw	r24, 0x02	; 2
    3454:	0e 94 61 14 	call	0x28c2	; 0x28c2 <Keypad_enu_getKey>
    3458:	81 30       	cpi	r24, 0x01	; 1
    345a:	c1 f5       	brne	.+112    	; 0x34cc <showOptions+0xa4>
    345c:	8a 81       	ldd	r24, Y+2	; 0x02
    345e:	8f 3f       	cpi	r24, 0xFF	; 255
    3460:	a9 f1       	breq	.+106    	; 0x34cc <showOptions+0xa4>
            switch (key) {
    3462:	8a 81       	ldd	r24, Y+2	; 0x02
    3464:	28 2f       	mov	r18, r24
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	3c 83       	std	Y+4, r19	; 0x04
    346a:	2b 83       	std	Y+3, r18	; 0x03
    346c:	8b 81       	ldd	r24, Y+3	; 0x03
    346e:	9c 81       	ldd	r25, Y+4	; 0x04
    3470:	83 33       	cpi	r24, 0x33	; 51
    3472:	91 05       	cpc	r25, r1
    3474:	09 f1       	breq	.+66     	; 0x34b8 <showOptions+0x90>
    3476:	2b 81       	ldd	r18, Y+3	; 0x03
    3478:	3c 81       	ldd	r19, Y+4	; 0x04
    347a:	24 33       	cpi	r18, 0x34	; 52
    347c:	31 05       	cpc	r19, r1
    347e:	5c f4       	brge	.+22     	; 0x3496 <showOptions+0x6e>
    3480:	8b 81       	ldd	r24, Y+3	; 0x03
    3482:	9c 81       	ldd	r25, Y+4	; 0x04
    3484:	81 33       	cpi	r24, 0x31	; 49
    3486:	91 05       	cpc	r25, r1
    3488:	89 f0       	breq	.+34     	; 0x34ac <showOptions+0x84>
    348a:	2b 81       	ldd	r18, Y+3	; 0x03
    348c:	3c 81       	ldd	r19, Y+4	; 0x04
    348e:	22 33       	cpi	r18, 0x32	; 50
    3490:	31 05       	cpc	r19, r1
    3492:	79 f0       	breq	.+30     	; 0x34b2 <showOptions+0x8a>
    3494:	1b c0       	rjmp	.+54     	; 0x34cc <showOptions+0xa4>
    3496:	8b 81       	ldd	r24, Y+3	; 0x03
    3498:	9c 81       	ldd	r25, Y+4	; 0x04
    349a:	84 33       	cpi	r24, 0x34	; 52
    349c:	91 05       	cpc	r25, r1
    349e:	79 f0       	breq	.+30     	; 0x34be <showOptions+0x96>
    34a0:	2b 81       	ldd	r18, Y+3	; 0x03
    34a2:	3c 81       	ldd	r19, Y+4	; 0x04
    34a4:	23 34       	cpi	r18, 0x43	; 67
    34a6:	31 05       	cpc	r19, r1
    34a8:	69 f0       	breq	.+26     	; 0x34c4 <showOptions+0x9c>
    34aa:	10 c0       	rjmp	.+32     	; 0x34cc <showOptions+0xa4>
                case '1':
                    controlTemp();
    34ac:	0e 94 a3 1b 	call	0x3746	; 0x3746 <controlTemp>
    34b0:	0d c0       	rjmp	.+26     	; 0x34cc <showOptions+0xa4>
                    break;
                case '2':
                    controlMotor();
    34b2:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <controlMotor>
    34b6:	0a c0       	rjmp	.+20     	; 0x34cc <showOptions+0xa4>
                    break;
                case '3':
                    controlLED();
    34b8:	0e 94 0a 1b 	call	0x3614	; 0x3614 <controlLED>
    34bc:	07 c0       	rjmp	.+14     	; 0x34cc <showOptions+0xa4>
                    break;
                case '4':
                    myAPP();
    34be:	0e 94 80 15 	call	0x2b00	; 0x2b00 <myAPP>
    34c2:	04 c0       	rjmp	.+8      	; 0x34cc <showOptions+0xa4>
                    break;
                case 'C':
                    LCD_CLR();
    34c4:	0e 94 12 14 	call	0x2824	; 0x2824 <LCD_CLR>
                    showOptions();
    34c8:	0e 94 14 1a 	call	0x3428	; 0x3428 <showOptions>
    USART_VoidSendString((u8*)" 3:LEDs, 4:Logout,");
    USART_VoidSendString((u8*)" 5:CLR\n");

    u8 isLoggedOut = 0;

    while (!isLoggedOut) {
    34cc:	89 81       	ldd	r24, Y+1	; 0x01
    34ce:	88 23       	and	r24, r24
    34d0:	09 f4       	brne	.+2      	; 0x34d4 <showOptions+0xac>
    34d2:	be cf       	rjmp	.-132    	; 0x3450 <showOptions+0x28>
                default:
                    break;
            }
        }
    }
}
    34d4:	0f 90       	pop	r0
    34d6:	0f 90       	pop	r0
    34d8:	0f 90       	pop	r0
    34da:	0f 90       	pop	r0
    34dc:	cf 91       	pop	r28
    34de:	df 91       	pop	r29
    34e0:	08 95       	ret

000034e2 <controlMotor>:

void controlMotor() {
    34e2:	df 93       	push	r29
    34e4:	cf 93       	push	r28
    34e6:	00 d0       	rcall	.+0      	; 0x34e8 <controlMotor+0x6>
    34e8:	00 d0       	rcall	.+0      	; 0x34ea <controlMotor+0x8>
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
    USART_VoidSendString((u8*)"1:Motor ON, 2:Motor OFF\n");
    34ee:	88 e7       	ldi	r24, 0x78	; 120
    34f0:	91 e0       	ldi	r25, 0x01	; 1
    34f2:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>

    u8 motorControl = 1;
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	89 83       	std	Y+1, r24	; 0x01
    34fa:	81 c0       	rjmp	.+258    	; 0x35fe <controlMotor+0x11c>

    while (motorControl) {
        u8 key;
        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    34fc:	ce 01       	movw	r24, r28
    34fe:	02 96       	adiw	r24, 0x02	; 2
    3500:	0e 94 61 14 	call	0x28c2	; 0x28c2 <Keypad_enu_getKey>
    3504:	81 30       	cpi	r24, 0x01	; 1
    3506:	09 f0       	breq	.+2      	; 0x350a <controlMotor+0x28>
    3508:	7a c0       	rjmp	.+244    	; 0x35fe <controlMotor+0x11c>
    350a:	8a 81       	ldd	r24, Y+2	; 0x02
    350c:	8f 3f       	cpi	r24, 0xFF	; 255
    350e:	09 f4       	brne	.+2      	; 0x3512 <controlMotor+0x30>
    3510:	76 c0       	rjmp	.+236    	; 0x35fe <controlMotor+0x11c>
            if (key == 'C') {
    3512:	8a 81       	ldd	r24, Y+2	; 0x02
    3514:	83 34       	cpi	r24, 0x43	; 67
    3516:	21 f4       	brne	.+8      	; 0x3520 <controlMotor+0x3e>
                motorControl = 0;
    3518:	19 82       	std	Y+1, r1	; 0x01
                showOptions();
    351a:	0e 94 14 1a 	call	0x3428	; 0x3428 <showOptions>
    351e:	6f c0       	rjmp	.+222    	; 0x35fe <controlMotor+0x11c>
            } else {
                switch (key) {
    3520:	8a 81       	ldd	r24, Y+2	; 0x02
    3522:	28 2f       	mov	r18, r24
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	3c 83       	std	Y+4, r19	; 0x04
    3528:	2b 83       	std	Y+3, r18	; 0x03
    352a:	8b 81       	ldd	r24, Y+3	; 0x03
    352c:	9c 81       	ldd	r25, Y+4	; 0x04
    352e:	81 33       	cpi	r24, 0x31	; 49
    3530:	91 05       	cpc	r25, r1
    3532:	31 f0       	breq	.+12     	; 0x3540 <controlMotor+0x5e>
    3534:	2b 81       	ldd	r18, Y+3	; 0x03
    3536:	3c 81       	ldd	r19, Y+4	; 0x04
    3538:	22 33       	cpi	r18, 0x32	; 50
    353a:	31 05       	cpc	r19, r1
    353c:	69 f1       	breq	.+90     	; 0x3598 <controlMotor+0xb6>
    353e:	5b c0       	rjmp	.+182    	; 0x35f6 <controlMotor+0x114>
                    case '1':
                        if (selectedRoom == 1) {
    3540:	80 91 8e 03 	lds	r24, 0x038E
    3544:	81 30       	cpi	r24, 0x01	; 1
    3546:	81 f4       	brne	.+32     	; 0x3568 <controlMotor+0x86>
                            DIO_write(PORT_A, PIN1, HIGH);
    3548:	81 e4       	ldi	r24, 0x41	; 65
    354a:	61 e0       	ldi	r22, 0x01	; 1
    354c:	41 e0       	ldi	r20, 0x01	; 1
    354e:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>
                            LCD_8_bit_GoToPos(1, 0);
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	60 e0       	ldi	r22, 0x00	; 0
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	0e 94 c2 13 	call	0x2784	; 0x2784 <LCD_8_bit_GoToPos>
                            LCD_8_bit_sendString("Motor 1 ON");
    355e:	81 e9       	ldi	r24, 0x91	; 145
    3560:	91 e0       	ldi	r25, 0x01	; 1
    3562:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
    3566:	13 c0       	rjmp	.+38     	; 0x358e <controlMotor+0xac>
                        } else if (selectedRoom == 2) {
    3568:	80 91 8e 03 	lds	r24, 0x038E
    356c:	82 30       	cpi	r24, 0x02	; 2
    356e:	79 f4       	brne	.+30     	; 0x358e <controlMotor+0xac>
                            DIO_write(PORT_A, PIN0, HIGH);
    3570:	81 e4       	ldi	r24, 0x41	; 65
    3572:	60 e0       	ldi	r22, 0x00	; 0
    3574:	41 e0       	ldi	r20, 0x01	; 1
    3576:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>
                            LCD_8_bit_GoToPos(1, 0);
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	60 e0       	ldi	r22, 0x00	; 0
    3580:	70 e0       	ldi	r23, 0x00	; 0
    3582:	0e 94 c2 13 	call	0x2784	; 0x2784 <LCD_8_bit_GoToPos>
                            LCD_8_bit_sendString("Motor 2 ON");
    3586:	8c e9       	ldi	r24, 0x9C	; 156
    3588:	91 e0       	ldi	r25, 0x01	; 1
    358a:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
                        }
                        USART_VoidSendString((u8*)"Motor ON\n");
    358e:	87 ea       	ldi	r24, 0xA7	; 167
    3590:	91 e0       	ldi	r25, 0x01	; 1
    3592:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>
    3596:	33 c0       	rjmp	.+102    	; 0x35fe <controlMotor+0x11c>
                        break;
                    case '2':
                        if (selectedRoom == 1) {
    3598:	80 91 8e 03 	lds	r24, 0x038E
    359c:	81 30       	cpi	r24, 0x01	; 1
    359e:	81 f4       	brne	.+32     	; 0x35c0 <controlMotor+0xde>
                            DIO_write(PORT_A, PIN1, LOW);
    35a0:	81 e4       	ldi	r24, 0x41	; 65
    35a2:	61 e0       	ldi	r22, 0x01	; 1
    35a4:	40 e0       	ldi	r20, 0x00	; 0
    35a6:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>
                            LCD_8_bit_GoToPos(1, 0);
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	60 e0       	ldi	r22, 0x00	; 0
    35b0:	70 e0       	ldi	r23, 0x00	; 0
    35b2:	0e 94 c2 13 	call	0x2784	; 0x2784 <LCD_8_bit_GoToPos>
                            LCD_8_bit_sendString("Motor 1 OFF");
    35b6:	81 eb       	ldi	r24, 0xB1	; 177
    35b8:	91 e0       	ldi	r25, 0x01	; 1
    35ba:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
    35be:	13 c0       	rjmp	.+38     	; 0x35e6 <controlMotor+0x104>
                        } else if (selectedRoom == 2) {
    35c0:	80 91 8e 03 	lds	r24, 0x038E
    35c4:	82 30       	cpi	r24, 0x02	; 2
    35c6:	79 f4       	brne	.+30     	; 0x35e6 <controlMotor+0x104>
                            DIO_write(PORT_A, PIN0, LOW);
    35c8:	81 e4       	ldi	r24, 0x41	; 65
    35ca:	60 e0       	ldi	r22, 0x00	; 0
    35cc:	40 e0       	ldi	r20, 0x00	; 0
    35ce:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>
                            LCD_8_bit_GoToPos(1, 0);
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	60 e0       	ldi	r22, 0x00	; 0
    35d8:	70 e0       	ldi	r23, 0x00	; 0
    35da:	0e 94 c2 13 	call	0x2784	; 0x2784 <LCD_8_bit_GoToPos>
                            LCD_8_bit_sendString("Motor 2 OFF");
    35de:	8d eb       	ldi	r24, 0xBD	; 189
    35e0:	91 e0       	ldi	r25, 0x01	; 1
    35e2:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
                        }
                        USART_VoidSendString((u8*)"Motor OFF\n");
    35e6:	89 ec       	ldi	r24, 0xC9	; 201
    35e8:	91 e0       	ldi	r25, 0x01	; 1
    35ea:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>
                        motorControl = 0;
    35ee:	19 82       	std	Y+1, r1	; 0x01
                        showOptions();
    35f0:	0e 94 14 1a 	call	0x3428	; 0x3428 <showOptions>
    35f4:	04 c0       	rjmp	.+8      	; 0x35fe <controlMotor+0x11c>
                        break;
                    default:
                        USART_VoidSendString((u8*)"Invalid selection, try again\n");
    35f6:	84 ed       	ldi	r24, 0xD4	; 212
    35f8:	91 e0       	ldi	r25, 0x01	; 1
    35fa:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>
void controlMotor() {
    USART_VoidSendString((u8*)"1:Motor ON, 2:Motor OFF\n");

    u8 motorControl = 1;

    while (motorControl) {
    35fe:	89 81       	ldd	r24, Y+1	; 0x01
    3600:	88 23       	and	r24, r24
    3602:	09 f0       	breq	.+2      	; 0x3606 <controlMotor+0x124>
    3604:	7b cf       	rjmp	.-266    	; 0x34fc <controlMotor+0x1a>
                        break;
                }
            }
        }
    }
}
    3606:	0f 90       	pop	r0
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	0f 90       	pop	r0
    360e:	cf 91       	pop	r28
    3610:	df 91       	pop	r29
    3612:	08 95       	ret

00003614 <controlLED>:

void controlLED() {
    3614:	df 93       	push	r29
    3616:	cf 93       	push	r28
    3618:	00 d0       	rcall	.+0      	; 0x361a <controlLED+0x6>
    361a:	00 d0       	rcall	.+0      	; 0x361c <controlLED+0x8>
    361c:	cd b7       	in	r28, 0x3d	; 61
    361e:	de b7       	in	r29, 0x3e	; 62
    USART_VoidSendString((u8*)"1:LED ON, 2:LED OFF\n");
    3620:	82 ef       	ldi	r24, 0xF2	; 242
    3622:	91 e0       	ldi	r25, 0x01	; 1
    3624:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>

    u8 ledControl = 1;
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	89 83       	std	Y+1, r24	; 0x01
    362c:	81 c0       	rjmp	.+258    	; 0x3730 <controlLED+0x11c>

    while (ledControl) {
        u8 key;
        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    362e:	ce 01       	movw	r24, r28
    3630:	02 96       	adiw	r24, 0x02	; 2
    3632:	0e 94 61 14 	call	0x28c2	; 0x28c2 <Keypad_enu_getKey>
    3636:	81 30       	cpi	r24, 0x01	; 1
    3638:	09 f0       	breq	.+2      	; 0x363c <controlLED+0x28>
    363a:	7a c0       	rjmp	.+244    	; 0x3730 <controlLED+0x11c>
    363c:	8a 81       	ldd	r24, Y+2	; 0x02
    363e:	8f 3f       	cpi	r24, 0xFF	; 255
    3640:	09 f4       	brne	.+2      	; 0x3644 <controlLED+0x30>
    3642:	76 c0       	rjmp	.+236    	; 0x3730 <controlLED+0x11c>
            if (key == 'C') {
    3644:	8a 81       	ldd	r24, Y+2	; 0x02
    3646:	83 34       	cpi	r24, 0x43	; 67
    3648:	21 f4       	brne	.+8      	; 0x3652 <controlLED+0x3e>
                ledControl = 0;
    364a:	19 82       	std	Y+1, r1	; 0x01
                showOptions();
    364c:	0e 94 14 1a 	call	0x3428	; 0x3428 <showOptions>
    3650:	6f c0       	rjmp	.+222    	; 0x3730 <controlLED+0x11c>
            } else {
                switch (key) {
    3652:	8a 81       	ldd	r24, Y+2	; 0x02
    3654:	28 2f       	mov	r18, r24
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	3c 83       	std	Y+4, r19	; 0x04
    365a:	2b 83       	std	Y+3, r18	; 0x03
    365c:	8b 81       	ldd	r24, Y+3	; 0x03
    365e:	9c 81       	ldd	r25, Y+4	; 0x04
    3660:	81 33       	cpi	r24, 0x31	; 49
    3662:	91 05       	cpc	r25, r1
    3664:	31 f0       	breq	.+12     	; 0x3672 <controlLED+0x5e>
    3666:	2b 81       	ldd	r18, Y+3	; 0x03
    3668:	3c 81       	ldd	r19, Y+4	; 0x04
    366a:	22 33       	cpi	r18, 0x32	; 50
    366c:	31 05       	cpc	r19, r1
    366e:	69 f1       	breq	.+90     	; 0x36ca <controlLED+0xb6>
    3670:	5b c0       	rjmp	.+182    	; 0x3728 <controlLED+0x114>
                    case '1':
                        if (selectedRoom == 1) {
    3672:	80 91 8e 03 	lds	r24, 0x038E
    3676:	81 30       	cpi	r24, 0x01	; 1
    3678:	81 f4       	brne	.+32     	; 0x369a <controlLED+0x86>
                            DIO_write(PORT_A, PIN5, HIGH);
    367a:	81 e4       	ldi	r24, 0x41	; 65
    367c:	65 e0       	ldi	r22, 0x05	; 5
    367e:	41 e0       	ldi	r20, 0x01	; 1
    3680:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>
                            LCD_8_bit_GoToPos(1, 0);
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	60 e0       	ldi	r22, 0x00	; 0
    368a:	70 e0       	ldi	r23, 0x00	; 0
    368c:	0e 94 c2 13 	call	0x2784	; 0x2784 <LCD_8_bit_GoToPos>
                            LCD_8_bit_sendString("LED 1 ON");
    3690:	87 e0       	ldi	r24, 0x07	; 7
    3692:	92 e0       	ldi	r25, 0x02	; 2
    3694:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
    3698:	13 c0       	rjmp	.+38     	; 0x36c0 <controlLED+0xac>
                        } else if (selectedRoom == 2) {
    369a:	80 91 8e 03 	lds	r24, 0x038E
    369e:	82 30       	cpi	r24, 0x02	; 2
    36a0:	79 f4       	brne	.+30     	; 0x36c0 <controlLED+0xac>
                            DIO_write(PORT_A, PIN0, HIGH);
    36a2:	81 e4       	ldi	r24, 0x41	; 65
    36a4:	60 e0       	ldi	r22, 0x00	; 0
    36a6:	41 e0       	ldi	r20, 0x01	; 1
    36a8:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>
                            LCD_8_bit_GoToPos(1, 0);
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	60 e0       	ldi	r22, 0x00	; 0
    36b2:	70 e0       	ldi	r23, 0x00	; 0
    36b4:	0e 94 c2 13 	call	0x2784	; 0x2784 <LCD_8_bit_GoToPos>
                            LCD_8_bit_sendString("LED 2 ON");
    36b8:	80 e1       	ldi	r24, 0x10	; 16
    36ba:	92 e0       	ldi	r25, 0x02	; 2
    36bc:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
                        }
                        USART_VoidSendString((u8*)"LED ON\n");
    36c0:	89 e1       	ldi	r24, 0x19	; 25
    36c2:	92 e0       	ldi	r25, 0x02	; 2
    36c4:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>
    36c8:	33 c0       	rjmp	.+102    	; 0x3730 <controlLED+0x11c>
                        break;

                    case '2':
                        if (selectedRoom == 1) {
    36ca:	80 91 8e 03 	lds	r24, 0x038E
    36ce:	81 30       	cpi	r24, 0x01	; 1
    36d0:	81 f4       	brne	.+32     	; 0x36f2 <controlLED+0xde>
                            DIO_write(PORT_A, PIN5, LOW);
    36d2:	81 e4       	ldi	r24, 0x41	; 65
    36d4:	65 e0       	ldi	r22, 0x05	; 5
    36d6:	40 e0       	ldi	r20, 0x00	; 0
    36d8:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>
                            LCD_8_bit_GoToPos(1, 0);
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	60 e0       	ldi	r22, 0x00	; 0
    36e2:	70 e0       	ldi	r23, 0x00	; 0
    36e4:	0e 94 c2 13 	call	0x2784	; 0x2784 <LCD_8_bit_GoToPos>
                            LCD_8_bit_sendString("LED 1 OFF");
    36e8:	81 e2       	ldi	r24, 0x21	; 33
    36ea:	92 e0       	ldi	r25, 0x02	; 2
    36ec:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
    36f0:	13 c0       	rjmp	.+38     	; 0x3718 <controlLED+0x104>
                        } else if (selectedRoom == 2) {
    36f2:	80 91 8e 03 	lds	r24, 0x038E
    36f6:	82 30       	cpi	r24, 0x02	; 2
    36f8:	79 f4       	brne	.+30     	; 0x3718 <controlLED+0x104>
                            DIO_write(PORT_A, PIN0, LOW);
    36fa:	81 e4       	ldi	r24, 0x41	; 65
    36fc:	60 e0       	ldi	r22, 0x00	; 0
    36fe:	40 e0       	ldi	r20, 0x00	; 0
    3700:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>
                            LCD_8_bit_GoToPos(1, 0);
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	70 e0       	ldi	r23, 0x00	; 0
    370c:	0e 94 c2 13 	call	0x2784	; 0x2784 <LCD_8_bit_GoToPos>
                            LCD_8_bit_sendString("LED 2 OFF");
    3710:	8b e2       	ldi	r24, 0x2B	; 43
    3712:	92 e0       	ldi	r25, 0x02	; 2
    3714:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
                        }
                        USART_VoidSendString((u8*)"LED OFF\n");
    3718:	85 e3       	ldi	r24, 0x35	; 53
    371a:	92 e0       	ldi	r25, 0x02	; 2
    371c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>
                        ledControl = 0;
    3720:	19 82       	std	Y+1, r1	; 0x01
                        showOptions();
    3722:	0e 94 14 1a 	call	0x3428	; 0x3428 <showOptions>
    3726:	04 c0       	rjmp	.+8      	; 0x3730 <controlLED+0x11c>
                        break;
                    default:
                        USART_VoidSendString((u8*)"Invalid selection, try again\n");
    3728:	84 ed       	ldi	r24, 0xD4	; 212
    372a:	91 e0       	ldi	r25, 0x01	; 1
    372c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <USART_VoidSendString>
void controlLED() {
    USART_VoidSendString((u8*)"1:LED ON, 2:LED OFF\n");

    u8 ledControl = 1;

    while (ledControl) {
    3730:	89 81       	ldd	r24, Y+1	; 0x01
    3732:	88 23       	and	r24, r24
    3734:	09 f0       	breq	.+2      	; 0x3738 <controlLED+0x124>
    3736:	7b cf       	rjmp	.-266    	; 0x362e <controlLED+0x1a>
                        break;
                }
            }
        }
    }
}
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	0f 90       	pop	r0
    373e:	0f 90       	pop	r0
    3740:	cf 91       	pop	r28
    3742:	df 91       	pop	r29
    3744:	08 95       	ret

00003746 <controlTemp>:
//***********************************************************************??
void controlTemp() {
    3746:	df 93       	push	r29
    3748:	cf 93       	push	r28
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
    374e:	66 97       	sbiw	r28, 0x16	; 22
    3750:	0f b6       	in	r0, 0x3f	; 63
    3752:	f8 94       	cli
    3754:	de bf       	out	0x3e, r29	; 62
    3756:	0f be       	out	0x3f, r0	; 63
    3758:	cd bf       	out	0x3d, r28	; 61
    LCD_CLR();
    375a:	0e 94 12 14 	call	0x2824	; 0x2824 <LCD_CLR>
    LCD_8_bit_sendString("Temperature sensor on");
    375e:	8e e3       	ldi	r24, 0x3E	; 62
    3760:	92 e0       	ldi	r25, 0x02	; 2
    3762:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>

    DIO_write(PORT_A, PIN0, HIGH); // Assume sensor activation or an indicator LED is on PIN0
    3766:	81 e4       	ldi	r24, 0x41	; 65
    3768:	60 e0       	ldi	r22, 0x00	; 0
    376a:	41 e0       	ldi	r20, 0x01	; 1
    376c:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>
    DIO_write(PORT_A, PIN3, HIGH); // Assume another device is on PIN3
    3770:	81 e4       	ldi	r24, 0x41	; 65
    3772:	63 e0       	ldi	r22, 0x03	; 3
    3774:	41 e0       	ldi	r20, 0x01	; 1
    3776:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>

    u8 tempControl = 1;
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	8d 8b       	std	Y+21, r24	; 0x15
    377e:	df c0       	rjmp	.+446    	; 0x393e <controlTemp+0x1f8>

    while (tempControl) {
        u8 key;
        u16 adcValue =  ADC_u16GetChannalResult(2);
    3780:	82 e0       	ldi	r24, 0x02	; 2
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <ADC_u16GetChannalResult>
    3788:	9c 8b       	std	Y+20, r25	; 0x14
    378a:	8b 8b       	std	Y+19, r24	; 0x13
        float temperature = (adcValue / 1024.0) * 500.0; // Convert ADC reading to temperature in Celsius (assuming LM35)
    378c:	8b 89       	ldd	r24, Y+19	; 0x13
    378e:	9c 89       	ldd	r25, Y+20	; 0x14
    3790:	cc 01       	movw	r24, r24
    3792:	a0 e0       	ldi	r26, 0x00	; 0
    3794:	b0 e0       	ldi	r27, 0x00	; 0
    3796:	bc 01       	movw	r22, r24
    3798:	cd 01       	movw	r24, r26
    379a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	bc 01       	movw	r22, r24
    37a4:	cd 01       	movw	r24, r26
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	40 e8       	ldi	r20, 0x80	; 128
    37ac:	54 e4       	ldi	r21, 0x44	; 68
    37ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	bc 01       	movw	r22, r24
    37b8:	cd 01       	movw	r24, r26
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	4a ef       	ldi	r20, 0xFA	; 250
    37c0:	53 e4       	ldi	r21, 0x43	; 67
    37c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c6:	dc 01       	movw	r26, r24
    37c8:	cb 01       	movw	r24, r22
    37ca:	8f 87       	std	Y+15, r24	; 0x0f
    37cc:	98 8b       	std	Y+16, r25	; 0x10
    37ce:	a9 8b       	std	Y+17, r26	; 0x11
    37d0:	ba 8b       	std	Y+18, r27	; 0x12

        if (temperature > 30.0) {
    37d2:	6f 85       	ldd	r22, Y+15	; 0x0f
    37d4:	78 89       	ldd	r23, Y+16	; 0x10
    37d6:	89 89       	ldd	r24, Y+17	; 0x11
    37d8:	9a 89       	ldd	r25, Y+18	; 0x12
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	40 ef       	ldi	r20, 0xF0	; 240
    37e0:	51 e4       	ldi	r21, 0x41	; 65
    37e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37e6:	18 16       	cp	r1, r24
    37e8:	ac f4       	brge	.+42     	; 0x3814 <controlTemp+0xce>
            DIO_write(PORT_A, PIN0, HIGH); // Assume the buzzer is connected to PORT_B and PIN0
    37ea:	81 e4       	ldi	r24, 0x41	; 65
    37ec:	60 e0       	ldi	r22, 0x00	; 0
    37ee:	41 e0       	ldi	r20, 0x01	; 1
    37f0:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>
            DIO_write(PORT_A, PIN3, HIGH); // Assume the lamp is connected to PORT_C and PIN3
    37f4:	81 e4       	ldi	r24, 0x41	; 65
    37f6:	63 e0       	ldi	r22, 0x03	; 3
    37f8:	41 e0       	ldi	r20, 0x01	; 1
    37fa:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>
            LCD_8_bit_GoToPos(1, 0);
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	60 e0       	ldi	r22, 0x00	; 0
    3804:	70 e0       	ldi	r23, 0x00	; 0
    3806:	0e 94 c2 13 	call	0x2784	; 0x2784 <LCD_8_bit_GoToPos>
            LCD_8_bit_sendString("High Temp Alert!"); // Display high temperature alert
    380a:	84 e5       	ldi	r24, 0x54	; 84
    380c:	92 e0       	ldi	r25, 0x02	; 2
    380e:	0e 94 98 13 	call	0x2730	; 0x2730 <LCD_8_bit_sendString>
    3812:	0a c0       	rjmp	.+20     	; 0x3828 <controlTemp+0xe2>
        } else {
            DIO_write(PORT_A, PIN0, LOW); // Turn off buzzer
    3814:	81 e4       	ldi	r24, 0x41	; 65
    3816:	60 e0       	ldi	r22, 0x00	; 0
    3818:	40 e0       	ldi	r20, 0x00	; 0
    381a:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>
            DIO_write(PORT_A, PIN3, LOW); // Turn off lamp
    381e:	81 e4       	ldi	r24, 0x41	; 65
    3820:	63 e0       	ldi	r22, 0x03	; 3
    3822:	40 e0       	ldi	r20, 0x00	; 0
    3824:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>
        }

        if (Keypad_enu_getKey(&key) == STATE_OK && key != KEYPAD_U8_NO_KEY_PRESSED) {
    3828:	ce 01       	movw	r24, r28
    382a:	46 96       	adiw	r24, 0x16	; 22
    382c:	0e 94 61 14 	call	0x28c2	; 0x28c2 <Keypad_enu_getKey>
    3830:	81 30       	cpi	r24, 0x01	; 1
    3832:	99 f4       	brne	.+38     	; 0x385a <controlTemp+0x114>
    3834:	8e 89       	ldd	r24, Y+22	; 0x16
    3836:	8f 3f       	cpi	r24, 0xFF	; 255
    3838:	81 f0       	breq	.+32     	; 0x385a <controlTemp+0x114>
            if (key == 'C') {
    383a:	8e 89       	ldd	r24, Y+22	; 0x16
    383c:	83 34       	cpi	r24, 0x43	; 67
    383e:	69 f4       	brne	.+26     	; 0x385a <controlTemp+0x114>
                DIO_write(PORT_A, PIN0, LOW);
    3840:	81 e4       	ldi	r24, 0x41	; 65
    3842:	60 e0       	ldi	r22, 0x00	; 0
    3844:	40 e0       	ldi	r20, 0x00	; 0
    3846:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>
                DIO_write(PORT_A, PIN3, LOW);
    384a:	81 e4       	ldi	r24, 0x41	; 65
    384c:	63 e0       	ldi	r22, 0x03	; 3
    384e:	40 e0       	ldi	r20, 0x00	; 0
    3850:	0e 94 9c 08 	call	0x1138	; 0x1138 <DIO_write>
                tempControl = 0;
    3854:	1d 8a       	std	Y+21, r1	; 0x15
                showOptions(); // Return to main options menu
    3856:	0e 94 14 1a 	call	0x3428	; 0x3428 <showOptions>
    385a:	80 e0       	ldi	r24, 0x00	; 0
    385c:	90 e6       	ldi	r25, 0x60	; 96
    385e:	aa ee       	ldi	r26, 0xEA	; 234
    3860:	b6 e4       	ldi	r27, 0x46	; 70
    3862:	8b 87       	std	Y+11, r24	; 0x0b
    3864:	9c 87       	std	Y+12, r25	; 0x0c
    3866:	ad 87       	std	Y+13, r26	; 0x0d
    3868:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    386a:	6b 85       	ldd	r22, Y+11	; 0x0b
    386c:	7c 85       	ldd	r23, Y+12	; 0x0c
    386e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3870:	9e 85       	ldd	r25, Y+14	; 0x0e
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	4a ef       	ldi	r20, 0xFA	; 250
    3878:	54 e4       	ldi	r21, 0x44	; 68
    387a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	8f 83       	std	Y+7, r24	; 0x07
    3884:	98 87       	std	Y+8, r25	; 0x08
    3886:	a9 87       	std	Y+9, r26	; 0x09
    3888:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    388a:	6f 81       	ldd	r22, Y+7	; 0x07
    388c:	78 85       	ldd	r23, Y+8	; 0x08
    388e:	89 85       	ldd	r24, Y+9	; 0x09
    3890:	9a 85       	ldd	r25, Y+10	; 0x0a
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e8       	ldi	r20, 0x80	; 128
    3898:	5f e3       	ldi	r21, 0x3F	; 63
    389a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    389e:	88 23       	and	r24, r24
    38a0:	2c f4       	brge	.+10     	; 0x38ac <controlTemp+0x166>
		__ticks = 1;
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	9e 83       	std	Y+6, r25	; 0x06
    38a8:	8d 83       	std	Y+5, r24	; 0x05
    38aa:	3f c0       	rjmp	.+126    	; 0x392a <controlTemp+0x1e4>
	else if (__tmp > 65535)
    38ac:	6f 81       	ldd	r22, Y+7	; 0x07
    38ae:	78 85       	ldd	r23, Y+8	; 0x08
    38b0:	89 85       	ldd	r24, Y+9	; 0x09
    38b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	3f ef       	ldi	r19, 0xFF	; 255
    38b8:	4f e7       	ldi	r20, 0x7F	; 127
    38ba:	57 e4       	ldi	r21, 0x47	; 71
    38bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38c0:	18 16       	cp	r1, r24
    38c2:	4c f5       	brge	.+82     	; 0x3916 <controlTemp+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    38c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    38ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e2       	ldi	r20, 0x20	; 32
    38d2:	51 e4       	ldi	r21, 0x41	; 65
    38d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	bc 01       	movw	r22, r24
    38de:	cd 01       	movw	r24, r26
    38e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	9e 83       	std	Y+6, r25	; 0x06
    38ea:	8d 83       	std	Y+5, r24	; 0x05
    38ec:	0f c0       	rjmp	.+30     	; 0x390c <controlTemp+0x1c6>
    38ee:	88 ec       	ldi	r24, 0xC8	; 200
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	9c 83       	std	Y+4, r25	; 0x04
    38f4:	8b 83       	std	Y+3, r24	; 0x03
    38f6:	8b 81       	ldd	r24, Y+3	; 0x03
    38f8:	9c 81       	ldd	r25, Y+4	; 0x04
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	f1 f7       	brne	.-4      	; 0x38fa <controlTemp+0x1b4>
    38fe:	9c 83       	std	Y+4, r25	; 0x04
    3900:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3902:	8d 81       	ldd	r24, Y+5	; 0x05
    3904:	9e 81       	ldd	r25, Y+6	; 0x06
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	9e 83       	std	Y+6, r25	; 0x06
    390a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390c:	8d 81       	ldd	r24, Y+5	; 0x05
    390e:	9e 81       	ldd	r25, Y+6	; 0x06
    3910:	00 97       	sbiw	r24, 0x00	; 0
    3912:	69 f7       	brne	.-38     	; 0x38ee <controlTemp+0x1a8>
    3914:	14 c0       	rjmp	.+40     	; 0x393e <controlTemp+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3916:	6f 81       	ldd	r22, Y+7	; 0x07
    3918:	78 85       	ldd	r23, Y+8	; 0x08
    391a:	89 85       	ldd	r24, Y+9	; 0x09
    391c:	9a 85       	ldd	r25, Y+10	; 0x0a
    391e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	9e 83       	std	Y+6, r25	; 0x06
    3928:	8d 83       	std	Y+5, r24	; 0x05
    392a:	8d 81       	ldd	r24, Y+5	; 0x05
    392c:	9e 81       	ldd	r25, Y+6	; 0x06
    392e:	9a 83       	std	Y+2, r25	; 0x02
    3930:	89 83       	std	Y+1, r24	; 0x01
    3932:	89 81       	ldd	r24, Y+1	; 0x01
    3934:	9a 81       	ldd	r25, Y+2	; 0x02
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	f1 f7       	brne	.-4      	; 0x3936 <controlTemp+0x1f0>
    393a:	9a 83       	std	Y+2, r25	; 0x02
    393c:	89 83       	std	Y+1, r24	; 0x01
    DIO_write(PORT_A, PIN0, HIGH); // Assume sensor activation or an indicator LED is on PIN0
    DIO_write(PORT_A, PIN3, HIGH); // Assume another device is on PIN3

    u8 tempControl = 1;

    while (tempControl) {
    393e:	8d 89       	ldd	r24, Y+21	; 0x15
    3940:	88 23       	and	r24, r24
    3942:	09 f0       	breq	.+2      	; 0x3946 <controlTemp+0x200>
    3944:	1d cf       	rjmp	.-454    	; 0x3780 <controlTemp+0x3a>
            }
        }

        _delay_ms(30000); // Delay to allow time between readings
    }
}
    3946:	66 96       	adiw	r28, 0x16	; 22
    3948:	0f b6       	in	r0, 0x3f	; 63
    394a:	f8 94       	cli
    394c:	de bf       	out	0x3e, r29	; 62
    394e:	0f be       	out	0x3f, r0	; 63
    3950:	cd bf       	out	0x3d, r28	; 61
    3952:	cf 91       	pop	r28
    3954:	df 91       	pop	r29
    3956:	08 95       	ret

00003958 <__prologue_saves__>:
    3958:	2f 92       	push	r2
    395a:	3f 92       	push	r3
    395c:	4f 92       	push	r4
    395e:	5f 92       	push	r5
    3960:	6f 92       	push	r6
    3962:	7f 92       	push	r7
    3964:	8f 92       	push	r8
    3966:	9f 92       	push	r9
    3968:	af 92       	push	r10
    396a:	bf 92       	push	r11
    396c:	cf 92       	push	r12
    396e:	df 92       	push	r13
    3970:	ef 92       	push	r14
    3972:	ff 92       	push	r15
    3974:	0f 93       	push	r16
    3976:	1f 93       	push	r17
    3978:	cf 93       	push	r28
    397a:	df 93       	push	r29
    397c:	cd b7       	in	r28, 0x3d	; 61
    397e:	de b7       	in	r29, 0x3e	; 62
    3980:	ca 1b       	sub	r28, r26
    3982:	db 0b       	sbc	r29, r27
    3984:	0f b6       	in	r0, 0x3f	; 63
    3986:	f8 94       	cli
    3988:	de bf       	out	0x3e, r29	; 62
    398a:	0f be       	out	0x3f, r0	; 63
    398c:	cd bf       	out	0x3d, r28	; 61
    398e:	09 94       	ijmp

00003990 <__epilogue_restores__>:
    3990:	2a 88       	ldd	r2, Y+18	; 0x12
    3992:	39 88       	ldd	r3, Y+17	; 0x11
    3994:	48 88       	ldd	r4, Y+16	; 0x10
    3996:	5f 84       	ldd	r5, Y+15	; 0x0f
    3998:	6e 84       	ldd	r6, Y+14	; 0x0e
    399a:	7d 84       	ldd	r7, Y+13	; 0x0d
    399c:	8c 84       	ldd	r8, Y+12	; 0x0c
    399e:	9b 84       	ldd	r9, Y+11	; 0x0b
    39a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    39a2:	b9 84       	ldd	r11, Y+9	; 0x09
    39a4:	c8 84       	ldd	r12, Y+8	; 0x08
    39a6:	df 80       	ldd	r13, Y+7	; 0x07
    39a8:	ee 80       	ldd	r14, Y+6	; 0x06
    39aa:	fd 80       	ldd	r15, Y+5	; 0x05
    39ac:	0c 81       	ldd	r16, Y+4	; 0x04
    39ae:	1b 81       	ldd	r17, Y+3	; 0x03
    39b0:	aa 81       	ldd	r26, Y+2	; 0x02
    39b2:	b9 81       	ldd	r27, Y+1	; 0x01
    39b4:	ce 0f       	add	r28, r30
    39b6:	d1 1d       	adc	r29, r1
    39b8:	0f b6       	in	r0, 0x3f	; 63
    39ba:	f8 94       	cli
    39bc:	de bf       	out	0x3e, r29	; 62
    39be:	0f be       	out	0x3f, r0	; 63
    39c0:	cd bf       	out	0x3d, r28	; 61
    39c2:	ed 01       	movw	r28, r26
    39c4:	08 95       	ret

000039c6 <strcmp>:
    39c6:	fb 01       	movw	r30, r22
    39c8:	dc 01       	movw	r26, r24
    39ca:	8d 91       	ld	r24, X+
    39cc:	01 90       	ld	r0, Z+
    39ce:	80 19       	sub	r24, r0
    39d0:	01 10       	cpse	r0, r1
    39d2:	d9 f3       	breq	.-10     	; 0x39ca <strcmp+0x4>
    39d4:	99 0b       	sbc	r25, r25
    39d6:	08 95       	ret

000039d8 <snprintf>:
    39d8:	ae e0       	ldi	r26, 0x0E	; 14
    39da:	b0 e0       	ldi	r27, 0x00	; 0
    39dc:	e2 ef       	ldi	r30, 0xF2	; 242
    39de:	fc e1       	ldi	r31, 0x1C	; 28
    39e0:	0c 94 ba 1c 	jmp	0x3974	; 0x3974 <__prologue_saves__+0x1c>
    39e4:	0d 89       	ldd	r16, Y+21	; 0x15
    39e6:	1e 89       	ldd	r17, Y+22	; 0x16
    39e8:	8f 89       	ldd	r24, Y+23	; 0x17
    39ea:	98 8d       	ldd	r25, Y+24	; 0x18
    39ec:	97 ff       	sbrs	r25, 7
    39ee:	02 c0       	rjmp	.+4      	; 0x39f4 <snprintf+0x1c>
    39f0:	80 e0       	ldi	r24, 0x00	; 0
    39f2:	90 e8       	ldi	r25, 0x80	; 128
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	9e 83       	std	Y+6, r25	; 0x06
    39f8:	8d 83       	std	Y+5, r24	; 0x05
    39fa:	1a 83       	std	Y+2, r17	; 0x02
    39fc:	09 83       	std	Y+1, r16	; 0x01
    39fe:	86 e0       	ldi	r24, 0x06	; 6
    3a00:	8c 83       	std	Y+4, r24	; 0x04
    3a02:	9e 01       	movw	r18, r28
    3a04:	25 5e       	subi	r18, 0xE5	; 229
    3a06:	3f 4f       	sbci	r19, 0xFF	; 255
    3a08:	ce 01       	movw	r24, r28
    3a0a:	01 96       	adiw	r24, 0x01	; 1
    3a0c:	69 8d       	ldd	r22, Y+25	; 0x19
    3a0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a10:	a9 01       	movw	r20, r18
    3a12:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <vfprintf>
    3a16:	4d 81       	ldd	r20, Y+5	; 0x05
    3a18:	5e 81       	ldd	r21, Y+6	; 0x06
    3a1a:	57 fd       	sbrc	r21, 7
    3a1c:	0a c0       	rjmp	.+20     	; 0x3a32 <snprintf+0x5a>
    3a1e:	2f 81       	ldd	r18, Y+7	; 0x07
    3a20:	38 85       	ldd	r19, Y+8	; 0x08
    3a22:	42 17       	cp	r20, r18
    3a24:	53 07       	cpc	r21, r19
    3a26:	0c f4       	brge	.+2      	; 0x3a2a <snprintf+0x52>
    3a28:	9a 01       	movw	r18, r20
    3a2a:	02 0f       	add	r16, r18
    3a2c:	13 1f       	adc	r17, r19
    3a2e:	f8 01       	movw	r30, r16
    3a30:	10 82       	st	Z, r1
    3a32:	2e 96       	adiw	r28, 0x0e	; 14
    3a34:	e4 e0       	ldi	r30, 0x04	; 4
    3a36:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <__epilogue_restores__+0x1c>

00003a3a <vfprintf>:
    3a3a:	ab e0       	ldi	r26, 0x0B	; 11
    3a3c:	b0 e0       	ldi	r27, 0x00	; 0
    3a3e:	e3 e2       	ldi	r30, 0x23	; 35
    3a40:	fd e1       	ldi	r31, 0x1D	; 29
    3a42:	0c 94 ac 1c 	jmp	0x3958	; 0x3958 <__prologue_saves__>
    3a46:	3c 01       	movw	r6, r24
    3a48:	2b 01       	movw	r4, r22
    3a4a:	5a 01       	movw	r10, r20
    3a4c:	fc 01       	movw	r30, r24
    3a4e:	17 82       	std	Z+7, r1	; 0x07
    3a50:	16 82       	std	Z+6, r1	; 0x06
    3a52:	83 81       	ldd	r24, Z+3	; 0x03
    3a54:	81 fd       	sbrc	r24, 1
    3a56:	03 c0       	rjmp	.+6      	; 0x3a5e <vfprintf+0x24>
    3a58:	6f ef       	ldi	r22, 0xFF	; 255
    3a5a:	7f ef       	ldi	r23, 0xFF	; 255
    3a5c:	c6 c1       	rjmp	.+908    	; 0x3dea <vfprintf+0x3b0>
    3a5e:	9a e0       	ldi	r25, 0x0A	; 10
    3a60:	89 2e       	mov	r8, r25
    3a62:	1e 01       	movw	r2, r28
    3a64:	08 94       	sec
    3a66:	21 1c       	adc	r2, r1
    3a68:	31 1c       	adc	r3, r1
    3a6a:	f3 01       	movw	r30, r6
    3a6c:	23 81       	ldd	r18, Z+3	; 0x03
    3a6e:	f2 01       	movw	r30, r4
    3a70:	23 fd       	sbrc	r18, 3
    3a72:	85 91       	lpm	r24, Z+
    3a74:	23 ff       	sbrs	r18, 3
    3a76:	81 91       	ld	r24, Z+
    3a78:	2f 01       	movw	r4, r30
    3a7a:	88 23       	and	r24, r24
    3a7c:	09 f4       	brne	.+2      	; 0x3a80 <vfprintf+0x46>
    3a7e:	b2 c1       	rjmp	.+868    	; 0x3de4 <vfprintf+0x3aa>
    3a80:	85 32       	cpi	r24, 0x25	; 37
    3a82:	39 f4       	brne	.+14     	; 0x3a92 <vfprintf+0x58>
    3a84:	23 fd       	sbrc	r18, 3
    3a86:	85 91       	lpm	r24, Z+
    3a88:	23 ff       	sbrs	r18, 3
    3a8a:	81 91       	ld	r24, Z+
    3a8c:	2f 01       	movw	r4, r30
    3a8e:	85 32       	cpi	r24, 0x25	; 37
    3a90:	29 f4       	brne	.+10     	; 0x3a9c <vfprintf+0x62>
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	b3 01       	movw	r22, r6
    3a96:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <fputc>
    3a9a:	e7 cf       	rjmp	.-50     	; 0x3a6a <vfprintf+0x30>
    3a9c:	98 2f       	mov	r25, r24
    3a9e:	ff 24       	eor	r15, r15
    3aa0:	ee 24       	eor	r14, r14
    3aa2:	99 24       	eor	r9, r9
    3aa4:	ff e1       	ldi	r31, 0x1F	; 31
    3aa6:	ff 15       	cp	r31, r15
    3aa8:	d0 f0       	brcs	.+52     	; 0x3ade <vfprintf+0xa4>
    3aaa:	9b 32       	cpi	r25, 0x2B	; 43
    3aac:	69 f0       	breq	.+26     	; 0x3ac8 <vfprintf+0x8e>
    3aae:	9c 32       	cpi	r25, 0x2C	; 44
    3ab0:	28 f4       	brcc	.+10     	; 0x3abc <vfprintf+0x82>
    3ab2:	90 32       	cpi	r25, 0x20	; 32
    3ab4:	59 f0       	breq	.+22     	; 0x3acc <vfprintf+0x92>
    3ab6:	93 32       	cpi	r25, 0x23	; 35
    3ab8:	91 f4       	brne	.+36     	; 0x3ade <vfprintf+0xa4>
    3aba:	0e c0       	rjmp	.+28     	; 0x3ad8 <vfprintf+0x9e>
    3abc:	9d 32       	cpi	r25, 0x2D	; 45
    3abe:	49 f0       	breq	.+18     	; 0x3ad2 <vfprintf+0x98>
    3ac0:	90 33       	cpi	r25, 0x30	; 48
    3ac2:	69 f4       	brne	.+26     	; 0x3ade <vfprintf+0xa4>
    3ac4:	41 e0       	ldi	r20, 0x01	; 1
    3ac6:	24 c0       	rjmp	.+72     	; 0x3b10 <vfprintf+0xd6>
    3ac8:	52 e0       	ldi	r21, 0x02	; 2
    3aca:	f5 2a       	or	r15, r21
    3acc:	84 e0       	ldi	r24, 0x04	; 4
    3ace:	f8 2a       	or	r15, r24
    3ad0:	28 c0       	rjmp	.+80     	; 0x3b22 <vfprintf+0xe8>
    3ad2:	98 e0       	ldi	r25, 0x08	; 8
    3ad4:	f9 2a       	or	r15, r25
    3ad6:	25 c0       	rjmp	.+74     	; 0x3b22 <vfprintf+0xe8>
    3ad8:	e0 e1       	ldi	r30, 0x10	; 16
    3ada:	fe 2a       	or	r15, r30
    3adc:	22 c0       	rjmp	.+68     	; 0x3b22 <vfprintf+0xe8>
    3ade:	f7 fc       	sbrc	r15, 7
    3ae0:	29 c0       	rjmp	.+82     	; 0x3b34 <vfprintf+0xfa>
    3ae2:	89 2f       	mov	r24, r25
    3ae4:	80 53       	subi	r24, 0x30	; 48
    3ae6:	8a 30       	cpi	r24, 0x0A	; 10
    3ae8:	70 f4       	brcc	.+28     	; 0x3b06 <vfprintf+0xcc>
    3aea:	f6 fe       	sbrs	r15, 6
    3aec:	05 c0       	rjmp	.+10     	; 0x3af8 <vfprintf+0xbe>
    3aee:	98 9c       	mul	r9, r8
    3af0:	90 2c       	mov	r9, r0
    3af2:	11 24       	eor	r1, r1
    3af4:	98 0e       	add	r9, r24
    3af6:	15 c0       	rjmp	.+42     	; 0x3b22 <vfprintf+0xe8>
    3af8:	e8 9c       	mul	r14, r8
    3afa:	e0 2c       	mov	r14, r0
    3afc:	11 24       	eor	r1, r1
    3afe:	e8 0e       	add	r14, r24
    3b00:	f0 e2       	ldi	r31, 0x20	; 32
    3b02:	ff 2a       	or	r15, r31
    3b04:	0e c0       	rjmp	.+28     	; 0x3b22 <vfprintf+0xe8>
    3b06:	9e 32       	cpi	r25, 0x2E	; 46
    3b08:	29 f4       	brne	.+10     	; 0x3b14 <vfprintf+0xda>
    3b0a:	f6 fc       	sbrc	r15, 6
    3b0c:	6b c1       	rjmp	.+726    	; 0x3de4 <vfprintf+0x3aa>
    3b0e:	40 e4       	ldi	r20, 0x40	; 64
    3b10:	f4 2a       	or	r15, r20
    3b12:	07 c0       	rjmp	.+14     	; 0x3b22 <vfprintf+0xe8>
    3b14:	9c 36       	cpi	r25, 0x6C	; 108
    3b16:	19 f4       	brne	.+6      	; 0x3b1e <vfprintf+0xe4>
    3b18:	50 e8       	ldi	r21, 0x80	; 128
    3b1a:	f5 2a       	or	r15, r21
    3b1c:	02 c0       	rjmp	.+4      	; 0x3b22 <vfprintf+0xe8>
    3b1e:	98 36       	cpi	r25, 0x68	; 104
    3b20:	49 f4       	brne	.+18     	; 0x3b34 <vfprintf+0xfa>
    3b22:	f2 01       	movw	r30, r4
    3b24:	23 fd       	sbrc	r18, 3
    3b26:	95 91       	lpm	r25, Z+
    3b28:	23 ff       	sbrs	r18, 3
    3b2a:	91 91       	ld	r25, Z+
    3b2c:	2f 01       	movw	r4, r30
    3b2e:	99 23       	and	r25, r25
    3b30:	09 f0       	breq	.+2      	; 0x3b34 <vfprintf+0xfa>
    3b32:	b8 cf       	rjmp	.-144    	; 0x3aa4 <vfprintf+0x6a>
    3b34:	89 2f       	mov	r24, r25
    3b36:	85 54       	subi	r24, 0x45	; 69
    3b38:	83 30       	cpi	r24, 0x03	; 3
    3b3a:	18 f0       	brcs	.+6      	; 0x3b42 <vfprintf+0x108>
    3b3c:	80 52       	subi	r24, 0x20	; 32
    3b3e:	83 30       	cpi	r24, 0x03	; 3
    3b40:	38 f4       	brcc	.+14     	; 0x3b50 <vfprintf+0x116>
    3b42:	44 e0       	ldi	r20, 0x04	; 4
    3b44:	50 e0       	ldi	r21, 0x00	; 0
    3b46:	a4 0e       	add	r10, r20
    3b48:	b5 1e       	adc	r11, r21
    3b4a:	5f e3       	ldi	r21, 0x3F	; 63
    3b4c:	59 83       	std	Y+1, r21	; 0x01
    3b4e:	0f c0       	rjmp	.+30     	; 0x3b6e <vfprintf+0x134>
    3b50:	93 36       	cpi	r25, 0x63	; 99
    3b52:	31 f0       	breq	.+12     	; 0x3b60 <vfprintf+0x126>
    3b54:	93 37       	cpi	r25, 0x73	; 115
    3b56:	79 f0       	breq	.+30     	; 0x3b76 <vfprintf+0x13c>
    3b58:	93 35       	cpi	r25, 0x53	; 83
    3b5a:	09 f0       	breq	.+2      	; 0x3b5e <vfprintf+0x124>
    3b5c:	56 c0       	rjmp	.+172    	; 0x3c0a <vfprintf+0x1d0>
    3b5e:	20 c0       	rjmp	.+64     	; 0x3ba0 <vfprintf+0x166>
    3b60:	f5 01       	movw	r30, r10
    3b62:	80 81       	ld	r24, Z
    3b64:	89 83       	std	Y+1, r24	; 0x01
    3b66:	42 e0       	ldi	r20, 0x02	; 2
    3b68:	50 e0       	ldi	r21, 0x00	; 0
    3b6a:	a4 0e       	add	r10, r20
    3b6c:	b5 1e       	adc	r11, r21
    3b6e:	61 01       	movw	r12, r2
    3b70:	01 e0       	ldi	r16, 0x01	; 1
    3b72:	10 e0       	ldi	r17, 0x00	; 0
    3b74:	12 c0       	rjmp	.+36     	; 0x3b9a <vfprintf+0x160>
    3b76:	f5 01       	movw	r30, r10
    3b78:	c0 80       	ld	r12, Z
    3b7a:	d1 80       	ldd	r13, Z+1	; 0x01
    3b7c:	f6 fc       	sbrc	r15, 6
    3b7e:	03 c0       	rjmp	.+6      	; 0x3b86 <vfprintf+0x14c>
    3b80:	6f ef       	ldi	r22, 0xFF	; 255
    3b82:	7f ef       	ldi	r23, 0xFF	; 255
    3b84:	02 c0       	rjmp	.+4      	; 0x3b8a <vfprintf+0x150>
    3b86:	69 2d       	mov	r22, r9
    3b88:	70 e0       	ldi	r23, 0x00	; 0
    3b8a:	42 e0       	ldi	r20, 0x02	; 2
    3b8c:	50 e0       	ldi	r21, 0x00	; 0
    3b8e:	a4 0e       	add	r10, r20
    3b90:	b5 1e       	adc	r11, r21
    3b92:	c6 01       	movw	r24, r12
    3b94:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <strnlen>
    3b98:	8c 01       	movw	r16, r24
    3b9a:	5f e7       	ldi	r21, 0x7F	; 127
    3b9c:	f5 22       	and	r15, r21
    3b9e:	14 c0       	rjmp	.+40     	; 0x3bc8 <vfprintf+0x18e>
    3ba0:	f5 01       	movw	r30, r10
    3ba2:	c0 80       	ld	r12, Z
    3ba4:	d1 80       	ldd	r13, Z+1	; 0x01
    3ba6:	f6 fc       	sbrc	r15, 6
    3ba8:	03 c0       	rjmp	.+6      	; 0x3bb0 <vfprintf+0x176>
    3baa:	6f ef       	ldi	r22, 0xFF	; 255
    3bac:	7f ef       	ldi	r23, 0xFF	; 255
    3bae:	02 c0       	rjmp	.+4      	; 0x3bb4 <vfprintf+0x17a>
    3bb0:	69 2d       	mov	r22, r9
    3bb2:	70 e0       	ldi	r23, 0x00	; 0
    3bb4:	42 e0       	ldi	r20, 0x02	; 2
    3bb6:	50 e0       	ldi	r21, 0x00	; 0
    3bb8:	a4 0e       	add	r10, r20
    3bba:	b5 1e       	adc	r11, r21
    3bbc:	c6 01       	movw	r24, r12
    3bbe:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <strnlen_P>
    3bc2:	8c 01       	movw	r16, r24
    3bc4:	50 e8       	ldi	r21, 0x80	; 128
    3bc6:	f5 2a       	or	r15, r21
    3bc8:	f3 fe       	sbrs	r15, 3
    3bca:	07 c0       	rjmp	.+14     	; 0x3bda <vfprintf+0x1a0>
    3bcc:	1a c0       	rjmp	.+52     	; 0x3c02 <vfprintf+0x1c8>
    3bce:	80 e2       	ldi	r24, 0x20	; 32
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	b3 01       	movw	r22, r6
    3bd4:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <fputc>
    3bd8:	ea 94       	dec	r14
    3bda:	8e 2d       	mov	r24, r14
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	08 17       	cp	r16, r24
    3be0:	19 07       	cpc	r17, r25
    3be2:	a8 f3       	brcs	.-22     	; 0x3bce <vfprintf+0x194>
    3be4:	0e c0       	rjmp	.+28     	; 0x3c02 <vfprintf+0x1c8>
    3be6:	f6 01       	movw	r30, r12
    3be8:	f7 fc       	sbrc	r15, 7
    3bea:	85 91       	lpm	r24, Z+
    3bec:	f7 fe       	sbrs	r15, 7
    3bee:	81 91       	ld	r24, Z+
    3bf0:	6f 01       	movw	r12, r30
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	b3 01       	movw	r22, r6
    3bf6:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <fputc>
    3bfa:	e1 10       	cpse	r14, r1
    3bfc:	ea 94       	dec	r14
    3bfe:	01 50       	subi	r16, 0x01	; 1
    3c00:	10 40       	sbci	r17, 0x00	; 0
    3c02:	01 15       	cp	r16, r1
    3c04:	11 05       	cpc	r17, r1
    3c06:	79 f7       	brne	.-34     	; 0x3be6 <vfprintf+0x1ac>
    3c08:	ea c0       	rjmp	.+468    	; 0x3dde <vfprintf+0x3a4>
    3c0a:	94 36       	cpi	r25, 0x64	; 100
    3c0c:	11 f0       	breq	.+4      	; 0x3c12 <vfprintf+0x1d8>
    3c0e:	99 36       	cpi	r25, 0x69	; 105
    3c10:	69 f5       	brne	.+90     	; 0x3c6c <vfprintf+0x232>
    3c12:	f7 fe       	sbrs	r15, 7
    3c14:	08 c0       	rjmp	.+16     	; 0x3c26 <vfprintf+0x1ec>
    3c16:	f5 01       	movw	r30, r10
    3c18:	20 81       	ld	r18, Z
    3c1a:	31 81       	ldd	r19, Z+1	; 0x01
    3c1c:	42 81       	ldd	r20, Z+2	; 0x02
    3c1e:	53 81       	ldd	r21, Z+3	; 0x03
    3c20:	84 e0       	ldi	r24, 0x04	; 4
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	0a c0       	rjmp	.+20     	; 0x3c3a <vfprintf+0x200>
    3c26:	f5 01       	movw	r30, r10
    3c28:	80 81       	ld	r24, Z
    3c2a:	91 81       	ldd	r25, Z+1	; 0x01
    3c2c:	9c 01       	movw	r18, r24
    3c2e:	44 27       	eor	r20, r20
    3c30:	37 fd       	sbrc	r19, 7
    3c32:	40 95       	com	r20
    3c34:	54 2f       	mov	r21, r20
    3c36:	82 e0       	ldi	r24, 0x02	; 2
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	a8 0e       	add	r10, r24
    3c3c:	b9 1e       	adc	r11, r25
    3c3e:	9f e6       	ldi	r25, 0x6F	; 111
    3c40:	f9 22       	and	r15, r25
    3c42:	57 ff       	sbrs	r21, 7
    3c44:	09 c0       	rjmp	.+18     	; 0x3c58 <vfprintf+0x21e>
    3c46:	50 95       	com	r21
    3c48:	40 95       	com	r20
    3c4a:	30 95       	com	r19
    3c4c:	21 95       	neg	r18
    3c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c50:	4f 4f       	sbci	r20, 0xFF	; 255
    3c52:	5f 4f       	sbci	r21, 0xFF	; 255
    3c54:	e0 e8       	ldi	r30, 0x80	; 128
    3c56:	fe 2a       	or	r15, r30
    3c58:	ca 01       	movw	r24, r20
    3c5a:	b9 01       	movw	r22, r18
    3c5c:	a1 01       	movw	r20, r2
    3c5e:	2a e0       	ldi	r18, 0x0A	; 10
    3c60:	30 e0       	ldi	r19, 0x00	; 0
    3c62:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__ultoa_invert>
    3c66:	d8 2e       	mov	r13, r24
    3c68:	d2 18       	sub	r13, r2
    3c6a:	40 c0       	rjmp	.+128    	; 0x3cec <vfprintf+0x2b2>
    3c6c:	95 37       	cpi	r25, 0x75	; 117
    3c6e:	29 f4       	brne	.+10     	; 0x3c7a <vfprintf+0x240>
    3c70:	1f 2d       	mov	r17, r15
    3c72:	1f 7e       	andi	r17, 0xEF	; 239
    3c74:	2a e0       	ldi	r18, 0x0A	; 10
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	1d c0       	rjmp	.+58     	; 0x3cb4 <vfprintf+0x27a>
    3c7a:	1f 2d       	mov	r17, r15
    3c7c:	19 7f       	andi	r17, 0xF9	; 249
    3c7e:	9f 36       	cpi	r25, 0x6F	; 111
    3c80:	61 f0       	breq	.+24     	; 0x3c9a <vfprintf+0x260>
    3c82:	90 37       	cpi	r25, 0x70	; 112
    3c84:	20 f4       	brcc	.+8      	; 0x3c8e <vfprintf+0x254>
    3c86:	98 35       	cpi	r25, 0x58	; 88
    3c88:	09 f0       	breq	.+2      	; 0x3c8c <vfprintf+0x252>
    3c8a:	ac c0       	rjmp	.+344    	; 0x3de4 <vfprintf+0x3aa>
    3c8c:	0f c0       	rjmp	.+30     	; 0x3cac <vfprintf+0x272>
    3c8e:	90 37       	cpi	r25, 0x70	; 112
    3c90:	39 f0       	breq	.+14     	; 0x3ca0 <vfprintf+0x266>
    3c92:	98 37       	cpi	r25, 0x78	; 120
    3c94:	09 f0       	breq	.+2      	; 0x3c98 <vfprintf+0x25e>
    3c96:	a6 c0       	rjmp	.+332    	; 0x3de4 <vfprintf+0x3aa>
    3c98:	04 c0       	rjmp	.+8      	; 0x3ca2 <vfprintf+0x268>
    3c9a:	28 e0       	ldi	r18, 0x08	; 8
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	0a c0       	rjmp	.+20     	; 0x3cb4 <vfprintf+0x27a>
    3ca0:	10 61       	ori	r17, 0x10	; 16
    3ca2:	14 fd       	sbrc	r17, 4
    3ca4:	14 60       	ori	r17, 0x04	; 4
    3ca6:	20 e1       	ldi	r18, 0x10	; 16
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	04 c0       	rjmp	.+8      	; 0x3cb4 <vfprintf+0x27a>
    3cac:	14 fd       	sbrc	r17, 4
    3cae:	16 60       	ori	r17, 0x06	; 6
    3cb0:	20 e1       	ldi	r18, 0x10	; 16
    3cb2:	32 e0       	ldi	r19, 0x02	; 2
    3cb4:	17 ff       	sbrs	r17, 7
    3cb6:	08 c0       	rjmp	.+16     	; 0x3cc8 <vfprintf+0x28e>
    3cb8:	f5 01       	movw	r30, r10
    3cba:	60 81       	ld	r22, Z
    3cbc:	71 81       	ldd	r23, Z+1	; 0x01
    3cbe:	82 81       	ldd	r24, Z+2	; 0x02
    3cc0:	93 81       	ldd	r25, Z+3	; 0x03
    3cc2:	44 e0       	ldi	r20, 0x04	; 4
    3cc4:	50 e0       	ldi	r21, 0x00	; 0
    3cc6:	08 c0       	rjmp	.+16     	; 0x3cd8 <vfprintf+0x29e>
    3cc8:	f5 01       	movw	r30, r10
    3cca:	80 81       	ld	r24, Z
    3ccc:	91 81       	ldd	r25, Z+1	; 0x01
    3cce:	bc 01       	movw	r22, r24
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	42 e0       	ldi	r20, 0x02	; 2
    3cd6:	50 e0       	ldi	r21, 0x00	; 0
    3cd8:	a4 0e       	add	r10, r20
    3cda:	b5 1e       	adc	r11, r21
    3cdc:	a1 01       	movw	r20, r2
    3cde:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__ultoa_invert>
    3ce2:	d8 2e       	mov	r13, r24
    3ce4:	d2 18       	sub	r13, r2
    3ce6:	8f e7       	ldi	r24, 0x7F	; 127
    3ce8:	f8 2e       	mov	r15, r24
    3cea:	f1 22       	and	r15, r17
    3cec:	f6 fe       	sbrs	r15, 6
    3cee:	0b c0       	rjmp	.+22     	; 0x3d06 <vfprintf+0x2cc>
    3cf0:	5e ef       	ldi	r21, 0xFE	; 254
    3cf2:	f5 22       	and	r15, r21
    3cf4:	d9 14       	cp	r13, r9
    3cf6:	38 f4       	brcc	.+14     	; 0x3d06 <vfprintf+0x2cc>
    3cf8:	f4 fe       	sbrs	r15, 4
    3cfa:	07 c0       	rjmp	.+14     	; 0x3d0a <vfprintf+0x2d0>
    3cfc:	f2 fc       	sbrc	r15, 2
    3cfe:	05 c0       	rjmp	.+10     	; 0x3d0a <vfprintf+0x2d0>
    3d00:	8f ee       	ldi	r24, 0xEF	; 239
    3d02:	f8 22       	and	r15, r24
    3d04:	02 c0       	rjmp	.+4      	; 0x3d0a <vfprintf+0x2d0>
    3d06:	1d 2d       	mov	r17, r13
    3d08:	01 c0       	rjmp	.+2      	; 0x3d0c <vfprintf+0x2d2>
    3d0a:	19 2d       	mov	r17, r9
    3d0c:	f4 fe       	sbrs	r15, 4
    3d0e:	0d c0       	rjmp	.+26     	; 0x3d2a <vfprintf+0x2f0>
    3d10:	fe 01       	movw	r30, r28
    3d12:	ed 0d       	add	r30, r13
    3d14:	f1 1d       	adc	r31, r1
    3d16:	80 81       	ld	r24, Z
    3d18:	80 33       	cpi	r24, 0x30	; 48
    3d1a:	19 f4       	brne	.+6      	; 0x3d22 <vfprintf+0x2e8>
    3d1c:	99 ee       	ldi	r25, 0xE9	; 233
    3d1e:	f9 22       	and	r15, r25
    3d20:	08 c0       	rjmp	.+16     	; 0x3d32 <vfprintf+0x2f8>
    3d22:	1f 5f       	subi	r17, 0xFF	; 255
    3d24:	f2 fe       	sbrs	r15, 2
    3d26:	05 c0       	rjmp	.+10     	; 0x3d32 <vfprintf+0x2f8>
    3d28:	03 c0       	rjmp	.+6      	; 0x3d30 <vfprintf+0x2f6>
    3d2a:	8f 2d       	mov	r24, r15
    3d2c:	86 78       	andi	r24, 0x86	; 134
    3d2e:	09 f0       	breq	.+2      	; 0x3d32 <vfprintf+0x2f8>
    3d30:	1f 5f       	subi	r17, 0xFF	; 255
    3d32:	0f 2d       	mov	r16, r15
    3d34:	f3 fc       	sbrc	r15, 3
    3d36:	14 c0       	rjmp	.+40     	; 0x3d60 <vfprintf+0x326>
    3d38:	f0 fe       	sbrs	r15, 0
    3d3a:	0f c0       	rjmp	.+30     	; 0x3d5a <vfprintf+0x320>
    3d3c:	1e 15       	cp	r17, r14
    3d3e:	10 f0       	brcs	.+4      	; 0x3d44 <vfprintf+0x30a>
    3d40:	9d 2c       	mov	r9, r13
    3d42:	0b c0       	rjmp	.+22     	; 0x3d5a <vfprintf+0x320>
    3d44:	9d 2c       	mov	r9, r13
    3d46:	9e 0c       	add	r9, r14
    3d48:	91 1a       	sub	r9, r17
    3d4a:	1e 2d       	mov	r17, r14
    3d4c:	06 c0       	rjmp	.+12     	; 0x3d5a <vfprintf+0x320>
    3d4e:	80 e2       	ldi	r24, 0x20	; 32
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	b3 01       	movw	r22, r6
    3d54:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <fputc>
    3d58:	1f 5f       	subi	r17, 0xFF	; 255
    3d5a:	1e 15       	cp	r17, r14
    3d5c:	c0 f3       	brcs	.-16     	; 0x3d4e <vfprintf+0x314>
    3d5e:	04 c0       	rjmp	.+8      	; 0x3d68 <vfprintf+0x32e>
    3d60:	1e 15       	cp	r17, r14
    3d62:	10 f4       	brcc	.+4      	; 0x3d68 <vfprintf+0x32e>
    3d64:	e1 1a       	sub	r14, r17
    3d66:	01 c0       	rjmp	.+2      	; 0x3d6a <vfprintf+0x330>
    3d68:	ee 24       	eor	r14, r14
    3d6a:	04 ff       	sbrs	r16, 4
    3d6c:	0f c0       	rjmp	.+30     	; 0x3d8c <vfprintf+0x352>
    3d6e:	80 e3       	ldi	r24, 0x30	; 48
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	b3 01       	movw	r22, r6
    3d74:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <fputc>
    3d78:	02 ff       	sbrs	r16, 2
    3d7a:	1d c0       	rjmp	.+58     	; 0x3db6 <vfprintf+0x37c>
    3d7c:	01 fd       	sbrc	r16, 1
    3d7e:	03 c0       	rjmp	.+6      	; 0x3d86 <vfprintf+0x34c>
    3d80:	88 e7       	ldi	r24, 0x78	; 120
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	0e c0       	rjmp	.+28     	; 0x3da2 <vfprintf+0x368>
    3d86:	88 e5       	ldi	r24, 0x58	; 88
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	0b c0       	rjmp	.+22     	; 0x3da2 <vfprintf+0x368>
    3d8c:	80 2f       	mov	r24, r16
    3d8e:	86 78       	andi	r24, 0x86	; 134
    3d90:	91 f0       	breq	.+36     	; 0x3db6 <vfprintf+0x37c>
    3d92:	01 ff       	sbrs	r16, 1
    3d94:	02 c0       	rjmp	.+4      	; 0x3d9a <vfprintf+0x360>
    3d96:	8b e2       	ldi	r24, 0x2B	; 43
    3d98:	01 c0       	rjmp	.+2      	; 0x3d9c <vfprintf+0x362>
    3d9a:	80 e2       	ldi	r24, 0x20	; 32
    3d9c:	f7 fc       	sbrc	r15, 7
    3d9e:	8d e2       	ldi	r24, 0x2D	; 45
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	b3 01       	movw	r22, r6
    3da4:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <fputc>
    3da8:	06 c0       	rjmp	.+12     	; 0x3db6 <vfprintf+0x37c>
    3daa:	80 e3       	ldi	r24, 0x30	; 48
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	b3 01       	movw	r22, r6
    3db0:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <fputc>
    3db4:	9a 94       	dec	r9
    3db6:	d9 14       	cp	r13, r9
    3db8:	c0 f3       	brcs	.-16     	; 0x3daa <vfprintf+0x370>
    3dba:	da 94       	dec	r13
    3dbc:	f1 01       	movw	r30, r2
    3dbe:	ed 0d       	add	r30, r13
    3dc0:	f1 1d       	adc	r31, r1
    3dc2:	80 81       	ld	r24, Z
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	b3 01       	movw	r22, r6
    3dc8:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <fputc>
    3dcc:	dd 20       	and	r13, r13
    3dce:	a9 f7       	brne	.-22     	; 0x3dba <vfprintf+0x380>
    3dd0:	06 c0       	rjmp	.+12     	; 0x3dde <vfprintf+0x3a4>
    3dd2:	80 e2       	ldi	r24, 0x20	; 32
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	b3 01       	movw	r22, r6
    3dd8:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <fputc>
    3ddc:	ea 94       	dec	r14
    3dde:	ee 20       	and	r14, r14
    3de0:	c1 f7       	brne	.-16     	; 0x3dd2 <vfprintf+0x398>
    3de2:	43 ce       	rjmp	.-890    	; 0x3a6a <vfprintf+0x30>
    3de4:	f3 01       	movw	r30, r6
    3de6:	66 81       	ldd	r22, Z+6	; 0x06
    3de8:	77 81       	ldd	r23, Z+7	; 0x07
    3dea:	cb 01       	movw	r24, r22
    3dec:	2b 96       	adiw	r28, 0x0b	; 11
    3dee:	e2 e1       	ldi	r30, 0x12	; 18
    3df0:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__epilogue_restores__>

00003df4 <strnlen_P>:
    3df4:	fc 01       	movw	r30, r24
    3df6:	05 90       	lpm	r0, Z+
    3df8:	61 50       	subi	r22, 0x01	; 1
    3dfa:	70 40       	sbci	r23, 0x00	; 0
    3dfc:	01 10       	cpse	r0, r1
    3dfe:	d8 f7       	brcc	.-10     	; 0x3df6 <strnlen_P+0x2>
    3e00:	80 95       	com	r24
    3e02:	90 95       	com	r25
    3e04:	8e 0f       	add	r24, r30
    3e06:	9f 1f       	adc	r25, r31
    3e08:	08 95       	ret

00003e0a <strnlen>:
    3e0a:	fc 01       	movw	r30, r24
    3e0c:	61 50       	subi	r22, 0x01	; 1
    3e0e:	70 40       	sbci	r23, 0x00	; 0
    3e10:	01 90       	ld	r0, Z+
    3e12:	01 10       	cpse	r0, r1
    3e14:	d8 f7       	brcc	.-10     	; 0x3e0c <strnlen+0x2>
    3e16:	80 95       	com	r24
    3e18:	90 95       	com	r25
    3e1a:	8e 0f       	add	r24, r30
    3e1c:	9f 1f       	adc	r25, r31
    3e1e:	08 95       	ret

00003e20 <fputc>:
    3e20:	0f 93       	push	r16
    3e22:	1f 93       	push	r17
    3e24:	cf 93       	push	r28
    3e26:	df 93       	push	r29
    3e28:	8c 01       	movw	r16, r24
    3e2a:	eb 01       	movw	r28, r22
    3e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2e:	81 ff       	sbrs	r24, 1
    3e30:	1b c0       	rjmp	.+54     	; 0x3e68 <fputc+0x48>
    3e32:	82 ff       	sbrs	r24, 2
    3e34:	0d c0       	rjmp	.+26     	; 0x3e50 <fputc+0x30>
    3e36:	2e 81       	ldd	r18, Y+6	; 0x06
    3e38:	3f 81       	ldd	r19, Y+7	; 0x07
    3e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e3c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e3e:	28 17       	cp	r18, r24
    3e40:	39 07       	cpc	r19, r25
    3e42:	64 f4       	brge	.+24     	; 0x3e5c <fputc+0x3c>
    3e44:	e8 81       	ld	r30, Y
    3e46:	f9 81       	ldd	r31, Y+1	; 0x01
    3e48:	01 93       	st	Z+, r16
    3e4a:	f9 83       	std	Y+1, r31	; 0x01
    3e4c:	e8 83       	st	Y, r30
    3e4e:	06 c0       	rjmp	.+12     	; 0x3e5c <fputc+0x3c>
    3e50:	e8 85       	ldd	r30, Y+8	; 0x08
    3e52:	f9 85       	ldd	r31, Y+9	; 0x09
    3e54:	80 2f       	mov	r24, r16
    3e56:	09 95       	icall
    3e58:	89 2b       	or	r24, r25
    3e5a:	31 f4       	brne	.+12     	; 0x3e68 <fputc+0x48>
    3e5c:	8e 81       	ldd	r24, Y+6	; 0x06
    3e5e:	9f 81       	ldd	r25, Y+7	; 0x07
    3e60:	01 96       	adiw	r24, 0x01	; 1
    3e62:	9f 83       	std	Y+7, r25	; 0x07
    3e64:	8e 83       	std	Y+6, r24	; 0x06
    3e66:	02 c0       	rjmp	.+4      	; 0x3e6c <fputc+0x4c>
    3e68:	0f ef       	ldi	r16, 0xFF	; 255
    3e6a:	1f ef       	ldi	r17, 0xFF	; 255
    3e6c:	c8 01       	movw	r24, r16
    3e6e:	df 91       	pop	r29
    3e70:	cf 91       	pop	r28
    3e72:	1f 91       	pop	r17
    3e74:	0f 91       	pop	r16
    3e76:	08 95       	ret

00003e78 <__ultoa_invert>:
    3e78:	fa 01       	movw	r30, r20
    3e7a:	aa 27       	eor	r26, r26
    3e7c:	28 30       	cpi	r18, 0x08	; 8
    3e7e:	51 f1       	breq	.+84     	; 0x3ed4 <__ultoa_invert+0x5c>
    3e80:	20 31       	cpi	r18, 0x10	; 16
    3e82:	81 f1       	breq	.+96     	; 0x3ee4 <__ultoa_invert+0x6c>
    3e84:	e8 94       	clt
    3e86:	6f 93       	push	r22
    3e88:	6e 7f       	andi	r22, 0xFE	; 254
    3e8a:	6e 5f       	subi	r22, 0xFE	; 254
    3e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e8e:	8f 4f       	sbci	r24, 0xFF	; 255
    3e90:	9f 4f       	sbci	r25, 0xFF	; 255
    3e92:	af 4f       	sbci	r26, 0xFF	; 255
    3e94:	b1 e0       	ldi	r27, 0x01	; 1
    3e96:	3e d0       	rcall	.+124    	; 0x3f14 <__ultoa_invert+0x9c>
    3e98:	b4 e0       	ldi	r27, 0x04	; 4
    3e9a:	3c d0       	rcall	.+120    	; 0x3f14 <__ultoa_invert+0x9c>
    3e9c:	67 0f       	add	r22, r23
    3e9e:	78 1f       	adc	r23, r24
    3ea0:	89 1f       	adc	r24, r25
    3ea2:	9a 1f       	adc	r25, r26
    3ea4:	a1 1d       	adc	r26, r1
    3ea6:	68 0f       	add	r22, r24
    3ea8:	79 1f       	adc	r23, r25
    3eaa:	8a 1f       	adc	r24, r26
    3eac:	91 1d       	adc	r25, r1
    3eae:	a1 1d       	adc	r26, r1
    3eb0:	6a 0f       	add	r22, r26
    3eb2:	71 1d       	adc	r23, r1
    3eb4:	81 1d       	adc	r24, r1
    3eb6:	91 1d       	adc	r25, r1
    3eb8:	a1 1d       	adc	r26, r1
    3eba:	20 d0       	rcall	.+64     	; 0x3efc <__ultoa_invert+0x84>
    3ebc:	09 f4       	brne	.+2      	; 0x3ec0 <__ultoa_invert+0x48>
    3ebe:	68 94       	set
    3ec0:	3f 91       	pop	r19
    3ec2:	2a e0       	ldi	r18, 0x0A	; 10
    3ec4:	26 9f       	mul	r18, r22
    3ec6:	11 24       	eor	r1, r1
    3ec8:	30 19       	sub	r19, r0
    3eca:	30 5d       	subi	r19, 0xD0	; 208
    3ecc:	31 93       	st	Z+, r19
    3ece:	de f6       	brtc	.-74     	; 0x3e86 <__ultoa_invert+0xe>
    3ed0:	cf 01       	movw	r24, r30
    3ed2:	08 95       	ret
    3ed4:	46 2f       	mov	r20, r22
    3ed6:	47 70       	andi	r20, 0x07	; 7
    3ed8:	40 5d       	subi	r20, 0xD0	; 208
    3eda:	41 93       	st	Z+, r20
    3edc:	b3 e0       	ldi	r27, 0x03	; 3
    3ede:	0f d0       	rcall	.+30     	; 0x3efe <__ultoa_invert+0x86>
    3ee0:	c9 f7       	brne	.-14     	; 0x3ed4 <__ultoa_invert+0x5c>
    3ee2:	f6 cf       	rjmp	.-20     	; 0x3ed0 <__ultoa_invert+0x58>
    3ee4:	46 2f       	mov	r20, r22
    3ee6:	4f 70       	andi	r20, 0x0F	; 15
    3ee8:	40 5d       	subi	r20, 0xD0	; 208
    3eea:	4a 33       	cpi	r20, 0x3A	; 58
    3eec:	18 f0       	brcs	.+6      	; 0x3ef4 <__ultoa_invert+0x7c>
    3eee:	49 5d       	subi	r20, 0xD9	; 217
    3ef0:	31 fd       	sbrc	r19, 1
    3ef2:	40 52       	subi	r20, 0x20	; 32
    3ef4:	41 93       	st	Z+, r20
    3ef6:	02 d0       	rcall	.+4      	; 0x3efc <__ultoa_invert+0x84>
    3ef8:	a9 f7       	brne	.-22     	; 0x3ee4 <__ultoa_invert+0x6c>
    3efa:	ea cf       	rjmp	.-44     	; 0x3ed0 <__ultoa_invert+0x58>
    3efc:	b4 e0       	ldi	r27, 0x04	; 4
    3efe:	a6 95       	lsr	r26
    3f00:	97 95       	ror	r25
    3f02:	87 95       	ror	r24
    3f04:	77 95       	ror	r23
    3f06:	67 95       	ror	r22
    3f08:	ba 95       	dec	r27
    3f0a:	c9 f7       	brne	.-14     	; 0x3efe <__ultoa_invert+0x86>
    3f0c:	00 97       	sbiw	r24, 0x00	; 0
    3f0e:	61 05       	cpc	r22, r1
    3f10:	71 05       	cpc	r23, r1
    3f12:	08 95       	ret
    3f14:	9b 01       	movw	r18, r22
    3f16:	ac 01       	movw	r20, r24
    3f18:	0a 2e       	mov	r0, r26
    3f1a:	06 94       	lsr	r0
    3f1c:	57 95       	ror	r21
    3f1e:	47 95       	ror	r20
    3f20:	37 95       	ror	r19
    3f22:	27 95       	ror	r18
    3f24:	ba 95       	dec	r27
    3f26:	c9 f7       	brne	.-14     	; 0x3f1a <__ultoa_invert+0xa2>
    3f28:	62 0f       	add	r22, r18
    3f2a:	73 1f       	adc	r23, r19
    3f2c:	84 1f       	adc	r24, r20
    3f2e:	95 1f       	adc	r25, r21
    3f30:	a0 1d       	adc	r26, r0
    3f32:	08 95       	ret

00003f34 <_exit>:
    3f34:	f8 94       	cli

00003f36 <__stop_program>:
    3f36:	ff cf       	rjmp	.-2      	; 0x3f36 <__stop_program>
